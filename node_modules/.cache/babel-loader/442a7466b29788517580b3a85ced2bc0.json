{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/khuong/Desktop/ReactJS/scrollcontrols-gltf/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _createClass from \"/Users/khuong/Desktop/ReactJS/scrollcontrols-gltf/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"/Users/khuong/Desktop/ReactJS/scrollcontrols-gltf/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nvar t = new Uint8Array([0]),\n    e = [171, 75, 84, 88, 32, 50, 48, 187, 13, 10, 26, 10];\nvar n, i, s, a, r, o, l, f;\n!function (t) {\n  t[t.NONE = 0] = \"NONE\", t[t.BASISLZ = 1] = \"BASISLZ\", t[t.ZSTD = 2] = \"ZSTD\", t[t.ZLIB = 3] = \"ZLIB\";\n}(n || (n = {})), function (t) {\n  t[t.BASICFORMAT = 0] = \"BASICFORMAT\";\n}(i || (i = {})), function (t) {\n  t[t.UNSPECIFIED = 0] = \"UNSPECIFIED\", t[t.ETC1S = 163] = \"ETC1S\", t[t.UASTC = 166] = \"UASTC\";\n}(s || (s = {})), function (t) {\n  t[t.UNSPECIFIED = 0] = \"UNSPECIFIED\", t[t.SRGB = 1] = \"SRGB\";\n}(a || (a = {})), function (t) {\n  t[t.UNSPECIFIED = 0] = \"UNSPECIFIED\", t[t.LINEAR = 1] = \"LINEAR\", t[t.SRGB = 2] = \"SRGB\", t[t.ITU = 3] = \"ITU\", t[t.NTSC = 4] = \"NTSC\", t[t.SLOG = 5] = \"SLOG\", t[t.SLOG2 = 6] = \"SLOG2\";\n}(r || (r = {})), function (t) {\n  t[t.ALPHA_STRAIGHT = 0] = \"ALPHA_STRAIGHT\", t[t.ALPHA_PREMULTIPLIED = 1] = \"ALPHA_PREMULTIPLIED\";\n}(o || (o = {})), function (t) {\n  t[t.RGB = 0] = \"RGB\", t[t.RRR = 3] = \"RRR\", t[t.GGG = 4] = \"GGG\", t[t.AAA = 15] = \"AAA\";\n}(l || (l = {})), function (t) {\n  t[t.RGB = 0] = \"RGB\", t[t.RGBA = 3] = \"RGBA\", t[t.RRR = 4] = \"RRR\", t[t.RRRG = 5] = \"RRRG\";\n}(f || (f = {}));\n\nvar U = /*#__PURE__*/_createClass(function U() {\n  _classCallCheck(this, U);\n\n  this.vkFormat = 0, this.typeSize = 1, this.pixelWidth = 0, this.pixelHeight = 0, this.pixelDepth = 0, this.layerCount = 0, this.faceCount = 1, this.supercompressionScheme = n.NONE, this.levels = [], this.dataFormatDescriptor = [{\n    vendorId: 0,\n    descriptorType: i.BASICFORMAT,\n    versionNumber: 2,\n    descriptorBlockSize: 40,\n    colorModel: s.UNSPECIFIED,\n    colorPrimaries: a.SRGB,\n    transferFunction: a.SRGB,\n    flags: o.ALPHA_STRAIGHT,\n    texelBlockDimension: {\n      x: 4,\n      y: 4,\n      z: 1,\n      w: 1\n    },\n    bytesPlane: [],\n    samples: []\n  }], this.keyValue = {}, this.globalData = null;\n});\n\nvar c = /*#__PURE__*/function () {\n  function c(t, e, n, i) {\n    _classCallCheck(this, c);\n\n    this._dataView = new DataView(t.buffer, t.byteOffset + e, n), this._littleEndian = i, this._offset = 0;\n  }\n\n  _createClass(c, [{\n    key: \"_nextUint8\",\n    value: function _nextUint8() {\n      var t = this._dataView.getUint8(this._offset);\n\n      return this._offset += 1, t;\n    }\n  }, {\n    key: \"_nextUint16\",\n    value: function _nextUint16() {\n      var t = this._dataView.getUint16(this._offset, this._littleEndian);\n\n      return this._offset += 2, t;\n    }\n  }, {\n    key: \"_nextUint32\",\n    value: function _nextUint32() {\n      var t = this._dataView.getUint32(this._offset, this._littleEndian);\n\n      return this._offset += 4, t;\n    }\n  }, {\n    key: \"_nextUint64\",\n    value: function _nextUint64() {\n      var t = this._dataView.getUint32(this._offset, this._littleEndian) + Math.pow(2, 32) * this._dataView.getUint32(this._offset + 4, this._littleEndian);\n\n      return this._offset += 8, t;\n    }\n  }, {\n    key: \"_skip\",\n    value: function _skip(t) {\n      return this._offset += t, this;\n    }\n  }, {\n    key: \"_scan\",\n    value: function _scan(t) {\n      var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      var n = this._offset;\n      var i = 0;\n\n      for (; this._dataView.getUint8(this._offset) !== e && i < t;) {\n        i++, this._offset++;\n      }\n\n      return i < t && this._offset++, new Uint8Array(this._dataView.buffer, this._dataView.byteOffset + n, i);\n    }\n  }]);\n\n  return c;\n}();\n\nfunction h(t) {\n  return \"undefined\" != typeof TextEncoder ? new TextEncoder().encode(t) : Buffer.from(t);\n}\n\nfunction _(t) {\n  return \"undefined\" != typeof TextDecoder ? new TextDecoder().decode(t) : Buffer.from(t).toString(\"utf8\");\n}\n\nfunction g(t) {\n  var e = 0;\n\n  var _iterator = _createForOfIteratorHelper(t),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var _n = _step.value;\n      e += _n.byteLength;\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  var n = new Uint8Array(e);\n  var i = 0;\n\n  var _iterator2 = _createForOfIteratorHelper(t),\n      _step2;\n\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var _e = _step2.value;\n      n.set(new Uint8Array(_e), i), i += _e.byteLength;\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n\n  return n;\n}\n\nfunction p(t) {\n  var n = new Uint8Array(t.buffer, t.byteOffset, e.length);\n  if (n[0] !== e[0] || n[1] !== e[1] || n[2] !== e[2] || n[3] !== e[3] || n[4] !== e[4] || n[5] !== e[5] || n[6] !== e[6] || n[7] !== e[7] || n[8] !== e[8] || n[9] !== e[9] || n[10] !== e[10] || n[11] !== e[11]) throw new Error(\"Missing KTX 2.0 identifier.\");\n  var i = new U(),\n      s = 17 * Uint32Array.BYTES_PER_ELEMENT,\n      a = new c(t, e.length, s, !0);\n  i.vkFormat = a._nextUint32(), i.typeSize = a._nextUint32(), i.pixelWidth = a._nextUint32(), i.pixelHeight = a._nextUint32(), i.pixelDepth = a._nextUint32(), i.layerCount = a._nextUint32(), i.faceCount = a._nextUint32();\n\n  var r = a._nextUint32();\n\n  i.supercompressionScheme = a._nextUint32();\n\n  var o = a._nextUint32(),\n      l = a._nextUint32(),\n      f = a._nextUint32(),\n      h = a._nextUint32(),\n      g = a._nextUint64(),\n      p = a._nextUint64(),\n      x = new c(t, e.length + s, 3 * r * 8, !0);\n\n  for (var _e2 = 0; _e2 < r; _e2++) {\n    i.levels.push({\n      levelData: new Uint8Array(t.buffer, t.byteOffset + x._nextUint64(), x._nextUint64()),\n      uncompressedByteLength: x._nextUint64()\n    });\n  }\n\n  var u = new c(t, o, l, !0),\n      y = {\n    vendorId: u._skip(4)._nextUint16(),\n    descriptorType: u._nextUint16(),\n    versionNumber: u._nextUint16(),\n    descriptorBlockSize: u._nextUint16(),\n    colorModel: u._nextUint8(),\n    colorPrimaries: u._nextUint8(),\n    transferFunction: u._nextUint8(),\n    flags: u._nextUint8(),\n    texelBlockDimension: {\n      x: u._nextUint8() + 1,\n      y: u._nextUint8() + 1,\n      z: u._nextUint8() + 1,\n      w: u._nextUint8() + 1\n    },\n    bytesPlane: [u._nextUint8(), u._nextUint8(), u._nextUint8(), u._nextUint8(), u._nextUint8(), u._nextUint8(), u._nextUint8(), u._nextUint8()],\n    samples: []\n  },\n      D = (y.descriptorBlockSize / 4 - 6) / 4;\n\n  for (var _t = 0; _t < D; _t++) {\n    y.samples[_t] = {\n      bitOffset: u._nextUint16(),\n      bitLength: u._nextUint8(),\n      channelID: u._nextUint8(),\n      samplePosition: [u._nextUint8(), u._nextUint8(), u._nextUint8(), u._nextUint8()],\n      sampleLower: u._nextUint32(),\n      sampleUpper: u._nextUint32()\n    };\n  }\n\n  i.dataFormatDescriptor.length = 0, i.dataFormatDescriptor.push(y);\n  var b = new c(t, f, h, !0);\n\n  for (; b._offset < h;) {\n    var _t2 = b._nextUint32(),\n        _e3 = b._scan(_t2),\n        _n2 = _(_e3),\n        _s = b._scan(_t2 - _e3.byteLength);\n\n    i.keyValue[_n2] = _n2.match(/^ktx/i) ? _(_s) : _s, b._offset % 4 && b._skip(4 - b._offset % 4);\n  }\n\n  if (p <= 0) return i;\n\n  var d = new c(t, g, p, !0),\n      B = d._nextUint16(),\n      w = d._nextUint16(),\n      A = d._nextUint32(),\n      S = d._nextUint32(),\n      m = d._nextUint32(),\n      L = d._nextUint32(),\n      I = [];\n\n  for (var _t3 = 0; _t3 < r; _t3++) {\n    I.push({\n      imageFlags: d._nextUint32(),\n      rgbSliceByteOffset: d._nextUint32(),\n      rgbSliceByteLength: d._nextUint32(),\n      alphaSliceByteOffset: d._nextUint32(),\n      alphaSliceByteLength: d._nextUint32()\n    });\n  }\n\n  var R = g + d._offset,\n      E = R + A,\n      T = E + S,\n      O = T + m,\n      P = new Uint8Array(t.buffer, t.byteOffset + R, A),\n      C = new Uint8Array(t.buffer, t.byteOffset + E, S),\n      F = new Uint8Array(t.buffer, t.byteOffset + T, m),\n      G = new Uint8Array(t.buffer, t.byteOffset + O, L);\n  return i.globalData = {\n    endpointCount: B,\n    selectorCount: w,\n    imageDescs: I,\n    endpointsData: P,\n    selectorsData: C,\n    tablesData: F,\n    extendedData: G\n  }, i;\n}\n\nfunction x() {\n  return (x = Object.assign || function (t) {\n    for (var e = 1; e < arguments.length; e++) {\n      var n = arguments[e];\n\n      for (var i in n) {\n        Object.prototype.hasOwnProperty.call(n, i) && (t[i] = n[i]);\n      }\n    }\n\n    return t;\n  }).apply(this, arguments);\n}\n\nvar u = {\n  keepWriter: !1\n};\n\nfunction y(n) {\n  var s = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  s = x({}, u, s);\n  var a = new ArrayBuffer(0);\n\n  if (n.globalData) {\n    var _t4 = new ArrayBuffer(20 + 5 * n.globalData.imageDescs.length * 4),\n        _e4 = new DataView(_t4);\n\n    _e4.setUint16(0, n.globalData.endpointCount, !0), _e4.setUint16(2, n.globalData.selectorCount, !0), _e4.setUint32(4, n.globalData.endpointsData.byteLength, !0), _e4.setUint32(8, n.globalData.selectorsData.byteLength, !0), _e4.setUint32(12, n.globalData.tablesData.byteLength, !0), _e4.setUint32(16, n.globalData.extendedData.byteLength, !0);\n\n    for (var _t5 = 0; _t5 < n.globalData.imageDescs.length; _t5++) {\n      var _i = n.globalData.imageDescs[_t5];\n      _e4.setUint32(20 + 5 * _t5 * 4 + 0, _i.imageFlags, !0), _e4.setUint32(20 + 5 * _t5 * 4 + 4, _i.rgbSliceByteOffset, !0), _e4.setUint32(20 + 5 * _t5 * 4 + 8, _i.rgbSliceByteLength, !0), _e4.setUint32(20 + 5 * _t5 * 4 + 12, _i.alphaSliceByteOffset, !0), _e4.setUint32(20 + 5 * _t5 * 4 + 16, _i.alphaSliceByteLength, !0);\n    }\n\n    a = g([_t4, n.globalData.endpointsData, n.globalData.selectorsData, n.globalData.tablesData, n.globalData.extendedData]);\n  }\n\n  var r = [];\n  var o = n.keyValue;\n  s.keepWriter || (o = x({}, n.keyValue, {\n    KTXwriter: \"KTX-Parse v0.2.2\"\n  }));\n\n  for (var _e5 in o) {\n    var _n3 = o[_e5],\n        _i2 = h(_e5),\n        _s2 = \"string\" == typeof _n3 ? h(_n3) : _n3,\n        _a = _i2.byteLength + 1 + _s2.byteLength + 1,\n        _l = _a % 4 ? 4 - _a % 4 : 0;\n\n    r.push(g([new Uint32Array([_a]), _i2, t, _s2, t, new Uint8Array(_l).fill(0)]));\n  }\n\n  var l = g(r);\n  if (1 !== n.dataFormatDescriptor.length || n.dataFormatDescriptor[0].descriptorType !== i.BASICFORMAT) throw new Error(\"Only BASICFORMAT Data Format Descriptor output supported.\");\n  var f = n.dataFormatDescriptor[0],\n      U = new ArrayBuffer(28 + 16 * f.samples.length),\n      c = new DataView(U);\n  c.setUint32(0, U.byteLength, !0), c.setUint16(4, f.vendorId, !0), c.setUint16(6, f.descriptorType, !0), c.setUint16(8, f.versionNumber, !0), c.setUint16(10, f.descriptorBlockSize, !0), c.setUint8(12, f.colorModel), c.setUint8(13, f.colorPrimaries), c.setUint8(14, f.transferFunction), c.setUint8(15, f.flags), c.setUint8(16, f.texelBlockDimension.x - 1), c.setUint8(17, f.texelBlockDimension.y - 1), c.setUint8(18, f.texelBlockDimension.z - 1), c.setUint8(19, f.texelBlockDimension.w - 1);\n\n  for (var _t6 = 0; _t6 < 8; _t6++) {\n    c.setUint8(20 + _t6, f.bytesPlane[_t6]);\n  }\n\n  for (var _t7 = 0; _t7 < f.samples.length; _t7++) {\n    var _e6 = f.samples[_t7],\n        _n4 = 28 + 16 * _t7;\n\n    c.setUint16(_n4 + 0, _e6.bitOffset, !0), c.setUint8(_n4 + 2, _e6.bitLength), c.setUint8(_n4 + 3, _e6.channelID), c.setUint8(_n4 + 4, _e6.samplePosition[0]), c.setUint8(_n4 + 5, _e6.samplePosition[1]), c.setUint8(_n4 + 6, _e6.samplePosition[2]), c.setUint8(_n4 + 7, _e6.samplePosition[3]), c.setUint32(_n4 + 8, _e6.sampleLower, !0), c.setUint32(_n4 + 12, _e6.sampleUpper, !0);\n  }\n\n  var _ = e.length + 68 + 3 * n.levels.length * 8,\n      p = _ + U.byteLength;\n\n  var y = p + l.byteLength;\n  y % 8 && (y += 8 - y % 8);\n  var D = [],\n      b = new DataView(new ArrayBuffer(3 * n.levels.length * 8));\n  var d = y + a.byteLength;\n\n  for (var _t8 = 0; _t8 < n.levels.length; _t8++) {\n    var _e7 = n.levels[_t8];\n    D.push(_e7.levelData), b.setBigUint64(24 * _t8 + 0, BigInt(d), !0), b.setBigUint64(24 * _t8 + 8, BigInt(_e7.levelData.byteLength), !0), b.setBigUint64(24 * _t8 + 16, BigInt(_e7.uncompressedByteLength), !0), d += _e7.levelData.byteLength;\n  }\n\n  var B = new ArrayBuffer(68),\n      w = new DataView(B);\n  return w.setUint32(0, n.vkFormat, !0), w.setUint32(4, n.typeSize, !0), w.setUint32(8, n.pixelWidth, !0), w.setUint32(12, n.pixelHeight, !0), w.setUint32(16, n.pixelDepth, !0), w.setUint32(20, n.layerCount, !0), w.setUint32(24, n.faceCount, !0), w.setUint32(28, n.levels.length, !0), w.setUint32(32, n.supercompressionScheme, !0), w.setUint32(36, _, !0), w.setUint32(40, U.byteLength, !0), w.setUint32(44, p, !0), w.setUint32(48, l.byteLength, !0), w.setBigUint64(52, BigInt(y), !0), w.setBigUint64(60, BigInt(a.byteLength), !0), new Uint8Array(g([new Uint8Array(e).buffer, B, b.buffer, U, l, new ArrayBuffer(y - (p + l.byteLength)), a].concat(D)));\n}\n\nexport { l as KTX2ChannelETC1S, f as KTX2ChannelUASTC, U as KTX2Container, i as KTX2DescriptorType, o as KTX2Flags, s as KTX2Model, a as KTX2Primaries, n as KTX2SupercompressionScheme, r as KTX2Transfer, p as read, y as write };","map":{"version":3,"sources":["../src/constants.ts","../src/enums.ts","../src/container.ts","../src/buffer-reader.ts","../src/util.ts","../src/read.ts","../src/write.ts"],"names":["NUL","Uint8Array","KTX2_ID","KTX2SupercompressionScheme","KTX2DescriptorType","KTX2Model","KTX2Primaries","KTX2Transfer","KTX2Flags","KTX2ChannelETC1S","KTX2ChannelUASTC","constructor","KTX2Container","this","NONE","vendorId","descriptorType","BASICFORMAT","versionNumber","descriptorBlockSize","colorModel","UNSPECIFIED","colorPrimaries","SRGB","transferFunction","flags","ALPHA_STRAIGHT","texelBlockDimension","x","y","z","w","bytesPlane","samples","BufferReader","data","byteOffset","byteLength","littleEndian","_dataView","DataView","buffer","_littleEndian","_offset","_nextUint8","value","getUint8","_nextUint16","getUint16","_nextUint32","getUint32","_nextUint64","_skip","bytes","_scan","maxByteLength","term","encodeText","text","TextEncoder","encode","Buffer","from","decodeText","TextDecoder","decode","toString","concat","buffers","totalByteLength","result","set","read","id","length","Error","container","headerByteLength","Uint32Array","BYTES_PER_ELEMENT","headerReader","vkFormat","typeSize","pixelWidth","pixelHeight","pixelDepth","layerCount","faceCount","levelCount","supercompressionScheme","dfdByteOffset","dfdByteLength","kvdByteOffset","kvdByteLength","sgdByteOffset","sgdByteLength","levelReader","i","levels","push","levelData","uncompressedByteLength","dfdReader","dfd","numSamples","bitOffset","bitLength","channelID","samplePosition","sampleLower","sampleUpper","dataFormatDescriptor","kvdReader","keyValueByteLength","keyData","key","valueData","keyValue","match","sgdReader","endpointCount","selectorCount","endpointsByteLength","selectorsByteLength","tablesByteLength","extendedByteLength","imageDescs","imageFlags","rgbSliceByteOffset","rgbSliceByteLength","alphaSliceByteOffset","alphaSliceByteLength","endpointsByteOffset","selectorsByteOffset","tablesByteOffset","extendedByteOffset","endpointsData","selectorsData","tablesData","extendedData","globalData","DEFAULT_OPTIONS","keepWriter","write","options","sgdBuffer","ArrayBuffer","sgdHeaderBuffer","sgdHeaderView","setUint16","setUint32","imageDesc","keyValueData","KTXwriter","kvByteLength","kvPadding","fill","kvdBuffer","dfdBuffer","dfdView","setUint8","sample","sampleByteOffset","levelIndex","levelDataByteOffset","level","setBigUint64","BigInt","headerBuffer","headerView"],"mappings":"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","sourcesContent":["///////////////////////////////////////////////////\n// Common.\n///////////////////////////////////////////////////\n\n// Injected at compile time, from $npm_package_version.\ndeclare const PACKAGE_VERSION: string;\n\nexport const KTX_WRITER = `KTX-Parse v${PACKAGE_VERSION}`;\n\nexport const NUL = new Uint8Array([0x00]);\n\n\n///////////////////////////////////////////////////\n// KTX2 Header.\n///////////////////////////////////////////////////\n\nexport const KTX2_ID = [\n\t// '´', 'K', 'T', 'X', '2', '0', 'ª', '\\r', '\\n', '\\x1A', '\\n'\n\t0xAB, 0x4B, 0x54, 0x58, 0x20, 0x32, 0x30, 0xBB, 0x0D, 0x0A, 0x1A, 0x0A\n];\n\nexport const HEADER_BYTE_LENGTH = 68; // 13 * 4 + 2 * 8\n\n\n///////////////////////////////////////////////////\n// Data Format Descriptor (DFD).\n///////////////////////////////////////////////////\n\nexport const KHR_DF_VENDORID_KHRONOS = 0;\nexport const KHR_DF_VERSION = 2;\nexport const KHR_DF_BLOCKSIZE = 40;\nexport const VK_FORMAT_UNDEFINED = 0;\n","/**\n * Enums.\n */\n\n///////////////////////////////////////////////////\n// KTX2 Header.\n///////////////////////////////////////////////////\n\nexport enum KTX2SupercompressionScheme {\n\tNONE = 0,\n\tBASISLZ = 1,\n\tZSTD = 2,\n\tZLIB = 3,\n};\n\n\n///////////////////////////////////////////////////\n// Data Format Descriptor (DFD).\n///////////////////////////////////////////////////\n\nexport enum KTX2DescriptorType {\n\tBASICFORMAT = 0x00,\n};\n\nexport enum KTX2Model {\n\tUNSPECIFIED = 0,\n\tETC1S = 163,\n\tUASTC = 166,\n};\n\nexport enum KTX2Primaries {\n\tUNSPECIFIED = 0,\n\tSRGB = 1,\n};\n\nexport enum KTX2Transfer {\n\tUNSPECIFIED = 0,\n\tLINEAR = 1,\n\tSRGB = 2,\n\tITU = 3,\n\tNTSC = 4,\n\tSLOG = 5,\n\tSLOG2 = 6,\n};\n\nexport enum KTX2Flags {\n\tALPHA_STRAIGHT = 0,\n\tALPHA_PREMULTIPLIED = 1,\n};\n\nexport enum KTX2ChannelETC1S {\n\tRGB = 0,\n\tRRR = 3,\n\tGGG = 4,\n\tAAA = 15,\n};\n\nexport enum KTX2ChannelUASTC {\n\tRGB = 0,\n\tRGBA = 3,\n\tRRR = 4,\n\tRRRG = 5,\n};\n","import { KHR_DF_BLOCKSIZE, KHR_DF_VENDORID_KHRONOS, KHR_DF_VERSION, VK_FORMAT_UNDEFINED } from './constants';\nimport { KTX2DescriptorType, KTX2Flags, KTX2Model, KTX2Primaries, KTX2SupercompressionScheme } from './enums';\n\n/**\n * Represents an unpacked KTX 2.0 texture container. Data for individual mip levels are stored in\n * the `.levels` array, typically compressed in Basis Universal formats. Additional properties\n * provide metadata required to process, transcode, and upload these textures.\n */\nexport class KTX2Container {\n\t/**\n\t * Specifies the image format using Vulkan VkFormat enum values. When using Basis Universal\n\t * texture formats, `vkFormat` must be VK_FORMAT_UNDEFINED.\n\t */\n\tpublic vkFormat = VK_FORMAT_UNDEFINED;\n\n\t/**\n\t * Size of the data type in bytes used to upload the data to a graphics API. When `vkFormat` is\n\t * VK_FORMAT_UNDEFINED, `typeSize` must be 1.\n\t */\n\tpublic typeSize: number = 1;\n\n\t/** Width of the texture image for level 0, in pixels. */\n\tpublic pixelWidth: number = 0;\n\n\t/** Height of the texture image for level 0, in pixels. */\n\tpublic pixelHeight: number = 0;\n\n\t/** Depth of the texture image for level 0, in pixels (3D textures only). */\n\tpublic pixelDepth: number = 0;\n\n\t/** Number of array elements (array textures only). */\n\tpublic layerCount: number = 0;\n\n\t/**\n\t * Number of cubemap faces. For cubemaps and cubemap arrays, `faceCount` must be 6. For all\n\t * other textures, `faceCount` must be 1. Cubemap faces are stored in +X, -X, +Y, -Y, +Z, -Z\n\t * order.\n\t */\n\tpublic faceCount: number = 1;\n\n\t/** Indicates which supercompression scheme has been applied to mip level images, if any. */\n\tpublic supercompressionScheme = KTX2SupercompressionScheme.NONE;\n\n\t/** Mip levels, ordered largest (original) to smallest (~1px). */\n\tpublic levels: KTX2Level[] = [];\n\n\t/** Data Format Descriptor. */\n\tpublic dataFormatDescriptor: KTX2DataFormatDescriptorBasicFormat[] = [{\n\t\tvendorId: KHR_DF_VENDORID_KHRONOS,\n\t\tdescriptorType: KTX2DescriptorType.BASICFORMAT,\n\t\tversionNumber: KHR_DF_VERSION,\n\t\tdescriptorBlockSize: KHR_DF_BLOCKSIZE,\n\t\tcolorModel: KTX2Model.UNSPECIFIED,\n\t\tcolorPrimaries: KTX2Primaries.SRGB,\n\t\ttransferFunction: KTX2Primaries.SRGB,\n\t\tflags: KTX2Flags.ALPHA_STRAIGHT,\n\t\ttexelBlockDimension: {x: 4, y: 4, z: 1, w: 1},\n\t\tbytesPlane: [],\n\t\tsamples: [],\n\t}];\n\n\t/** Key/Value Data. */\n\tpublic keyValue: {[key: string]: string | Uint8Array} = {};\n\n\t/** Supercompression Global Data. */\n\tpublic globalData: KTX2GlobalDataBasisLZ | null = null;\n}\n\n\n///////////////////////////////////////////////////\n// Mip Levels.\n///////////////////////////////////////////////////\n\nexport interface KTX2Level {\n\t/** Compressed data of the mip level. */\n\tlevelData: Uint8Array;\n\n\t/**\n\t * Size of the mip level after reflation from supercompression, if applicable. When\n\t * `supercompressionType` is BASISLZ, `uncompressedByteLength` must be 0. When\n\t * `supercompressionType` is `NONE`, `uncompressedByteLength` must match the `levelData` byte\n\t * length.\n\t *\n\t * _**NOTICE:** this implies that for formats such as UASTC, `uncompressedByteLength` may\n\t * indicate size after ZSTD reflation (and of transcoded ASTC data), but does _not_ indicate\n\t * size of decoded RGBA32 pixels._\n\t */\n\tuncompressedByteLength: number;\n};\n\n\n///////////////////////////////////////////////////\n// Data Format Descriptor (DFD).\n///////////////////////////////////////////////////\n\nexport interface KTX2DataFormatDescriptorBasicFormat {\n\tvendorId: number;\n\tdescriptorType: number;\n\tversionNumber: number;\n\tdescriptorBlockSize: number;\n\tcolorModel: number;\n\tcolorPrimaries: number;\n\ttransferFunction: number;\n\tflags: number;\n\ttexelBlockDimension: KTX2BasicFormatTexelBlockDimensions;\n\tbytesPlane: number[];\n\tsamples: KTX2BasicFormatSample[],\n};\n\nexport interface KTX2BasicFormatTexelBlockDimensions {\n\tx: number;\n\ty: number;\n\tz: number;\n\tw: number;\n};\n\nexport interface KTX2BasicFormatSample {\n\tbitOffset: number;\n\tbitLength: number;\n\tchannelID: number;\n\tsamplePosition: number[];\n\tsampleLower: number;\n\tsampleUpper: number;\n};\n\n\n///////////////////////////////////////////////////\n// Supercompression Global Data.\n///////////////////////////////////////////////////\n\nexport interface KTX2GlobalDataBasisLZ {\n\tendpointCount: number;\n\tselectorCount: number;\n\timageDescs: KTX2GlobalDataBasisLZImageDesc[];\n\tendpointsData: Uint8Array;\n\tselectorsData: Uint8Array;\n\ttablesData: Uint8Array;\n\textendedData: Uint8Array;\n};\n\ninterface KTX2GlobalDataBasisLZImageDesc {\n\timageFlags: number;\n\trgbSliceByteOffset: number;\n\trgbSliceByteLength: number;\n\talphaSliceByteOffset: number;\n\talphaSliceByteLength: number;\n};\n","export class BufferReader {\n\tprivate _dataView: DataView;\n\tprivate _littleEndian: boolean;\n\tpublic _offset: number;\n\n\tconstructor(data: Uint8Array, byteOffset: number, byteLength: number, littleEndian: boolean) {\n\t\tthis._dataView = new DataView(data.buffer, data.byteOffset + byteOffset, byteLength);\n\t\tthis._littleEndian = littleEndian;\n\t\tthis._offset = 0;\n\t}\n\n\t_nextUint8() {\n\t\tconst value = this._dataView.getUint8(this._offset);\n\t\tthis._offset += 1;\n\t\treturn value;\n\t}\n\n\t_nextUint16() {\n\t\tconst value = this._dataView.getUint16(this._offset, this._littleEndian);\n\t\tthis._offset += 2;\n\t\treturn value;\n\t}\n\n\t_nextUint32() {\n\t\tconst value = this._dataView.getUint32(this._offset, this._littleEndian);\n\t\tthis._offset += 4;\n\t\treturn value;\n\t}\n\n\t_nextUint64() {\n\t\tconst left = this._dataView.getUint32(this._offset, this._littleEndian);\n\t\tconst right = this._dataView.getUint32(this._offset + 4, this._littleEndian);\n\t\t// TODO(cleanup): Just test this...\n\t\t// const value = this._littleEndian ? left + (2 ** 32 * right) : (2 ** 32 * left) + right;\n\t\tconst value = left + (2 ** 32 * right);\n\t\tthis._offset += 8;\n\t\treturn value;\n\t}\n\n\t_skip(bytes: number) {\n\t\tthis._offset += bytes;\n\t\treturn this;\n\t}\n\n\t_scan(maxByteLength: number, term: number = 0x00): Uint8Array {\n\t\tconst byteOffset = this._offset;\n\t\tlet byteLength = 0;\n\t\twhile (this._dataView.getUint8(this._offset) !== term && byteLength < maxByteLength) {\n\t\t\tbyteLength++;\n\t\t\tthis._offset++;\n\t\t}\n\n\t\tif (byteLength < maxByteLength) this._offset++;\n\n\t\treturn new Uint8Array(\n\t\t\tthis._dataView.buffer,\n\t\t\tthis._dataView.byteOffset + byteOffset,\n\t\t\tbyteLength\n\t\t);\n\t}\n}\n","\n/** Encodes text to an ArrayBuffer. */\nexport function encodeText(text: string): Uint8Array {\n\tif (typeof TextEncoder !== 'undefined') {\n\t\treturn new TextEncoder().encode(text);\n\t}\n\treturn Buffer.from(text);\n}\n\n/** Decodes an ArrayBuffer to text. */\nexport function decodeText(buffer: Uint8Array): string {\n\tif (typeof TextDecoder !== 'undefined') {\n\t\treturn new TextDecoder().decode(buffer);\n\t}\n\treturn Buffer.from(buffer).toString('utf8');\n}\n\n/** Concatenates N ArrayBuffers. */\nexport function concat (buffers: (ArrayBuffer | Uint8Array)[]): Uint8Array {\n\tlet totalByteLength = 0;\n\tfor (const buffer of buffers) {\n\t\ttotalByteLength += buffer.byteLength;\n\t}\n\n\tconst result = new Uint8Array(totalByteLength);\n\tlet byteOffset = 0;\n\n\tfor (const buffer of buffers) {\n\t\tresult.set(new Uint8Array(buffer), byteOffset);\n\t\tbyteOffset += buffer.byteLength;\n\t}\n\n\treturn result;\n}","import { BufferReader } from './buffer-reader';\nimport { KTX2_ID } from './constants';\nimport { KTX2Container, KTX2DataFormatDescriptorBasicFormat } from './container';\nimport { decodeText } from './util';\n\n/**\n * Parses a KTX 2.0 file, returning an unpacked {@link KTX2Container} instance with all associated\n * data. The container's mip levels and other binary data are pointers into the original file, not\n * copies, so the original file should not be overwritten after reading.\n *\n * @param data Bytes of KTX 2.0 file, as Uint8Array or Buffer.\n */\nexport function read(data: Uint8Array): KTX2Container {\n\n\t///////////////////////////////////////////////////\n\t// KTX 2.0 Identifier.\n\t///////////////////////////////////////////////////\n\n\tconst id = new Uint8Array(data.buffer, data.byteOffset, KTX2_ID.length);\n\tif (id[0] !== KTX2_ID[0] || // '´'\n\t\tid[1] !== KTX2_ID[1] || // 'K'\n\t\tid[2] !== KTX2_ID[2] || // 'T'\n\t\tid[3] !== KTX2_ID[3] || // 'X'\n\t\tid[4] !== KTX2_ID[4] || // ' '\n\t\tid[5] !== KTX2_ID[5] || // '2'\n\t\tid[6] !== KTX2_ID[6] || // '0'\n\t\tid[7] !== KTX2_ID[7] || // 'ª'\n\t\tid[8] !== KTX2_ID[8] || // '\\r'\n\t\tid[9] !== KTX2_ID[9] || // '\\n'\n\t\tid[10] !== KTX2_ID[10] || // '\\x1A'\n\t\tid[11] !== KTX2_ID[11] // '\\n'\n\t) {\n\t\tthrow new Error('Missing KTX 2.0 identifier.');\n\t}\n\n\tconst container = new KTX2Container();\n\n\t///////////////////////////////////////////////////\n\t// Header.\n\t///////////////////////////////////////////////////\n\n\tconst headerByteLength = 17 * Uint32Array.BYTES_PER_ELEMENT;\n\tconst headerReader = new BufferReader(data, KTX2_ID.length, headerByteLength, true);\n\n\tcontainer.vkFormat = headerReader._nextUint32();\n\tcontainer.typeSize = headerReader._nextUint32();\n\tcontainer.pixelWidth = headerReader._nextUint32();\n\tcontainer.pixelHeight = headerReader._nextUint32();\n\tcontainer.pixelDepth = headerReader._nextUint32();\n\tcontainer.layerCount = headerReader._nextUint32();\n\tcontainer.faceCount = headerReader._nextUint32();\n\n\tconst levelCount = headerReader._nextUint32();\n\n\tcontainer.supercompressionScheme = headerReader._nextUint32();\n\n\tconst dfdByteOffset = headerReader._nextUint32();\n\tconst dfdByteLength = headerReader._nextUint32();\n\tconst kvdByteOffset = headerReader._nextUint32();\n\tconst kvdByteLength = headerReader._nextUint32();\n\tconst sgdByteOffset = headerReader._nextUint64();\n\tconst sgdByteLength = headerReader._nextUint64();\n\n\t///////////////////////////////////////////////////\n\t// Level Index.\n\t///////////////////////////////////////////////////\n\n\tconst levelByteLength = levelCount * 3 * 8;\n\tconst levelReader = new BufferReader(data, KTX2_ID.length + headerByteLength, levelByteLength, true);\n\n\tfor (let i = 0; i < levelCount; i ++) {\n\t\tcontainer.levels.push({\n\t\t\tlevelData: new Uint8Array(data.buffer, data.byteOffset + levelReader._nextUint64(), levelReader._nextUint64()),\n\t\t\tuncompressedByteLength: levelReader._nextUint64(),\n\t\t});\n\t}\n\n\n\t///////////////////////////////////////////////////\n\t// Data Format Descriptor (DFD).\n\t///////////////////////////////////////////////////\n\n\tconst dfdReader = new BufferReader(data, dfdByteOffset, dfdByteLength, true);\n\n\tconst dfd: KTX2DataFormatDescriptorBasicFormat = {\n\t\tvendorId: dfdReader._skip(4 /* totalSize */)._nextUint16(),\n\t\tdescriptorType: dfdReader._nextUint16(),\n\t\tversionNumber: dfdReader._nextUint16(),\n\t\tdescriptorBlockSize: dfdReader._nextUint16(),\n\t\tcolorModel: dfdReader._nextUint8(),\n\t\tcolorPrimaries: dfdReader._nextUint8(),\n\t\ttransferFunction: dfdReader._nextUint8(),\n\t\tflags: dfdReader._nextUint8(),\n\t\ttexelBlockDimension: {\n\t\t\tx: dfdReader._nextUint8() + 1,\n\t\t\ty: dfdReader._nextUint8() + 1,\n\t\t\tz: dfdReader._nextUint8() + 1,\n\t\t\tw: dfdReader._nextUint8() + 1,\n\t\t},\n\t\tbytesPlane: [\n\t\t\tdfdReader._nextUint8(),\n\t\t\tdfdReader._nextUint8(),\n\t\t\tdfdReader._nextUint8(),\n\t\t\tdfdReader._nextUint8(),\n\t\t\tdfdReader._nextUint8(),\n\t\t\tdfdReader._nextUint8(),\n\t\t\tdfdReader._nextUint8(),\n\t\t\tdfdReader._nextUint8(),\n\t\t],\n\t\tsamples: [],\n\t};\n\n\tconst sampleStart = 6;\n\tconst sampleWords = 4;\n\tconst numSamples = (dfd.descriptorBlockSize / 4 - sampleStart) / sampleWords;\n\n\tfor (let i = 0; i < numSamples; i ++) {\n\t\tdfd.samples[ i ] = {\n\t\t\tbitOffset: dfdReader._nextUint16(),\n\t\t\tbitLength: dfdReader._nextUint8(),\n\t\t\tchannelID: dfdReader._nextUint8(),\n\t\t\tsamplePosition: [\n\t\t\t\tdfdReader._nextUint8(),\n\t\t\t\tdfdReader._nextUint8(),\n\t\t\t\tdfdReader._nextUint8(),\n\t\t\t\tdfdReader._nextUint8(),\n\t\t\t],\n\t\t\tsampleLower: dfdReader._nextUint32(),\n\t\t\tsampleUpper: dfdReader._nextUint32(),\n\t\t};\n\t}\n\n\tcontainer.dataFormatDescriptor.length = 0;\n\tcontainer.dataFormatDescriptor.push(dfd);\n\n\n\t///////////////////////////////////////////////////\n\t// Key/Value Data (KVD).\n\t///////////////////////////////////////////////////\n\n\tconst kvdReader = new BufferReader(data, kvdByteOffset, kvdByteLength, true);\n\n\twhile (kvdReader._offset < kvdByteLength) {\n\t\tconst keyValueByteLength = kvdReader._nextUint32();\n\t\tconst keyData = kvdReader._scan(keyValueByteLength);\n\t\tconst key = decodeText(keyData);\n\n\t\tconst valueData = kvdReader._scan(keyValueByteLength - keyData.byteLength);\n\t\tcontainer.keyValue[key] = key.match(/^ktx/i) ? decodeText(valueData) : valueData;\n\n\t\t// 4-byte alignment.\n\t\tif (kvdReader._offset % 4) kvdReader._skip(4 - (kvdReader._offset % 4));\n\t}\n\n\n\t///////////////////////////////////////////////////\n\t// Supercompression Global Data (SGD).\n\t///////////////////////////////////////////////////\n\n\tif (sgdByteLength <= 0) return container;\n\n\tconst sgdReader = new BufferReader(data, sgdByteOffset, sgdByteLength, true);\n\n\tconst endpointCount = sgdReader._nextUint16();\n\tconst selectorCount = sgdReader._nextUint16();\n\tconst endpointsByteLength = sgdReader._nextUint32();\n\tconst selectorsByteLength = sgdReader._nextUint32();\n\tconst tablesByteLength = sgdReader._nextUint32();\n\tconst extendedByteLength = sgdReader._nextUint32();\n\n\tconst imageDescs = [];\n\tfor (let i = 0; i < levelCount; i ++) {\n\t\timageDescs.push({\n\t\t\timageFlags: sgdReader._nextUint32(),\n\t\t\trgbSliceByteOffset: sgdReader._nextUint32(),\n\t\t\trgbSliceByteLength: sgdReader._nextUint32(),\n\t\t\talphaSliceByteOffset: sgdReader._nextUint32(),\n\t\t\talphaSliceByteLength: sgdReader._nextUint32(),\n\t\t});\n\t}\n\n\tconst endpointsByteOffset = sgdByteOffset + sgdReader._offset;\n\tconst selectorsByteOffset = endpointsByteOffset + endpointsByteLength;\n\tconst tablesByteOffset = selectorsByteOffset + selectorsByteLength;\n\tconst extendedByteOffset = tablesByteOffset + tablesByteLength;\n\n\tconst endpointsData = new Uint8Array(data.buffer, data.byteOffset + endpointsByteOffset, endpointsByteLength);\n\tconst selectorsData = new Uint8Array(data.buffer, data.byteOffset + selectorsByteOffset, selectorsByteLength);\n\tconst tablesData = new Uint8Array(data.buffer, data.byteOffset + tablesByteOffset, tablesByteLength);\n\tconst extendedData = new Uint8Array(data.buffer, data.byteOffset + extendedByteOffset, extendedByteLength);\n\n\tcontainer.globalData = {\n\t\tendpointCount,\n\t\tselectorCount,\n\t\timageDescs,\n\t\tendpointsData,\n\t\tselectorsData,\n\t\ttablesData,\n\t\textendedData,\n\t};\n\n\treturn container;\n}\n","import { HEADER_BYTE_LENGTH, KTX2_ID, KTX_WRITER, NUL } from './constants';\nimport { KTX2Container } from './container';\nimport { KTX2DescriptorType } from './enums';\nimport { concat, encodeText } from './util';\n\ninterface WriteOptions {keepWriter?: boolean};\nconst DEFAULT_OPTIONS: WriteOptions = {keepWriter: false};\n\n/**\n * Serializes a {@link KTX2Container} instance to a KTX 2.0 file. Mip levels and other binary data\n * are copied into the resulting Uint8Array, so the original container can safely be edited or\n * destroyed after it is serialized.\n *\n * Options:\n * - keepWriter: If true, 'KTXWriter' key/value field is written as provided by the container.\n * \t\tOtherwise, a string for the current ktx-parse version is generated. Default: false.\n *\n * @param container\n * @param options\n */\nexport function write(container: KTX2Container, options: WriteOptions = {}): Uint8Array {\n\toptions = {...DEFAULT_OPTIONS, ...options};\n\n\t///////////////////////////////////////////////////\n\t// Supercompression Global Data (SGD).\n\t///////////////////////////////////////////////////\n\n\tlet sgdBuffer = new ArrayBuffer(0);\n\tif (container.globalData) {\n\t\tconst sgdHeaderBuffer = new ArrayBuffer(20 + container.globalData.imageDescs.length * 5 * 4);\n\t\tconst sgdHeaderView = new DataView(sgdHeaderBuffer);\n\t\tsgdHeaderView.setUint16(0, container.globalData.endpointCount, true);\n\t\tsgdHeaderView.setUint16(2, container.globalData.selectorCount, true);\n\t\tsgdHeaderView.setUint32(4, container.globalData.endpointsData.byteLength, true);\n\t\tsgdHeaderView.setUint32(8, container.globalData.selectorsData.byteLength, true);\n\t\tsgdHeaderView.setUint32(12, container.globalData.tablesData.byteLength, true);\n\t\tsgdHeaderView.setUint32(16, container.globalData.extendedData.byteLength, true);\n\n\t\tfor (let i = 0; i < container.globalData.imageDescs.length; i++) {\n\t\t\tconst imageDesc = container.globalData.imageDescs[i];\n\t\t\tsgdHeaderView.setUint32(20 + i * 5 * 4 + 0, imageDesc.imageFlags, true);\n\t\t\tsgdHeaderView.setUint32(20 + i * 5 * 4 + 4, imageDesc.rgbSliceByteOffset, true);\n\t\t\tsgdHeaderView.setUint32(20 + i * 5 * 4 + 8, imageDesc.rgbSliceByteLength, true);\n\t\t\tsgdHeaderView.setUint32(20 + i * 5 * 4 + 12, imageDesc.alphaSliceByteOffset, true);\n\t\t\tsgdHeaderView.setUint32(20 + i * 5 * 4 + 16, imageDesc.alphaSliceByteLength, true);\n\t\t}\n\n\t\tsgdBuffer = concat([\n\t\t\tsgdHeaderBuffer,\n\t\t\tcontainer.globalData.endpointsData,\n\t\t\tcontainer.globalData.selectorsData,\n\t\t\tcontainer.globalData.tablesData,\n\t\t\tcontainer.globalData.extendedData,\n\t\t]);\n\t}\n\n\n\t///////////////////////////////////////////////////\n\t// Key/Value Data (KVD).\n\t///////////////////////////////////////////////////\n\n\tconst keyValueData: Uint8Array[] = [];\n\tlet keyValue = container.keyValue;\n\n\tif (!options.keepWriter) {\n\t\tkeyValue = {...container.keyValue, 'KTXwriter': KTX_WRITER};\n\t}\n\n\tfor (const key in keyValue) {\n\t\tconst value = keyValue[key];\n\t\tconst keyData = encodeText(key);\n\t\tconst valueData = typeof value === 'string' ? encodeText(value) : value;\n\t\tconst kvByteLength = keyData.byteLength + 1 + valueData.byteLength + 1;\n\t\tconst kvPadding = kvByteLength % 4 ? (4 - (kvByteLength % 4)) : 0; // align(4)\n\t\tkeyValueData.push(concat([\n\t\t\tnew Uint32Array([kvByteLength]),\n\t\t\tkeyData,\n\t\t\tNUL,\n\t\t\tvalueData,\n\t\t\tNUL,\n\t\t\tnew Uint8Array(kvPadding).fill(0x00), // align(4)\n\t\t]));\n\t}\n\n\tconst kvdBuffer = concat(keyValueData);\n\n\n\t///////////////////////////////////////////////////\n\t// Data Format Descriptor (DFD).\n\t///////////////////////////////////////////////////\n\n\tif (container.dataFormatDescriptor.length !== 1\n\t\t\t|| container.dataFormatDescriptor[0].descriptorType !== KTX2DescriptorType.BASICFORMAT) {\n\t\tthrow new Error('Only BASICFORMAT Data Format Descriptor output supported.');\n\t}\n\n\tconst dfd = container.dataFormatDescriptor[0];\n\n\tconst dfdBuffer = new ArrayBuffer(28 + dfd.samples.length * 16);\n\tconst dfdView = new DataView(dfdBuffer);\n\n\tdfdView.setUint32(0, dfdBuffer.byteLength, true);\n\tdfdView.setUint16(4, dfd.vendorId, true);\n\tdfdView.setUint16(6, dfd.descriptorType, true);\n\tdfdView.setUint16(8, dfd.versionNumber, true);\n\tdfdView.setUint16(10, dfd.descriptorBlockSize, true);\n\n\tdfdView.setUint8(12, dfd.colorModel);\n\tdfdView.setUint8(13, dfd.colorPrimaries);\n\tdfdView.setUint8(14, dfd.transferFunction);\n\tdfdView.setUint8(15, dfd.flags);\n\n\tdfdView.setUint8(16, dfd.texelBlockDimension.x - 1);\n\tdfdView.setUint8(17, dfd.texelBlockDimension.y - 1);\n\tdfdView.setUint8(18, dfd.texelBlockDimension.z - 1);\n\tdfdView.setUint8(19, dfd.texelBlockDimension.w - 1);\n\n\tfor (let i = 0; i < 8; i++) dfdView.setUint8(20 + i, dfd.bytesPlane[i]);\n\n\tfor (let i = 0; i < dfd.samples.length; i++) {\n\t\tconst sample = dfd.samples[i];\n\t\tconst sampleByteOffset = 28 + i * 16;\n\n\t\tdfdView.setUint16(sampleByteOffset + 0, sample.bitOffset, true);\n\t\tdfdView.setUint8(sampleByteOffset + 2, sample.bitLength);\n\t\tdfdView.setUint8(sampleByteOffset + 3, sample.channelID);\n\n\t\tdfdView.setUint8(sampleByteOffset + 4, sample.samplePosition[0]);\n\t\tdfdView.setUint8(sampleByteOffset + 5, sample.samplePosition[1]);\n\t\tdfdView.setUint8(sampleByteOffset + 6, sample.samplePosition[2]);\n\t\tdfdView.setUint8(sampleByteOffset + 7, sample.samplePosition[3]);\n\n\t\tdfdView.setUint32(sampleByteOffset + 8, sample.sampleLower, true);\n\t\tdfdView.setUint32(sampleByteOffset + 12, sample.sampleUpper, true);\n\t}\n\n\n\t///////////////////////////////////////////////////\n\t// Data alignment.\n\t///////////////////////////////////////////////////\n\n\tconst dfdByteOffset = KTX2_ID.length + HEADER_BYTE_LENGTH + container.levels.length * 3 * 8;\n\tconst kvdByteOffset = dfdByteOffset + dfdBuffer.byteLength;\n\tlet sgdByteOffset = kvdByteOffset + kvdBuffer.byteLength;\n\tif (sgdByteOffset % 8) sgdByteOffset += 8 - (sgdByteOffset % 8); // align(8)\n\n\n\t///////////////////////////////////////////////////\n\t// Level Index.\n\t///////////////////////////////////////////////////\n\n\tconst levelData: Uint8Array[] = [];\n\tconst levelIndex = new DataView(new ArrayBuffer(container.levels.length * 3 * 8));\n\n\tlet levelDataByteOffset = sgdByteOffset + sgdBuffer.byteLength;\n\tfor (let i = 0; i < container.levels.length; i++) {\n\t\tconst level = container.levels[i];\n\t\tlevelData.push(level.levelData);\n\t\tlevelIndex.setBigUint64(i * 24 + 0, BigInt(levelDataByteOffset), true);\n\t\tlevelIndex.setBigUint64(i * 24 + 8, BigInt(level.levelData.byteLength), true);\n\t\tlevelIndex.setBigUint64(i * 24 + 16, BigInt(level.uncompressedByteLength), true);\n\t\tlevelDataByteOffset += level.levelData.byteLength;\n\t}\n\n\n\t///////////////////////////////////////////////////\n\t// Header.\n\t///////////////////////////////////////////////////\n\n\tconst headerBuffer = new ArrayBuffer(HEADER_BYTE_LENGTH);\n\tconst headerView = new DataView(headerBuffer);\n\theaderView.setUint32(0, container.vkFormat, true);\n\theaderView.setUint32(4, container.typeSize, true);\n\theaderView.setUint32(8, container.pixelWidth, true);\n\theaderView.setUint32(12, container.pixelHeight, true);\n\theaderView.setUint32(16, container.pixelDepth, true);\n\theaderView.setUint32(20, container.layerCount, true);\n\theaderView.setUint32(24, container.faceCount, true);\n\theaderView.setUint32(28, container.levels.length, true);\n\theaderView.setUint32(32, container.supercompressionScheme, true);\n\n\theaderView.setUint32(36, dfdByteOffset, true);\n\theaderView.setUint32(40, dfdBuffer.byteLength, true);\n\theaderView.setUint32(44, kvdByteOffset, true);\n\theaderView.setUint32(48, kvdBuffer.byteLength, true);\n\theaderView.setBigUint64(52, BigInt(sgdByteOffset), true);\n\theaderView.setBigUint64(60, BigInt(sgdBuffer.byteLength), true);\n\n\n\t///////////////////////////////////////////////////\n\t// Compose.\n\t///////////////////////////////////////////////////\n\n\treturn new Uint8Array(concat([\n\t\tnew Uint8Array(KTX2_ID).buffer,\n\t\theaderBuffer,\n\t\tlevelIndex.buffer,\n\t\tdfdBuffer,\n\t\tkvdBuffer,\n\t\tnew ArrayBuffer(sgdByteOffset - (kvdByteOffset + kvdBuffer.byteLength)), // align(8)\n\t\tsgdBuffer,\n\t\t...levelData,\n\t]));\n}\n\n"]},"metadata":{},"sourceType":"module"}