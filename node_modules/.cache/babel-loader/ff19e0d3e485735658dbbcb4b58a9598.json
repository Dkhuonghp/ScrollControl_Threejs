{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.canMatchCharCode = exports.firstCharOptimizedIndices = exports.getOptimizedStartCodesIndices = exports.failedOptimizationPrefixMsg = void 0;\n\nvar regexp_to_ast_1 = require(\"regexp-to-ast\");\n\nvar isArray_1 = __importDefault(require(\"lodash/isArray\"));\n\nvar every_1 = __importDefault(require(\"lodash/every\"));\n\nvar forEach_1 = __importDefault(require(\"lodash/forEach\"));\n\nvar find_1 = __importDefault(require(\"lodash/find\"));\n\nvar values_1 = __importDefault(require(\"lodash/values\"));\n\nvar includes_1 = __importDefault(require(\"lodash/includes\"));\n\nvar utils_1 = require(\"@chevrotain/utils\");\n\nvar reg_exp_parser_1 = require(\"./reg_exp_parser\");\n\nvar lexer_1 = require(\"./lexer\");\n\nvar complementErrorMessage = \"Complement Sets are not supported for first char optimization\";\nexports.failedOptimizationPrefixMsg = 'Unable to use \"first char\" lexer optimizations:\\n';\n\nfunction getOptimizedStartCodesIndices(regExp, ensureOptimizations) {\n  if (ensureOptimizations === void 0) {\n    ensureOptimizations = false;\n  }\n\n  try {\n    var ast = (0, reg_exp_parser_1.getRegExpAst)(regExp);\n    var firstChars = firstCharOptimizedIndices(ast.value, {}, ast.flags.ignoreCase);\n    return firstChars;\n  } catch (e) {\n    /* istanbul ignore next */\n    // Testing this relies on the regexp-to-ast library having a bug... */\n    // TODO: only the else branch needs to be ignored, try to fix with newer prettier / tsc\n    if (e.message === complementErrorMessage) {\n      if (ensureOptimizations) {\n        (0, utils_1.PRINT_WARNING)(\"\".concat(exports.failedOptimizationPrefixMsg) + \"\\tUnable to optimize: < \".concat(regExp.toString(), \" >\\n\") + \"\\tComplement Sets cannot be automatically optimized.\\n\" + \"\\tThis will disable the lexer's first char optimizations.\\n\" + \"\\tSee: https://chevrotain.io/docs/guide/resolving_lexer_errors.html#COMPLEMENT for details.\");\n      }\n    } else {\n      var msgSuffix = \"\";\n\n      if (ensureOptimizations) {\n        msgSuffix = \"\\n\\tThis will disable the lexer's first char optimizations.\\n\" + \"\\tSee: https://chevrotain.io/docs/guide/resolving_lexer_errors.html#REGEXP_PARSING for details.\";\n      }\n\n      (0, utils_1.PRINT_ERROR)(\"\".concat(exports.failedOptimizationPrefixMsg, \"\\n\") + \"\\tFailed parsing: < \".concat(regExp.toString(), \" >\\n\") + \"\\tUsing the regexp-to-ast library version: \".concat(regexp_to_ast_1.VERSION, \"\\n\") + \"\\tPlease open an issue at: https://github.com/bd82/regexp-to-ast/issues\" + msgSuffix);\n    }\n  }\n\n  return [];\n}\n\nexports.getOptimizedStartCodesIndices = getOptimizedStartCodesIndices;\n\nfunction firstCharOptimizedIndices(ast, result, ignoreCase) {\n  switch (ast.type) {\n    case \"Disjunction\":\n      for (var i = 0; i < ast.value.length; i++) {\n        firstCharOptimizedIndices(ast.value[i], result, ignoreCase);\n      }\n\n      break;\n\n    case \"Alternative\":\n      var terms = ast.value;\n\n      for (var i = 0; i < terms.length; i++) {\n        var term = terms[i]; // skip terms that cannot effect the first char results\n\n        switch (term.type) {\n          case \"EndAnchor\": // A group back reference cannot affect potential starting char.\n          // because if a back reference is the first production than automatically\n          // the group being referenced has had to come BEFORE so its codes have already been added\n\n          case \"GroupBackReference\": // assertions do not affect potential starting codes\n\n          case \"Lookahead\":\n          case \"NegativeLookahead\":\n          case \"StartAnchor\":\n          case \"WordBoundary\":\n          case \"NonWordBoundary\":\n            continue;\n        }\n\n        var atom = term;\n\n        switch (atom.type) {\n          case \"Character\":\n            addOptimizedIdxToResult(atom.value, result, ignoreCase);\n            break;\n\n          case \"Set\":\n            if (atom.complement === true) {\n              throw Error(complementErrorMessage);\n            }\n\n            (0, forEach_1.default)(atom.value, function (code) {\n              if (typeof code === \"number\") {\n                addOptimizedIdxToResult(code, result, ignoreCase);\n              } else {\n                // range\n                var range = code; // cannot optimize when ignoreCase is\n\n                if (ignoreCase === true) {\n                  for (var rangeCode = range.from; rangeCode <= range.to; rangeCode++) {\n                    addOptimizedIdxToResult(rangeCode, result, ignoreCase);\n                  }\n                } // Optimization (2 orders of magnitude less work for very large ranges)\n                else {\n                  // handle unoptimized values\n                  for (var rangeCode = range.from; rangeCode <= range.to && rangeCode < lexer_1.minOptimizationVal; rangeCode++) {\n                    addOptimizedIdxToResult(rangeCode, result, ignoreCase);\n                  } // Less common charCode where we optimize for faster init time, by using larger \"buckets\"\n\n\n                  if (range.to >= lexer_1.minOptimizationVal) {\n                    var minUnOptVal = range.from >= lexer_1.minOptimizationVal ? range.from : lexer_1.minOptimizationVal;\n                    var maxUnOptVal = range.to;\n                    var minOptIdx = (0, lexer_1.charCodeToOptimizedIndex)(minUnOptVal);\n                    var maxOptIdx = (0, lexer_1.charCodeToOptimizedIndex)(maxUnOptVal);\n\n                    for (var currOptIdx = minOptIdx; currOptIdx <= maxOptIdx; currOptIdx++) {\n                      result[currOptIdx] = currOptIdx;\n                    }\n                  }\n                }\n              }\n            });\n            break;\n\n          case \"Group\":\n            firstCharOptimizedIndices(atom.value, result, ignoreCase);\n            break;\n\n          /* istanbul ignore next */\n\n          default:\n            throw Error(\"Non Exhaustive Match\");\n        } // reached a mandatory production, no more **start** codes can be found on this alternative\n\n\n        var isOptionalQuantifier = atom.quantifier !== undefined && atom.quantifier.atLeast === 0;\n\n        if ( // A group may be optional due to empty contents /(?:)/\n        // or if everything inside it is optional /((a)?)/\n        atom.type === \"Group\" && isWholeOptional(atom) === false || // If this term is not a group it may only be optional if it has an optional quantifier\n        atom.type !== \"Group\" && isOptionalQuantifier === false) {\n          break;\n        }\n      }\n\n      break;\n\n    /* istanbul ignore next */\n\n    default:\n      throw Error(\"non exhaustive match!\");\n  } // console.log(Object.keys(result).length)\n\n\n  return (0, values_1.default)(result);\n}\n\nexports.firstCharOptimizedIndices = firstCharOptimizedIndices;\n\nfunction addOptimizedIdxToResult(code, result, ignoreCase) {\n  var optimizedCharIdx = (0, lexer_1.charCodeToOptimizedIndex)(code);\n  result[optimizedCharIdx] = optimizedCharIdx;\n\n  if (ignoreCase === true) {\n    handleIgnoreCase(code, result);\n  }\n}\n\nfunction handleIgnoreCase(code, result) {\n  var char = String.fromCharCode(code);\n  var upperChar = char.toUpperCase();\n  /* istanbul ignore else */\n\n  if (upperChar !== char) {\n    var optimizedCharIdx = (0, lexer_1.charCodeToOptimizedIndex)(upperChar.charCodeAt(0));\n    result[optimizedCharIdx] = optimizedCharIdx;\n  } else {\n    var lowerChar = char.toLowerCase();\n\n    if (lowerChar !== char) {\n      var optimizedCharIdx = (0, lexer_1.charCodeToOptimizedIndex)(lowerChar.charCodeAt(0));\n      result[optimizedCharIdx] = optimizedCharIdx;\n    }\n  }\n}\n\nfunction findCode(setNode, targetCharCodes) {\n  return (0, find_1.default)(setNode.value, function (codeOrRange) {\n    if (typeof codeOrRange === \"number\") {\n      return (0, includes_1.default)(targetCharCodes, codeOrRange);\n    } else {\n      // range\n      var range_1 = codeOrRange;\n      return (0, find_1.default)(targetCharCodes, function (targetCode) {\n        return range_1.from <= targetCode && targetCode <= range_1.to;\n      }) !== undefined;\n    }\n  });\n}\n\nfunction isWholeOptional(ast) {\n  var quantifier = ast.quantifier;\n\n  if (quantifier && quantifier.atLeast === 0) {\n    return true;\n  }\n\n  if (!ast.value) {\n    return false;\n  }\n\n  return (0, isArray_1.default)(ast.value) ? (0, every_1.default)(ast.value, isWholeOptional) : isWholeOptional(ast.value);\n}\n\nvar CharCodeFinder =\n/** @class */\nfunction (_super) {\n  __extends(CharCodeFinder, _super);\n\n  function CharCodeFinder(targetCharCodes) {\n    var _this = _super.call(this) || this;\n\n    _this.targetCharCodes = targetCharCodes;\n    _this.found = false;\n    return _this;\n  }\n\n  CharCodeFinder.prototype.visitChildren = function (node) {\n    // No need to keep looking...\n    if (this.found === true) {\n      return;\n    } // switch lookaheads as they do not actually consume any characters thus\n    // finding a charCode at lookahead context does not mean that regexp can actually contain it in a match.\n\n\n    switch (node.type) {\n      case \"Lookahead\":\n        this.visitLookahead(node);\n        return;\n\n      case \"NegativeLookahead\":\n        this.visitNegativeLookahead(node);\n        return;\n    }\n\n    _super.prototype.visitChildren.call(this, node);\n  };\n\n  CharCodeFinder.prototype.visitCharacter = function (node) {\n    if ((0, includes_1.default)(this.targetCharCodes, node.value)) {\n      this.found = true;\n    }\n  };\n\n  CharCodeFinder.prototype.visitSet = function (node) {\n    if (node.complement) {\n      if (findCode(node, this.targetCharCodes) === undefined) {\n        this.found = true;\n      }\n    } else {\n      if (findCode(node, this.targetCharCodes) !== undefined) {\n        this.found = true;\n      }\n    }\n  };\n\n  return CharCodeFinder;\n}(regexp_to_ast_1.BaseRegExpVisitor);\n\nfunction canMatchCharCode(charCodes, pattern) {\n  if (pattern instanceof RegExp) {\n    var ast = (0, reg_exp_parser_1.getRegExpAst)(pattern);\n    var charCodeFinder = new CharCodeFinder(charCodes);\n    charCodeFinder.visit(ast);\n    return charCodeFinder.found;\n  } else {\n    return (0, find_1.default)(pattern, function (char) {\n      return (0, includes_1.default)(charCodes, char.charCodeAt(0));\n    }) !== undefined;\n  }\n}\n\nexports.canMatchCharCode = canMatchCharCode;","map":{"version":3,"sources":["../../../src/scan/reg_exp.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAA,eAAA,GAAA,OAAA,CAAA,eAAA,CAAA;;AAWA,IAAA,SAAA,GAAA,eAAA,CAAA,OAAA,CAAA,gBAAA,CAAA,CAAA;;AACA,IAAA,OAAA,GAAA,eAAA,CAAA,OAAA,CAAA,cAAA,CAAA,CAAA;;AACA,IAAA,SAAA,GAAA,eAAA,CAAA,OAAA,CAAA,gBAAA,CAAA,CAAA;;AACA,IAAA,MAAA,GAAA,eAAA,CAAA,OAAA,CAAA,aAAA,CAAA,CAAA;;AACA,IAAA,QAAA,GAAA,eAAA,CAAA,OAAA,CAAA,eAAA,CAAA,CAAA;;AACA,IAAA,UAAA,GAAA,eAAA,CAAA,OAAA,CAAA,iBAAA,CAAA,CAAA;;AACA,IAAA,OAAA,GAAA,OAAA,CAAA,mBAAA,CAAA;;AACA,IAAA,gBAAA,GAAA,OAAA,CAAA,kBAAA,CAAA;;AACA,IAAA,OAAA,GAAA,OAAA,CAAA,SAAA,CAAA;;AAEA,IAAM,sBAAsB,GAC1B,+DADF;AAEa,OAAA,CAAA,2BAAA,GACX,mDADW;;AAGb,SAAgB,6BAAhB,CACE,MADF,EAEE,mBAFF,EAE6B;EAA3B,IAAA,mBAAA,KAAA,KAAA,CAAA,EAAA;IAAA,mBAAA,GAAA,KAAA;EAA2B;;EAE3B,IAAI;IACF,IAAM,GAAG,GAAG,CAAA,GAAA,gBAAA,CAAA,YAAA,EAAa,MAAb,CAAZ;IACA,IAAM,UAAU,GAAG,yBAAyB,CAC1C,GAAG,CAAC,KADsC,EAE1C,EAF0C,EAG1C,GAAG,CAAC,KAAJ,CAAU,UAHgC,CAA5C;IAKA,OAAO,UAAP;EACD,CARD,CAQE,OAAO,CAAP,EAAU;IACV;IACA;IACA;IACA,IAAI,CAAC,CAAC,OAAF,KAAc,sBAAlB,EAA0C;MACxC,IAAI,mBAAJ,EAAyB;QACvB,CAAA,GAAA,OAAA,CAAA,aAAA,EACE,GAAA,MAAA,CAAG,OAAA,CAAA,2BAAH,IACE,2BAAA,MAAA,CAA2B,MAAM,CAAC,QAAP,EAA3B,EAA4C,MAA5C,CADF,GAEE,wDAFF,GAGE,6DAHF,GAIE,6FALJ;MAOD;IACF,CAVD,MAUO;MACL,IAAI,SAAS,GAAG,EAAhB;;MACA,IAAI,mBAAJ,EAAyB;QACvB,SAAS,GACP,kEACA,iGAFF;MAGD;;MACD,CAAA,GAAA,OAAA,CAAA,WAAA,EACE,GAAA,MAAA,CAAG,OAAA,CAAA,2BAAH,EAA8B,IAA9B,IACE,uBAAA,MAAA,CAAuB,MAAM,CAAC,QAAP,EAAvB,EAAwC,MAAxC,CADF,GAEE,8CAAA,MAAA,CAA8C,eAAA,CAAA,OAA9C,EAAqD,IAArD,CAFF,GAGE,yEAHF,GAIE,SALJ;IAOD;EACF;;EAED,OAAO,EAAP;AACD;;AA5CD,OAAA,CAAA,6BAAA,GAAA,6BAAA;;AA8CA,SAAgB,yBAAhB,CACE,GADF,EAEE,MAFF,EAGE,UAHF,EAGqB;EAEnB,QAAQ,GAAG,CAAC,IAAZ;IACE,KAAK,aAAL;MACE,KAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,GAAG,CAAC,KAAJ,CAAU,MAA9B,EAAsC,CAAC,EAAvC,EAA2C;QACzC,yBAAyB,CAAC,GAAG,CAAC,KAAJ,CAAU,CAAV,CAAD,EAAe,MAAf,EAAuB,UAAvB,CAAzB;MACD;;MACD;;IACF,KAAK,aAAL;MACE,IAAM,KAAK,GAAG,GAAG,CAAC,KAAlB;;MACA,KAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,KAAK,CAAC,MAA1B,EAAkC,CAAC,EAAnC,EAAuC;QACrC,IAAM,IAAI,GAAG,KAAK,CAAC,CAAD,CAAlB,CADqC,CAGrC;;QACA,QAAQ,IAAI,CAAC,IAAb;UACE,KAAK,WAAL,CADF,CAEE;UACA;UACA;;UACA,KAAK,oBAAL,CALF,CAME;;UACA,KAAK,WAAL;UACA,KAAK,mBAAL;UACA,KAAK,aAAL;UACA,KAAK,cAAL;UACA,KAAK,iBAAL;YACE;QAZJ;;QAeA,IAAM,IAAI,GAAG,IAAb;;QACA,QAAQ,IAAI,CAAC,IAAb;UACE,KAAK,WAAL;YACE,uBAAuB,CAAC,IAAI,CAAC,KAAN,EAAa,MAAb,EAAqB,UAArB,CAAvB;YACA;;UACF,KAAK,KAAL;YACE,IAAI,IAAI,CAAC,UAAL,KAAoB,IAAxB,EAA8B;cAC5B,MAAM,KAAK,CAAC,sBAAD,CAAX;YACD;;YACD,CAAA,GAAA,SAAA,CAAA,OAAA,EAAQ,IAAI,CAAC,KAAb,EAAoB,UAAC,IAAD,EAAK;cACvB,IAAI,OAAO,IAAP,KAAgB,QAApB,EAA8B;gBAC5B,uBAAuB,CAAC,IAAD,EAAO,MAAP,EAAe,UAAf,CAAvB;cACD,CAFD,MAEO;gBACL;gBACA,IAAM,KAAK,GAAG,IAAd,CAFK,CAGL;;gBACA,IAAI,UAAU,KAAK,IAAnB,EAAyB;kBACvB,KACE,IAAI,SAAS,GAAG,KAAK,CAAC,IADxB,EAEE,SAAS,IAAI,KAAK,CAAC,EAFrB,EAGE,SAAS,EAHX,EAIE;oBACA,uBAAuB,CAAC,SAAD,EAAY,MAAZ,EAAoB,UAApB,CAAvB;kBACD;gBACF,CARD,CASA;gBATA,KAUK;kBACH;kBACA,KACE,IAAI,SAAS,GAAG,KAAK,CAAC,IADxB,EAEE,SAAS,IAAI,KAAK,CAAC,EAAnB,IAAyB,SAAS,GAAG,OAAA,CAAA,kBAFvC,EAGE,SAAS,EAHX,EAIE;oBACA,uBAAuB,CAAC,SAAD,EAAY,MAAZ,EAAoB,UAApB,CAAvB;kBACD,CARE,CAUH;;;kBACA,IAAI,KAAK,CAAC,EAAN,IAAY,OAAA,CAAA,kBAAhB,EAAoC;oBAClC,IAAM,WAAW,GACf,KAAK,CAAC,IAAN,IAAc,OAAA,CAAA,kBAAd,GACI,KAAK,CAAC,IADV,GAEI,OAAA,CAAA,kBAHN;oBAIA,IAAM,WAAW,GAAG,KAAK,CAAC,EAA1B;oBACA,IAAM,SAAS,GAAG,CAAA,GAAA,OAAA,CAAA,wBAAA,EAAyB,WAAzB,CAAlB;oBACA,IAAM,SAAS,GAAG,CAAA,GAAA,OAAA,CAAA,wBAAA,EAAyB,WAAzB,CAAlB;;oBAEA,KACE,IAAI,UAAU,GAAG,SADnB,EAEE,UAAU,IAAI,SAFhB,EAGE,UAAU,EAHZ,EAIE;sBACA,MAAM,CAAC,UAAD,CAAN,GAAqB,UAArB;oBACD;kBACF;gBACF;cACF;YACF,CA/CD;YAgDA;;UACF,KAAK,OAAL;YACE,yBAAyB,CAAC,IAAI,CAAC,KAAN,EAAa,MAAb,EAAqB,UAArB,CAAzB;YACA;;UACF;;UACA;YACE,MAAM,KAAK,CAAC,sBAAD,CAAX;QA9DJ,CApBqC,CAqFrC;;;QACA,IAAM,oBAAoB,GACxB,IAAI,CAAC,UAAL,KAAoB,SAApB,IAAiC,IAAI,CAAC,UAAL,CAAgB,OAAhB,KAA4B,CAD/D;;QAEA,KACE;QACA;QACC,IAAI,CAAC,IAAL,KAAc,OAAd,IAAyB,eAAe,CAAC,IAAD,CAAf,KAA0B,KAApD,IACA;QACC,IAAI,CAAC,IAAL,KAAc,OAAd,IAAyB,oBAAoB,KAAK,KALrD,EAME;UACA;QACD;MACF;;MACD;;IACF;;IACA;MACE,MAAM,KAAK,CAAC,uBAAD,CAAX;EA7GJ,CAFmB,CAkHnB;;;EACA,OAAO,CAAA,GAAA,QAAA,CAAA,OAAA,EAAO,MAAP,CAAP;AACD;;AAvHD,OAAA,CAAA,yBAAA,GAAA,yBAAA;;AAyHA,SAAS,uBAAT,CACE,IADF,EAEE,MAFF,EAGE,UAHF,EAGqB;EAEnB,IAAM,gBAAgB,GAAG,CAAA,GAAA,OAAA,CAAA,wBAAA,EAAyB,IAAzB,CAAzB;EACA,MAAM,CAAC,gBAAD,CAAN,GAA2B,gBAA3B;;EAEA,IAAI,UAAU,KAAK,IAAnB,EAAyB;IACvB,gBAAgB,CAAC,IAAD,EAAO,MAAP,CAAhB;EACD;AACF;;AAED,SAAS,gBAAT,CACE,IADF,EAEE,MAFF,EAEwC;EAEtC,IAAM,IAAI,GAAG,MAAM,CAAC,YAAP,CAAoB,IAApB,CAAb;EACA,IAAM,SAAS,GAAG,IAAI,CAAC,WAAL,EAAlB;EACA;;EACA,IAAI,SAAS,KAAK,IAAlB,EAAwB;IACtB,IAAM,gBAAgB,GAAG,CAAA,GAAA,OAAA,CAAA,wBAAA,EAAyB,SAAS,CAAC,UAAV,CAAqB,CAArB,CAAzB,CAAzB;IACA,MAAM,CAAC,gBAAD,CAAN,GAA2B,gBAA3B;EACD,CAHD,MAGO;IACL,IAAM,SAAS,GAAG,IAAI,CAAC,WAAL,EAAlB;;IACA,IAAI,SAAS,KAAK,IAAlB,EAAwB;MACtB,IAAM,gBAAgB,GAAG,CAAA,GAAA,OAAA,CAAA,wBAAA,EAAyB,SAAS,CAAC,UAAV,CAAqB,CAArB,CAAzB,CAAzB;MACA,MAAM,CAAC,gBAAD,CAAN,GAA2B,gBAA3B;IACD;EACF;AACF;;AAED,SAAS,QAAT,CAAkB,OAAlB,EAAgC,eAAhC,EAAyD;EACvD,OAAO,CAAA,GAAA,MAAA,CAAA,OAAA,EAAK,OAAO,CAAC,KAAb,EAAoB,UAAC,WAAD,EAAY;IACrC,IAAI,OAAO,WAAP,KAAuB,QAA3B,EAAqC;MACnC,OAAO,CAAA,GAAA,UAAA,CAAA,OAAA,EAAS,eAAT,EAA0B,WAA1B,CAAP;IACD,CAFD,MAEO;MACL;MACA,IAAM,OAAK,GAAQ,WAAnB;MACA,OACE,CAAA,GAAA,MAAA,CAAA,OAAA,EACE,eADF,EAEE,UAAC,UAAD,EAAW;QAAK,OAAA,OAAK,CAAC,IAAN,IAAc,UAAd,IAA4B,UAAU,IAAI,OAAK,CAA/C,EAAA;MAAkD,CAFpE,MAGM,SAJR;IAMD;EACF,CAbM,CAAP;AAcD;;AAED,SAAS,eAAT,CAAyB,GAAzB,EAAiC;EAC/B,IAAM,UAAU,GAAI,GAAY,CAAC,UAAjC;;EACA,IAAI,UAAU,IAAI,UAAU,CAAC,OAAX,KAAuB,CAAzC,EAA4C;IAC1C,OAAO,IAAP;EACD;;EAED,IAAI,CAAC,GAAG,CAAC,KAAT,EAAgB;IACd,OAAO,KAAP;EACD;;EAED,OAAO,CAAA,GAAA,SAAA,CAAA,OAAA,EAAQ,GAAG,CAAC,KAAZ,IACH,CAAA,GAAA,OAAA,CAAA,OAAA,EAAM,GAAG,CAAC,KAAV,EAAiB,eAAjB,CADG,GAEH,eAAe,CAAC,GAAG,CAAC,KAAL,CAFnB;AAGD;;AAED,IAAA,cAAA;AAAA;AAAA,UAAA,MAAA,EAAA;EAA6B,SAAA,CAAA,cAAA,EAAA,MAAA,CAAA;;EAG3B,SAAA,cAAA,CAAoB,eAApB,EAA6C;IAA7C,IAAA,KAAA,GACE,MAAA,CAAA,IAAA,CAAA,IAAA,KAAO,IADT;;IAAoB,KAAA,CAAA,eAAA,GAAA,eAAA;IAFpB,KAAA,CAAA,KAAA,GAAiB,KAAjB;;EAIC;;EAED,cAAA,CAAA,SAAA,CAAA,aAAA,GAAA,UAAc,IAAd,EAA2B;IACzB;IACA,IAAI,KAAK,KAAL,KAAe,IAAnB,EAAyB;MACvB;IACD,CAJwB,CAMzB;IACA;;;IACA,QAAQ,IAAI,CAAC,IAAb;MACE,KAAK,WAAL;QACE,KAAK,cAAL,CAAoB,IAApB;QACA;;MACF,KAAK,mBAAL;QACE,KAAK,sBAAL,CAA4B,IAA5B;QACA;IANJ;;IASA,MAAA,CAAA,SAAA,CAAM,aAAN,CAAmB,IAAnB,CAAmB,IAAnB,EAAoB,IAApB;EACD,CAlBD;;EAoBA,cAAA,CAAA,SAAA,CAAA,cAAA,GAAA,UAAe,IAAf,EAA8B;IAC5B,IAAI,CAAA,GAAA,UAAA,CAAA,OAAA,EAAS,KAAK,eAAd,EAA+B,IAAI,CAAC,KAApC,CAAJ,EAAgD;MAC9C,KAAK,KAAL,GAAa,IAAb;IACD;EACF,CAJD;;EAMA,cAAA,CAAA,SAAA,CAAA,QAAA,GAAA,UAAS,IAAT,EAAkB;IAChB,IAAI,IAAI,CAAC,UAAT,EAAqB;MACnB,IAAI,QAAQ,CAAC,IAAD,EAAO,KAAK,eAAZ,CAAR,KAAyC,SAA7C,EAAwD;QACtD,KAAK,KAAL,GAAa,IAAb;MACD;IACF,CAJD,MAIO;MACL,IAAI,QAAQ,CAAC,IAAD,EAAO,KAAK,eAAZ,CAAR,KAAyC,SAA7C,EAAwD;QACtD,KAAK,KAAL,GAAa,IAAb;MACD;IACF;EACF,CAVD;;EAWF,OAAA,cAAA;AAAC,CA5CD,CAA6B,eAAA,CAAA,iBAA7B,CAAA;;AA8CA,SAAgB,gBAAhB,CACE,SADF,EAEE,OAFF,EAE0B;EAExB,IAAI,OAAO,YAAY,MAAvB,EAA+B;IAC7B,IAAM,GAAG,GAAG,CAAA,GAAA,gBAAA,CAAA,YAAA,EAAa,OAAb,CAAZ;IACA,IAAM,cAAc,GAAG,IAAI,cAAJ,CAAmB,SAAnB,CAAvB;IACA,cAAc,CAAC,KAAf,CAAqB,GAArB;IACA,OAAO,cAAc,CAAC,KAAtB;EACD,CALD,MAKO;IACL,OACE,CAAA,GAAA,MAAA,CAAA,OAAA,EAAU,OAAV,EAAmB,UAAC,IAAD,EAAK;MACtB,OAAO,CAAA,GAAA,UAAA,CAAA,OAAA,EAAS,SAAT,EAA6B,IAAK,CAAC,UAAN,CAAiB,CAAjB,CAA7B,CAAP;IACD,CAFD,MAEO,SAHT;EAKD;AACF;;AAhBD,OAAA,CAAA,gBAAA,GAAA,gBAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.canMatchCharCode = exports.firstCharOptimizedIndices = exports.getOptimizedStartCodesIndices = exports.failedOptimizationPrefixMsg = void 0;\nvar regexp_to_ast_1 = require(\"regexp-to-ast\");\nvar isArray_1 = __importDefault(require(\"lodash/isArray\"));\nvar every_1 = __importDefault(require(\"lodash/every\"));\nvar forEach_1 = __importDefault(require(\"lodash/forEach\"));\nvar find_1 = __importDefault(require(\"lodash/find\"));\nvar values_1 = __importDefault(require(\"lodash/values\"));\nvar includes_1 = __importDefault(require(\"lodash/includes\"));\nvar utils_1 = require(\"@chevrotain/utils\");\nvar reg_exp_parser_1 = require(\"./reg_exp_parser\");\nvar lexer_1 = require(\"./lexer\");\nvar complementErrorMessage = \"Complement Sets are not supported for first char optimization\";\nexports.failedOptimizationPrefixMsg = 'Unable to use \"first char\" lexer optimizations:\\n';\nfunction getOptimizedStartCodesIndices(regExp, ensureOptimizations) {\n    if (ensureOptimizations === void 0) { ensureOptimizations = false; }\n    try {\n        var ast = (0, reg_exp_parser_1.getRegExpAst)(regExp);\n        var firstChars = firstCharOptimizedIndices(ast.value, {}, ast.flags.ignoreCase);\n        return firstChars;\n    }\n    catch (e) {\n        /* istanbul ignore next */\n        // Testing this relies on the regexp-to-ast library having a bug... */\n        // TODO: only the else branch needs to be ignored, try to fix with newer prettier / tsc\n        if (e.message === complementErrorMessage) {\n            if (ensureOptimizations) {\n                (0, utils_1.PRINT_WARNING)(\"\".concat(exports.failedOptimizationPrefixMsg) +\n                    \"\\tUnable to optimize: < \".concat(regExp.toString(), \" >\\n\") +\n                    \"\\tComplement Sets cannot be automatically optimized.\\n\" +\n                    \"\\tThis will disable the lexer's first char optimizations.\\n\" +\n                    \"\\tSee: https://chevrotain.io/docs/guide/resolving_lexer_errors.html#COMPLEMENT for details.\");\n            }\n        }\n        else {\n            var msgSuffix = \"\";\n            if (ensureOptimizations) {\n                msgSuffix =\n                    \"\\n\\tThis will disable the lexer's first char optimizations.\\n\" +\n                        \"\\tSee: https://chevrotain.io/docs/guide/resolving_lexer_errors.html#REGEXP_PARSING for details.\";\n            }\n            (0, utils_1.PRINT_ERROR)(\"\".concat(exports.failedOptimizationPrefixMsg, \"\\n\") +\n                \"\\tFailed parsing: < \".concat(regExp.toString(), \" >\\n\") +\n                \"\\tUsing the regexp-to-ast library version: \".concat(regexp_to_ast_1.VERSION, \"\\n\") +\n                \"\\tPlease open an issue at: https://github.com/bd82/regexp-to-ast/issues\" +\n                msgSuffix);\n        }\n    }\n    return [];\n}\nexports.getOptimizedStartCodesIndices = getOptimizedStartCodesIndices;\nfunction firstCharOptimizedIndices(ast, result, ignoreCase) {\n    switch (ast.type) {\n        case \"Disjunction\":\n            for (var i = 0; i < ast.value.length; i++) {\n                firstCharOptimizedIndices(ast.value[i], result, ignoreCase);\n            }\n            break;\n        case \"Alternative\":\n            var terms = ast.value;\n            for (var i = 0; i < terms.length; i++) {\n                var term = terms[i];\n                // skip terms that cannot effect the first char results\n                switch (term.type) {\n                    case \"EndAnchor\":\n                    // A group back reference cannot affect potential starting char.\n                    // because if a back reference is the first production than automatically\n                    // the group being referenced has had to come BEFORE so its codes have already been added\n                    case \"GroupBackReference\":\n                    // assertions do not affect potential starting codes\n                    case \"Lookahead\":\n                    case \"NegativeLookahead\":\n                    case \"StartAnchor\":\n                    case \"WordBoundary\":\n                    case \"NonWordBoundary\":\n                        continue;\n                }\n                var atom = term;\n                switch (atom.type) {\n                    case \"Character\":\n                        addOptimizedIdxToResult(atom.value, result, ignoreCase);\n                        break;\n                    case \"Set\":\n                        if (atom.complement === true) {\n                            throw Error(complementErrorMessage);\n                        }\n                        (0, forEach_1.default)(atom.value, function (code) {\n                            if (typeof code === \"number\") {\n                                addOptimizedIdxToResult(code, result, ignoreCase);\n                            }\n                            else {\n                                // range\n                                var range = code;\n                                // cannot optimize when ignoreCase is\n                                if (ignoreCase === true) {\n                                    for (var rangeCode = range.from; rangeCode <= range.to; rangeCode++) {\n                                        addOptimizedIdxToResult(rangeCode, result, ignoreCase);\n                                    }\n                                }\n                                // Optimization (2 orders of magnitude less work for very large ranges)\n                                else {\n                                    // handle unoptimized values\n                                    for (var rangeCode = range.from; rangeCode <= range.to && rangeCode < lexer_1.minOptimizationVal; rangeCode++) {\n                                        addOptimizedIdxToResult(rangeCode, result, ignoreCase);\n                                    }\n                                    // Less common charCode where we optimize for faster init time, by using larger \"buckets\"\n                                    if (range.to >= lexer_1.minOptimizationVal) {\n                                        var minUnOptVal = range.from >= lexer_1.minOptimizationVal\n                                            ? range.from\n                                            : lexer_1.minOptimizationVal;\n                                        var maxUnOptVal = range.to;\n                                        var minOptIdx = (0, lexer_1.charCodeToOptimizedIndex)(minUnOptVal);\n                                        var maxOptIdx = (0, lexer_1.charCodeToOptimizedIndex)(maxUnOptVal);\n                                        for (var currOptIdx = minOptIdx; currOptIdx <= maxOptIdx; currOptIdx++) {\n                                            result[currOptIdx] = currOptIdx;\n                                        }\n                                    }\n                                }\n                            }\n                        });\n                        break;\n                    case \"Group\":\n                        firstCharOptimizedIndices(atom.value, result, ignoreCase);\n                        break;\n                    /* istanbul ignore next */\n                    default:\n                        throw Error(\"Non Exhaustive Match\");\n                }\n                // reached a mandatory production, no more **start** codes can be found on this alternative\n                var isOptionalQuantifier = atom.quantifier !== undefined && atom.quantifier.atLeast === 0;\n                if (\n                // A group may be optional due to empty contents /(?:)/\n                // or if everything inside it is optional /((a)?)/\n                (atom.type === \"Group\" && isWholeOptional(atom) === false) ||\n                    // If this term is not a group it may only be optional if it has an optional quantifier\n                    (atom.type !== \"Group\" && isOptionalQuantifier === false)) {\n                    break;\n                }\n            }\n            break;\n        /* istanbul ignore next */\n        default:\n            throw Error(\"non exhaustive match!\");\n    }\n    // console.log(Object.keys(result).length)\n    return (0, values_1.default)(result);\n}\nexports.firstCharOptimizedIndices = firstCharOptimizedIndices;\nfunction addOptimizedIdxToResult(code, result, ignoreCase) {\n    var optimizedCharIdx = (0, lexer_1.charCodeToOptimizedIndex)(code);\n    result[optimizedCharIdx] = optimizedCharIdx;\n    if (ignoreCase === true) {\n        handleIgnoreCase(code, result);\n    }\n}\nfunction handleIgnoreCase(code, result) {\n    var char = String.fromCharCode(code);\n    var upperChar = char.toUpperCase();\n    /* istanbul ignore else */\n    if (upperChar !== char) {\n        var optimizedCharIdx = (0, lexer_1.charCodeToOptimizedIndex)(upperChar.charCodeAt(0));\n        result[optimizedCharIdx] = optimizedCharIdx;\n    }\n    else {\n        var lowerChar = char.toLowerCase();\n        if (lowerChar !== char) {\n            var optimizedCharIdx = (0, lexer_1.charCodeToOptimizedIndex)(lowerChar.charCodeAt(0));\n            result[optimizedCharIdx] = optimizedCharIdx;\n        }\n    }\n}\nfunction findCode(setNode, targetCharCodes) {\n    return (0, find_1.default)(setNode.value, function (codeOrRange) {\n        if (typeof codeOrRange === \"number\") {\n            return (0, includes_1.default)(targetCharCodes, codeOrRange);\n        }\n        else {\n            // range\n            var range_1 = codeOrRange;\n            return ((0, find_1.default)(targetCharCodes, function (targetCode) { return range_1.from <= targetCode && targetCode <= range_1.to; }) !== undefined);\n        }\n    });\n}\nfunction isWholeOptional(ast) {\n    var quantifier = ast.quantifier;\n    if (quantifier && quantifier.atLeast === 0) {\n        return true;\n    }\n    if (!ast.value) {\n        return false;\n    }\n    return (0, isArray_1.default)(ast.value)\n        ? (0, every_1.default)(ast.value, isWholeOptional)\n        : isWholeOptional(ast.value);\n}\nvar CharCodeFinder = /** @class */ (function (_super) {\n    __extends(CharCodeFinder, _super);\n    function CharCodeFinder(targetCharCodes) {\n        var _this = _super.call(this) || this;\n        _this.targetCharCodes = targetCharCodes;\n        _this.found = false;\n        return _this;\n    }\n    CharCodeFinder.prototype.visitChildren = function (node) {\n        // No need to keep looking...\n        if (this.found === true) {\n            return;\n        }\n        // switch lookaheads as they do not actually consume any characters thus\n        // finding a charCode at lookahead context does not mean that regexp can actually contain it in a match.\n        switch (node.type) {\n            case \"Lookahead\":\n                this.visitLookahead(node);\n                return;\n            case \"NegativeLookahead\":\n                this.visitNegativeLookahead(node);\n                return;\n        }\n        _super.prototype.visitChildren.call(this, node);\n    };\n    CharCodeFinder.prototype.visitCharacter = function (node) {\n        if ((0, includes_1.default)(this.targetCharCodes, node.value)) {\n            this.found = true;\n        }\n    };\n    CharCodeFinder.prototype.visitSet = function (node) {\n        if (node.complement) {\n            if (findCode(node, this.targetCharCodes) === undefined) {\n                this.found = true;\n            }\n        }\n        else {\n            if (findCode(node, this.targetCharCodes) !== undefined) {\n                this.found = true;\n            }\n        }\n    };\n    return CharCodeFinder;\n}(regexp_to_ast_1.BaseRegExpVisitor));\nfunction canMatchCharCode(charCodes, pattern) {\n    if (pattern instanceof RegExp) {\n        var ast = (0, reg_exp_parser_1.getRegExpAst)(pattern);\n        var charCodeFinder = new CharCodeFinder(charCodes);\n        charCodeFinder.visit(ast);\n        return charCodeFinder.found;\n    }\n    else {\n        return ((0, find_1.default)(pattern, function (char) {\n            return (0, includes_1.default)(charCodes, char.charCodeAt(0));\n        }) !== undefined);\n    }\n}\nexports.canMatchCharCode = canMatchCharCode;\n//# sourceMappingURL=reg_exp.js.map"]},"metadata":{},"sourceType":"script"}