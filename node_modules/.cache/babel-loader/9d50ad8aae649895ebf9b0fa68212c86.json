{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.RecognizerEngine = void 0;\n\nvar isEmpty_1 = __importDefault(require(\"lodash/isEmpty\"));\n\nvar isArray_1 = __importDefault(require(\"lodash/isArray\"));\n\nvar flatten_1 = __importDefault(require(\"lodash/flatten\"));\n\nvar every_1 = __importDefault(require(\"lodash/every\"));\n\nvar uniq_1 = __importDefault(require(\"lodash/uniq\"));\n\nvar isObject_1 = __importDefault(require(\"lodash/isObject\"));\n\nvar has_1 = __importDefault(require(\"lodash/has\"));\n\nvar values_1 = __importDefault(require(\"lodash/values\"));\n\nvar reduce_1 = __importDefault(require(\"lodash/reduce\"));\n\nvar clone_1 = __importDefault(require(\"lodash/clone\"));\n\nvar keys_1 = require(\"../../grammar/keys\");\n\nvar exceptions_public_1 = require(\"../../exceptions_public\");\n\nvar lookahead_1 = require(\"../../grammar/lookahead\");\n\nvar interpreter_1 = require(\"../../grammar/interpreter\");\n\nvar parser_1 = require(\"../parser\");\n\nvar recoverable_1 = require(\"./recoverable\");\n\nvar tokens_public_1 = require(\"../../../scan/tokens_public\");\n\nvar tokens_1 = require(\"../../../scan/tokens\");\n/**\n * This trait is responsible for the runtime parsing engine\n * Used by the official API (recognizer_api.ts)\n */\n\n\nvar RecognizerEngine =\n/** @class */\nfunction () {\n  function RecognizerEngine() {}\n\n  RecognizerEngine.prototype.initRecognizerEngine = function (tokenVocabulary, config) {\n    this.className = this.constructor.name; // TODO: would using an ES6 Map or plain object be faster (CST building scenario)\n\n    this.shortRuleNameToFull = {};\n    this.fullRuleNameToShort = {};\n    this.ruleShortNameIdx = 256;\n    this.tokenMatcher = tokens_1.tokenStructuredMatcherNoCategories;\n    this.subruleIdx = 0;\n    this.definedRulesNames = [];\n    this.tokensMap = {};\n    this.isBackTrackingStack = [];\n    this.RULE_STACK = [];\n    this.RULE_OCCURRENCE_STACK = [];\n    this.gastProductionsCache = {};\n\n    if ((0, has_1.default)(config, \"serializedGrammar\")) {\n      throw Error(\"The Parser's configuration can no longer contain a <serializedGrammar> property.\\n\" + \"\\tSee: https://chevrotain.io/docs/changes/BREAKING_CHANGES.html#_6-0-0\\n\" + \"\\tFor Further details.\");\n    }\n\n    if ((0, isArray_1.default)(tokenVocabulary)) {\n      // This only checks for Token vocabularies provided as arrays.\n      // That is good enough because the main objective is to detect users of pre-V4.0 APIs\n      // rather than all edge cases of empty Token vocabularies.\n      if ((0, isEmpty_1.default)(tokenVocabulary)) {\n        throw Error(\"A Token Vocabulary cannot be empty.\\n\" + \"\\tNote that the first argument for the parser constructor\\n\" + \"\\tis no longer a Token vector (since v4.0).\");\n      }\n\n      if (typeof tokenVocabulary[0].startOffset === \"number\") {\n        throw Error(\"The Parser constructor no longer accepts a token vector as the first argument.\\n\" + \"\\tSee: https://chevrotain.io/docs/changes/BREAKING_CHANGES.html#_4-0-0\\n\" + \"\\tFor Further details.\");\n      }\n    }\n\n    if ((0, isArray_1.default)(tokenVocabulary)) {\n      this.tokensMap = (0, reduce_1.default)(tokenVocabulary, function (acc, tokType) {\n        acc[tokType.name] = tokType;\n        return acc;\n      }, {});\n    } else if ((0, has_1.default)(tokenVocabulary, \"modes\") && (0, every_1.default)((0, flatten_1.default)((0, values_1.default)(tokenVocabulary.modes)), tokens_1.isTokenType)) {\n      var allTokenTypes_1 = (0, flatten_1.default)((0, values_1.default)(tokenVocabulary.modes));\n      var uniqueTokens = (0, uniq_1.default)(allTokenTypes_1);\n      this.tokensMap = (0, reduce_1.default)(uniqueTokens, function (acc, tokType) {\n        acc[tokType.name] = tokType;\n        return acc;\n      }, {});\n    } else if ((0, isObject_1.default)(tokenVocabulary)) {\n      this.tokensMap = (0, clone_1.default)(tokenVocabulary);\n    } else {\n      throw new Error(\"<tokensDictionary> argument must be An Array of Token constructors,\" + \" A dictionary of Token constructors or an IMultiModeLexerDefinition\");\n    } // always add EOF to the tokenNames -> constructors map. it is useful to assure all the input has been\n    // parsed with a clear error message (\"expecting EOF but found ...\")\n\n\n    this.tokensMap[\"EOF\"] = tokens_public_1.EOF;\n    var allTokenTypes = (0, has_1.default)(tokenVocabulary, \"modes\") ? (0, flatten_1.default)((0, values_1.default)(tokenVocabulary.modes)) : (0, values_1.default)(tokenVocabulary);\n    var noTokenCategoriesUsed = (0, every_1.default)(allTokenTypes, function (tokenConstructor) {\n      return (0, isEmpty_1.default)(tokenConstructor.categoryMatches);\n    });\n    this.tokenMatcher = noTokenCategoriesUsed ? tokens_1.tokenStructuredMatcherNoCategories : tokens_1.tokenStructuredMatcher; // Because ES2015+ syntax should be supported for creating Token classes\n    // We cannot assume that the Token classes were created using the \"extendToken\" utilities\n    // Therefore we must augment the Token classes both on Lexer initialization and on Parser initialization\n\n    (0, tokens_1.augmentTokenTypes)((0, values_1.default)(this.tokensMap));\n  };\n\n  RecognizerEngine.prototype.defineRule = function (ruleName, impl, config) {\n    if (this.selfAnalysisDone) {\n      throw Error(\"Grammar rule <\".concat(ruleName, \"> may not be defined after the 'performSelfAnalysis' method has been called'\\n\") + \"Make sure that all grammar rule definitions are done before 'performSelfAnalysis' is called.\");\n    }\n\n    var resyncEnabled = (0, has_1.default)(config, \"resyncEnabled\") ? config.resyncEnabled // assumes end user provides the correct config value/type\n    : parser_1.DEFAULT_RULE_CONFIG.resyncEnabled;\n    var recoveryValueFunc = (0, has_1.default)(config, \"recoveryValueFunc\") ? config.recoveryValueFunc // assumes end user provides the correct config value/type\n    : parser_1.DEFAULT_RULE_CONFIG.recoveryValueFunc; // performance optimization: Use small integers as keys for the longer human readable \"full\" rule names.\n    // this greatly improves Map access time (as much as 8% for some performance benchmarks).\n\n    var shortName = this.ruleShortNameIdx << keys_1.BITS_FOR_METHOD_TYPE + keys_1.BITS_FOR_OCCURRENCE_IDX;\n    this.ruleShortNameIdx++;\n    this.shortRuleNameToFull[shortName] = ruleName;\n    this.fullRuleNameToShort[ruleName] = shortName;\n    var invokeRuleWithTry; // Micro optimization, only check the condition **once** on rule definition\n    // instead of **every single** rule invocation.\n\n    if (this.outputCst === true) {\n      invokeRuleWithTry = function invokeRuleWithTry() {\n        var args = [];\n\n        for (var _i = 0; _i < arguments.length; _i++) {\n          args[_i] = arguments[_i];\n        }\n\n        try {\n          this.ruleInvocationStateUpdate(shortName, ruleName, this.subruleIdx);\n          impl.apply(this, args);\n          var cst = this.CST_STACK[this.CST_STACK.length - 1];\n          this.cstPostRule(cst);\n          return cst;\n        } catch (e) {\n          return this.invokeRuleCatch(e, resyncEnabled, recoveryValueFunc);\n        } finally {\n          this.ruleFinallyStateUpdate();\n        }\n      };\n    } else {\n      invokeRuleWithTry = function invokeRuleWithTryCst() {\n        var args = [];\n\n        for (var _i = 0; _i < arguments.length; _i++) {\n          args[_i] = arguments[_i];\n        }\n\n        try {\n          this.ruleInvocationStateUpdate(shortName, ruleName, this.subruleIdx);\n          return impl.apply(this, args);\n        } catch (e) {\n          return this.invokeRuleCatch(e, resyncEnabled, recoveryValueFunc);\n        } finally {\n          this.ruleFinallyStateUpdate();\n        }\n      };\n    }\n\n    var wrappedGrammarRule = Object.assign(invokeRuleWithTry, {\n      ruleName: ruleName,\n      originalGrammarAction: impl\n    });\n    return wrappedGrammarRule;\n  };\n\n  RecognizerEngine.prototype.invokeRuleCatch = function (e, resyncEnabledConfig, recoveryValueFunc) {\n    var isFirstInvokedRule = this.RULE_STACK.length === 1; // note the reSync is always enabled for the first rule invocation, because we must always be able to\n    // reSync with EOF and just output some INVALID ParseTree\n    // during backtracking reSync recovery is disabled, otherwise we can't be certain the backtracking\n    // path is really the most valid one\n\n    var reSyncEnabled = resyncEnabledConfig && !this.isBackTracking() && this.recoveryEnabled;\n\n    if ((0, exceptions_public_1.isRecognitionException)(e)) {\n      var recogError = e;\n\n      if (reSyncEnabled) {\n        var reSyncTokType = this.findReSyncTokenType();\n\n        if (this.isInCurrentRuleReSyncSet(reSyncTokType)) {\n          recogError.resyncedTokens = this.reSyncTo(reSyncTokType);\n\n          if (this.outputCst) {\n            var partialCstResult = this.CST_STACK[this.CST_STACK.length - 1];\n            partialCstResult.recoveredNode = true;\n            return partialCstResult;\n          } else {\n            return recoveryValueFunc();\n          }\n        } else {\n          if (this.outputCst) {\n            var partialCstResult = this.CST_STACK[this.CST_STACK.length - 1];\n            partialCstResult.recoveredNode = true;\n            recogError.partialCstResult = partialCstResult;\n          } // to be handled Further up the call stack\n\n\n          throw recogError;\n        }\n      } else if (isFirstInvokedRule) {\n        // otherwise a Redundant input error will be created as well and we cannot guarantee that this is indeed the case\n        this.moveToTerminatedState(); // the parser should never throw one of its own errors outside its flow.\n        // even if error recovery is disabled\n\n        return recoveryValueFunc();\n      } else {\n        // to be recovered Further up the call stack\n        throw recogError;\n      }\n    } else {\n      // some other Error type which we don't know how to handle (for example a built in JavaScript Error)\n      throw e;\n    }\n  }; // Implementation of parsing DSL\n\n\n  RecognizerEngine.prototype.optionInternal = function (actionORMethodDef, occurrence) {\n    var key = this.getKeyForAutomaticLookahead(keys_1.OPTION_IDX, occurrence);\n    return this.optionInternalLogic(actionORMethodDef, occurrence, key);\n  };\n\n  RecognizerEngine.prototype.optionInternalLogic = function (actionORMethodDef, occurrence, key) {\n    var _this = this;\n\n    var lookAheadFunc = this.getLaFuncFromCache(key);\n    var action;\n\n    if (typeof actionORMethodDef !== \"function\") {\n      action = actionORMethodDef.DEF;\n      var predicate_1 = actionORMethodDef.GATE; // predicate present\n\n      if (predicate_1 !== undefined) {\n        var orgLookaheadFunction_1 = lookAheadFunc;\n\n        lookAheadFunc = function lookAheadFunc() {\n          return predicate_1.call(_this) && orgLookaheadFunction_1.call(_this);\n        };\n      }\n    } else {\n      action = actionORMethodDef;\n    }\n\n    if (lookAheadFunc.call(this) === true) {\n      return action.call(this);\n    }\n\n    return undefined;\n  };\n\n  RecognizerEngine.prototype.atLeastOneInternal = function (prodOccurrence, actionORMethodDef) {\n    var laKey = this.getKeyForAutomaticLookahead(keys_1.AT_LEAST_ONE_IDX, prodOccurrence);\n    return this.atLeastOneInternalLogic(prodOccurrence, actionORMethodDef, laKey);\n  };\n\n  RecognizerEngine.prototype.atLeastOneInternalLogic = function (prodOccurrence, actionORMethodDef, key) {\n    var _this = this;\n\n    var lookAheadFunc = this.getLaFuncFromCache(key);\n    var action;\n\n    if (typeof actionORMethodDef !== \"function\") {\n      action = actionORMethodDef.DEF;\n      var predicate_2 = actionORMethodDef.GATE; // predicate present\n\n      if (predicate_2 !== undefined) {\n        var orgLookaheadFunction_2 = lookAheadFunc;\n\n        lookAheadFunc = function lookAheadFunc() {\n          return predicate_2.call(_this) && orgLookaheadFunction_2.call(_this);\n        };\n      }\n    } else {\n      action = actionORMethodDef;\n    }\n\n    if (lookAheadFunc.call(this) === true) {\n      var notStuck = this.doSingleRepetition(action);\n\n      while (lookAheadFunc.call(this) === true && notStuck === true) {\n        notStuck = this.doSingleRepetition(action);\n      }\n    } else {\n      throw this.raiseEarlyExitException(prodOccurrence, lookahead_1.PROD_TYPE.REPETITION_MANDATORY, actionORMethodDef.ERR_MSG);\n    } // note that while it may seem that this can cause an error because by using a recursive call to\n    // AT_LEAST_ONE we change the grammar to AT_LEAST_TWO, AT_LEAST_THREE ... , the possible recursive call\n    // from the tryInRepetitionRecovery(...) will only happen IFF there really are TWO/THREE/.... items.\n    // Performance optimization: \"attemptInRepetitionRecovery\" will be defined as NOOP unless recovery is enabled\n\n\n    this.attemptInRepetitionRecovery(this.atLeastOneInternal, [prodOccurrence, actionORMethodDef], lookAheadFunc, keys_1.AT_LEAST_ONE_IDX, prodOccurrence, interpreter_1.NextTerminalAfterAtLeastOneWalker);\n  };\n\n  RecognizerEngine.prototype.atLeastOneSepFirstInternal = function (prodOccurrence, options) {\n    var laKey = this.getKeyForAutomaticLookahead(keys_1.AT_LEAST_ONE_SEP_IDX, prodOccurrence);\n    this.atLeastOneSepFirstInternalLogic(prodOccurrence, options, laKey);\n  };\n\n  RecognizerEngine.prototype.atLeastOneSepFirstInternalLogic = function (prodOccurrence, options, key) {\n    var _this = this;\n\n    var action = options.DEF;\n    var separator = options.SEP;\n    var firstIterationLookaheadFunc = this.getLaFuncFromCache(key); // 1st iteration\n\n    if (firstIterationLookaheadFunc.call(this) === true) {\n      ;\n      action.call(this); //  TODO: Optimization can move this function construction into \"attemptInRepetitionRecovery\"\n      //  because it is only needed in error recovery scenarios.\n\n      var separatorLookAheadFunc = function separatorLookAheadFunc() {\n        return _this.tokenMatcher(_this.LA(1), separator);\n      }; // 2nd..nth iterations\n\n\n      while (this.tokenMatcher(this.LA(1), separator) === true) {\n        // note that this CONSUME will never enter recovery because\n        // the separatorLookAheadFunc checks that the separator really does exist.\n        this.CONSUME(separator);\n        action.call(this);\n      } // Performance optimization: \"attemptInRepetitionRecovery\" will be defined as NOOP unless recovery is enabled\n\n\n      this.attemptInRepetitionRecovery(this.repetitionSepSecondInternal, [prodOccurrence, separator, separatorLookAheadFunc, action, interpreter_1.NextTerminalAfterAtLeastOneSepWalker], separatorLookAheadFunc, keys_1.AT_LEAST_ONE_SEP_IDX, prodOccurrence, interpreter_1.NextTerminalAfterAtLeastOneSepWalker);\n    } else {\n      throw this.raiseEarlyExitException(prodOccurrence, lookahead_1.PROD_TYPE.REPETITION_MANDATORY_WITH_SEPARATOR, options.ERR_MSG);\n    }\n  };\n\n  RecognizerEngine.prototype.manyInternal = function (prodOccurrence, actionORMethodDef) {\n    var laKey = this.getKeyForAutomaticLookahead(keys_1.MANY_IDX, prodOccurrence);\n    return this.manyInternalLogic(prodOccurrence, actionORMethodDef, laKey);\n  };\n\n  RecognizerEngine.prototype.manyInternalLogic = function (prodOccurrence, actionORMethodDef, key) {\n    var _this = this;\n\n    var lookaheadFunction = this.getLaFuncFromCache(key);\n    var action;\n\n    if (typeof actionORMethodDef !== \"function\") {\n      action = actionORMethodDef.DEF;\n      var predicate_3 = actionORMethodDef.GATE; // predicate present\n\n      if (predicate_3 !== undefined) {\n        var orgLookaheadFunction_3 = lookaheadFunction;\n\n        lookaheadFunction = function lookaheadFunction() {\n          return predicate_3.call(_this) && orgLookaheadFunction_3.call(_this);\n        };\n      }\n    } else {\n      action = actionORMethodDef;\n    }\n\n    var notStuck = true;\n\n    while (lookaheadFunction.call(this) === true && notStuck === true) {\n      notStuck = this.doSingleRepetition(action);\n    } // Performance optimization: \"attemptInRepetitionRecovery\" will be defined as NOOP unless recovery is enabled\n\n\n    this.attemptInRepetitionRecovery(this.manyInternal, [prodOccurrence, actionORMethodDef], lookaheadFunction, keys_1.MANY_IDX, prodOccurrence, interpreter_1.NextTerminalAfterManyWalker, // The notStuck parameter is only relevant when \"attemptInRepetitionRecovery\"\n    // is invoked from manyInternal, in the MANY_SEP case and AT_LEAST_ONE[_SEP]\n    // An infinite loop cannot occur as:\n    // - Either the lookahead is guaranteed to consume something (Single Token Separator)\n    // - AT_LEAST_ONE by definition is guaranteed to consume something (or error out).\n    notStuck);\n  };\n\n  RecognizerEngine.prototype.manySepFirstInternal = function (prodOccurrence, options) {\n    var laKey = this.getKeyForAutomaticLookahead(keys_1.MANY_SEP_IDX, prodOccurrence);\n    this.manySepFirstInternalLogic(prodOccurrence, options, laKey);\n  };\n\n  RecognizerEngine.prototype.manySepFirstInternalLogic = function (prodOccurrence, options, key) {\n    var _this = this;\n\n    var action = options.DEF;\n    var separator = options.SEP;\n    var firstIterationLaFunc = this.getLaFuncFromCache(key); // 1st iteration\n\n    if (firstIterationLaFunc.call(this) === true) {\n      action.call(this);\n\n      var separatorLookAheadFunc = function separatorLookAheadFunc() {\n        return _this.tokenMatcher(_this.LA(1), separator);\n      }; // 2nd..nth iterations\n\n\n      while (this.tokenMatcher(this.LA(1), separator) === true) {\n        // note that this CONSUME will never enter recovery because\n        // the separatorLookAheadFunc checks that the separator really does exist.\n        this.CONSUME(separator); // No need for checking infinite loop here due to consuming the separator.\n\n        action.call(this);\n      } // Performance optimization: \"attemptInRepetitionRecovery\" will be defined as NOOP unless recovery is enabled\n\n\n      this.attemptInRepetitionRecovery(this.repetitionSepSecondInternal, [prodOccurrence, separator, separatorLookAheadFunc, action, interpreter_1.NextTerminalAfterManySepWalker], separatorLookAheadFunc, keys_1.MANY_SEP_IDX, prodOccurrence, interpreter_1.NextTerminalAfterManySepWalker);\n    }\n  };\n\n  RecognizerEngine.prototype.repetitionSepSecondInternal = function (prodOccurrence, separator, separatorLookAheadFunc, action, nextTerminalAfterWalker) {\n    while (separatorLookAheadFunc()) {\n      // note that this CONSUME will never enter recovery because\n      // the separatorLookAheadFunc checks that the separator really does exist.\n      this.CONSUME(separator);\n      action.call(this);\n    } // we can only arrive to this function after an error\n    // has occurred (hence the name 'second') so the following\n    // IF will always be entered, its possible to remove it...\n    // however it is kept to avoid confusion and be consistent.\n    // Performance optimization: \"attemptInRepetitionRecovery\" will be defined as NOOP unless recovery is enabled\n\n    /* istanbul ignore else */\n\n\n    this.attemptInRepetitionRecovery(this.repetitionSepSecondInternal, [prodOccurrence, separator, separatorLookAheadFunc, action, nextTerminalAfterWalker], separatorLookAheadFunc, keys_1.AT_LEAST_ONE_SEP_IDX, prodOccurrence, nextTerminalAfterWalker);\n  };\n\n  RecognizerEngine.prototype.doSingleRepetition = function (action) {\n    var beforeIteration = this.getLexerPosition();\n    action.call(this);\n    var afterIteration = this.getLexerPosition(); // This boolean will indicate if this repetition progressed\n    // or if we are \"stuck\" (potential infinite loop in the repetition).\n\n    return afterIteration > beforeIteration;\n  };\n\n  RecognizerEngine.prototype.orInternal = function (altsOrOpts, occurrence) {\n    var laKey = this.getKeyForAutomaticLookahead(keys_1.OR_IDX, occurrence);\n    var alts = (0, isArray_1.default)(altsOrOpts) ? altsOrOpts : altsOrOpts.DEF;\n    var laFunc = this.getLaFuncFromCache(laKey);\n    var altIdxToTake = laFunc.call(this, alts);\n\n    if (altIdxToTake !== undefined) {\n      var chosenAlternative = alts[altIdxToTake];\n      return chosenAlternative.ALT.call(this);\n    }\n\n    this.raiseNoAltException(occurrence, altsOrOpts.ERR_MSG);\n  };\n\n  RecognizerEngine.prototype.ruleFinallyStateUpdate = function () {\n    this.RULE_STACK.pop();\n    this.RULE_OCCURRENCE_STACK.pop(); // NOOP when cst is disabled\n\n    this.cstFinallyStateUpdate();\n\n    if (this.RULE_STACK.length === 0 && this.isAtEndOfInput() === false) {\n      var firstRedundantTok = this.LA(1);\n      var errMsg = this.errorMessageProvider.buildNotAllInputParsedMessage({\n        firstRedundant: firstRedundantTok,\n        ruleName: this.getCurrRuleFullName()\n      });\n      this.SAVE_ERROR(new exceptions_public_1.NotAllInputParsedException(errMsg, firstRedundantTok));\n    }\n  };\n\n  RecognizerEngine.prototype.subruleInternal = function (ruleToCall, idx, options) {\n    var ruleResult;\n\n    try {\n      var args = options !== undefined ? options.ARGS : undefined;\n      this.subruleIdx = idx;\n      ruleResult = ruleToCall.apply(this, args);\n      this.cstPostNonTerminal(ruleResult, options !== undefined && options.LABEL !== undefined ? options.LABEL : ruleToCall.ruleName);\n      return ruleResult;\n    } catch (e) {\n      throw this.subruleInternalError(e, options, ruleToCall.ruleName);\n    }\n  };\n\n  RecognizerEngine.prototype.subruleInternalError = function (e, options, ruleName) {\n    if ((0, exceptions_public_1.isRecognitionException)(e) && e.partialCstResult !== undefined) {\n      this.cstPostNonTerminal(e.partialCstResult, options !== undefined && options.LABEL !== undefined ? options.LABEL : ruleName);\n      delete e.partialCstResult;\n    }\n\n    throw e;\n  };\n\n  RecognizerEngine.prototype.consumeInternal = function (tokType, idx, options) {\n    var consumedToken;\n\n    try {\n      var nextToken = this.LA(1);\n\n      if (this.tokenMatcher(nextToken, tokType) === true) {\n        this.consumeToken();\n        consumedToken = nextToken;\n      } else {\n        this.consumeInternalError(tokType, nextToken, options);\n      }\n    } catch (eFromConsumption) {\n      consumedToken = this.consumeInternalRecovery(tokType, idx, eFromConsumption);\n    }\n\n    this.cstPostTerminal(options !== undefined && options.LABEL !== undefined ? options.LABEL : tokType.name, consumedToken);\n    return consumedToken;\n  };\n\n  RecognizerEngine.prototype.consumeInternalError = function (tokType, nextToken, options) {\n    var msg;\n    var previousToken = this.LA(0);\n\n    if (options !== undefined && options.ERR_MSG) {\n      msg = options.ERR_MSG;\n    } else {\n      msg = this.errorMessageProvider.buildMismatchTokenMessage({\n        expected: tokType,\n        actual: nextToken,\n        previous: previousToken,\n        ruleName: this.getCurrRuleFullName()\n      });\n    }\n\n    throw this.SAVE_ERROR(new exceptions_public_1.MismatchedTokenException(msg, nextToken, previousToken));\n  };\n\n  RecognizerEngine.prototype.consumeInternalRecovery = function (tokType, idx, eFromConsumption) {\n    // no recovery allowed during backtracking, otherwise backtracking may recover invalid syntax and accept it\n    // but the original syntax could have been parsed successfully without any backtracking + recovery\n    if (this.recoveryEnabled && // TODO: more robust checking of the exception type. Perhaps Typescript extending expressions?\n    eFromConsumption.name === \"MismatchedTokenException\" && !this.isBackTracking()) {\n      var follows = this.getFollowsForInRuleRecovery(tokType, idx);\n\n      try {\n        return this.tryInRuleRecovery(tokType, follows);\n      } catch (eFromInRuleRecovery) {\n        if (eFromInRuleRecovery.name === recoverable_1.IN_RULE_RECOVERY_EXCEPTION) {\n          // failed in RuleRecovery.\n          // throw the original error in order to trigger reSync error recovery\n          throw eFromConsumption;\n        } else {\n          throw eFromInRuleRecovery;\n        }\n      }\n    } else {\n      throw eFromConsumption;\n    }\n  };\n\n  RecognizerEngine.prototype.saveRecogState = function () {\n    // errors is a getter which will clone the errors array\n    var savedErrors = this.errors;\n    var savedRuleStack = (0, clone_1.default)(this.RULE_STACK);\n    return {\n      errors: savedErrors,\n      lexerState: this.exportLexerState(),\n      RULE_STACK: savedRuleStack,\n      CST_STACK: this.CST_STACK\n    };\n  };\n\n  RecognizerEngine.prototype.reloadRecogState = function (newState) {\n    this.errors = newState.errors;\n    this.importLexerState(newState.lexerState);\n    this.RULE_STACK = newState.RULE_STACK;\n  };\n\n  RecognizerEngine.prototype.ruleInvocationStateUpdate = function (shortName, fullName, idxInCallingRule) {\n    this.RULE_OCCURRENCE_STACK.push(idxInCallingRule);\n    this.RULE_STACK.push(shortName); // NOOP when cst is disabled\n\n    this.cstInvocationStateUpdate(fullName);\n  };\n\n  RecognizerEngine.prototype.isBackTracking = function () {\n    return this.isBackTrackingStack.length !== 0;\n  };\n\n  RecognizerEngine.prototype.getCurrRuleFullName = function () {\n    var shortName = this.getLastExplicitRuleShortName();\n    return this.shortRuleNameToFull[shortName];\n  };\n\n  RecognizerEngine.prototype.shortRuleNameToFullName = function (shortName) {\n    return this.shortRuleNameToFull[shortName];\n  };\n\n  RecognizerEngine.prototype.isAtEndOfInput = function () {\n    return this.tokenMatcher(this.LA(1), tokens_public_1.EOF);\n  };\n\n  RecognizerEngine.prototype.reset = function () {\n    this.resetLexerState();\n    this.subruleIdx = 0;\n    this.isBackTrackingStack = [];\n    this.errors = [];\n    this.RULE_STACK = []; // TODO: extract a specific reset for TreeBuilder trait\n\n    this.CST_STACK = [];\n    this.RULE_OCCURRENCE_STACK = [];\n  };\n\n  return RecognizerEngine;\n}();\n\nexports.RecognizerEngine = RecognizerEngine;","map":{"version":3,"sources":["../../../../../src/parse/parser/traits/recognizer_engine.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.RecognizerEngine = void 0;\nvar isEmpty_1 = __importDefault(require(\"lodash/isEmpty\"));\nvar isArray_1 = __importDefault(require(\"lodash/isArray\"));\nvar flatten_1 = __importDefault(require(\"lodash/flatten\"));\nvar every_1 = __importDefault(require(\"lodash/every\"));\nvar uniq_1 = __importDefault(require(\"lodash/uniq\"));\nvar isObject_1 = __importDefault(require(\"lodash/isObject\"));\nvar has_1 = __importDefault(require(\"lodash/has\"));\nvar values_1 = __importDefault(require(\"lodash/values\"));\nvar reduce_1 = __importDefault(require(\"lodash/reduce\"));\nvar clone_1 = __importDefault(require(\"lodash/clone\"));\nvar keys_1 = require(\"../../grammar/keys\");\nvar exceptions_public_1 = require(\"../../exceptions_public\");\nvar lookahead_1 = require(\"../../grammar/lookahead\");\nvar interpreter_1 = require(\"../../grammar/interpreter\");\nvar parser_1 = require(\"../parser\");\nvar recoverable_1 = require(\"./recoverable\");\nvar tokens_public_1 = require(\"../../../scan/tokens_public\");\nvar tokens_1 = require(\"../../../scan/tokens\");\n/**\n * This trait is responsible for the runtime parsing engine\n * Used by the official API (recognizer_api.ts)\n */\nvar RecognizerEngine = /** @class */ (function () {\n    function RecognizerEngine() {\n    }\n    RecognizerEngine.prototype.initRecognizerEngine = function (tokenVocabulary, config) {\n        this.className = this.constructor.name;\n        // TODO: would using an ES6 Map or plain object be faster (CST building scenario)\n        this.shortRuleNameToFull = {};\n        this.fullRuleNameToShort = {};\n        this.ruleShortNameIdx = 256;\n        this.tokenMatcher = tokens_1.tokenStructuredMatcherNoCategories;\n        this.subruleIdx = 0;\n        this.definedRulesNames = [];\n        this.tokensMap = {};\n        this.isBackTrackingStack = [];\n        this.RULE_STACK = [];\n        this.RULE_OCCURRENCE_STACK = [];\n        this.gastProductionsCache = {};\n        if ((0, has_1.default)(config, \"serializedGrammar\")) {\n            throw Error(\"The Parser's configuration can no longer contain a <serializedGrammar> property.\\n\" +\n                \"\\tSee: https://chevrotain.io/docs/changes/BREAKING_CHANGES.html#_6-0-0\\n\" +\n                \"\\tFor Further details.\");\n        }\n        if ((0, isArray_1.default)(tokenVocabulary)) {\n            // This only checks for Token vocabularies provided as arrays.\n            // That is good enough because the main objective is to detect users of pre-V4.0 APIs\n            // rather than all edge cases of empty Token vocabularies.\n            if ((0, isEmpty_1.default)(tokenVocabulary)) {\n                throw Error(\"A Token Vocabulary cannot be empty.\\n\" +\n                    \"\\tNote that the first argument for the parser constructor\\n\" +\n                    \"\\tis no longer a Token vector (since v4.0).\");\n            }\n            if (typeof tokenVocabulary[0].startOffset === \"number\") {\n                throw Error(\"The Parser constructor no longer accepts a token vector as the first argument.\\n\" +\n                    \"\\tSee: https://chevrotain.io/docs/changes/BREAKING_CHANGES.html#_4-0-0\\n\" +\n                    \"\\tFor Further details.\");\n            }\n        }\n        if ((0, isArray_1.default)(tokenVocabulary)) {\n            this.tokensMap = (0, reduce_1.default)(tokenVocabulary, function (acc, tokType) {\n                acc[tokType.name] = tokType;\n                return acc;\n            }, {});\n        }\n        else if ((0, has_1.default)(tokenVocabulary, \"modes\") &&\n            (0, every_1.default)((0, flatten_1.default)((0, values_1.default)(tokenVocabulary.modes)), tokens_1.isTokenType)) {\n            var allTokenTypes_1 = (0, flatten_1.default)((0, values_1.default)(tokenVocabulary.modes));\n            var uniqueTokens = (0, uniq_1.default)(allTokenTypes_1);\n            this.tokensMap = (0, reduce_1.default)(uniqueTokens, function (acc, tokType) {\n                acc[tokType.name] = tokType;\n                return acc;\n            }, {});\n        }\n        else if ((0, isObject_1.default)(tokenVocabulary)) {\n            this.tokensMap = (0, clone_1.default)(tokenVocabulary);\n        }\n        else {\n            throw new Error(\"<tokensDictionary> argument must be An Array of Token constructors,\" +\n                \" A dictionary of Token constructors or an IMultiModeLexerDefinition\");\n        }\n        // always add EOF to the tokenNames -> constructors map. it is useful to assure all the input has been\n        // parsed with a clear error message (\"expecting EOF but found ...\")\n        this.tokensMap[\"EOF\"] = tokens_public_1.EOF;\n        var allTokenTypes = (0, has_1.default)(tokenVocabulary, \"modes\")\n            ? (0, flatten_1.default)((0, values_1.default)(tokenVocabulary.modes))\n            : (0, values_1.default)(tokenVocabulary);\n        var noTokenCategoriesUsed = (0, every_1.default)(allTokenTypes, function (tokenConstructor) {\n            return (0, isEmpty_1.default)(tokenConstructor.categoryMatches);\n        });\n        this.tokenMatcher = noTokenCategoriesUsed\n            ? tokens_1.tokenStructuredMatcherNoCategories\n            : tokens_1.tokenStructuredMatcher;\n        // Because ES2015+ syntax should be supported for creating Token classes\n        // We cannot assume that the Token classes were created using the \"extendToken\" utilities\n        // Therefore we must augment the Token classes both on Lexer initialization and on Parser initialization\n        (0, tokens_1.augmentTokenTypes)((0, values_1.default)(this.tokensMap));\n    };\n    RecognizerEngine.prototype.defineRule = function (ruleName, impl, config) {\n        if (this.selfAnalysisDone) {\n            throw Error(\"Grammar rule <\".concat(ruleName, \"> may not be defined after the 'performSelfAnalysis' method has been called'\\n\") +\n                \"Make sure that all grammar rule definitions are done before 'performSelfAnalysis' is called.\");\n        }\n        var resyncEnabled = (0, has_1.default)(config, \"resyncEnabled\")\n            ? config.resyncEnabled // assumes end user provides the correct config value/type\n            : parser_1.DEFAULT_RULE_CONFIG.resyncEnabled;\n        var recoveryValueFunc = (0, has_1.default)(config, \"recoveryValueFunc\")\n            ? config.recoveryValueFunc // assumes end user provides the correct config value/type\n            : parser_1.DEFAULT_RULE_CONFIG.recoveryValueFunc;\n        // performance optimization: Use small integers as keys for the longer human readable \"full\" rule names.\n        // this greatly improves Map access time (as much as 8% for some performance benchmarks).\n        var shortName = this.ruleShortNameIdx << (keys_1.BITS_FOR_METHOD_TYPE + keys_1.BITS_FOR_OCCURRENCE_IDX);\n        this.ruleShortNameIdx++;\n        this.shortRuleNameToFull[shortName] = ruleName;\n        this.fullRuleNameToShort[ruleName] = shortName;\n        var invokeRuleWithTry;\n        // Micro optimization, only check the condition **once** on rule definition\n        // instead of **every single** rule invocation.\n        if (this.outputCst === true) {\n            invokeRuleWithTry = function invokeRuleWithTry() {\n                var args = [];\n                for (var _i = 0; _i < arguments.length; _i++) {\n                    args[_i] = arguments[_i];\n                }\n                try {\n                    this.ruleInvocationStateUpdate(shortName, ruleName, this.subruleIdx);\n                    impl.apply(this, args);\n                    var cst = this.CST_STACK[this.CST_STACK.length - 1];\n                    this.cstPostRule(cst);\n                    return cst;\n                }\n                catch (e) {\n                    return this.invokeRuleCatch(e, resyncEnabled, recoveryValueFunc);\n                }\n                finally {\n                    this.ruleFinallyStateUpdate();\n                }\n            };\n        }\n        else {\n            invokeRuleWithTry = function invokeRuleWithTryCst() {\n                var args = [];\n                for (var _i = 0; _i < arguments.length; _i++) {\n                    args[_i] = arguments[_i];\n                }\n                try {\n                    this.ruleInvocationStateUpdate(shortName, ruleName, this.subruleIdx);\n                    return impl.apply(this, args);\n                }\n                catch (e) {\n                    return this.invokeRuleCatch(e, resyncEnabled, recoveryValueFunc);\n                }\n                finally {\n                    this.ruleFinallyStateUpdate();\n                }\n            };\n        }\n        var wrappedGrammarRule = Object.assign(invokeRuleWithTry, { ruleName: ruleName, originalGrammarAction: impl });\n        return wrappedGrammarRule;\n    };\n    RecognizerEngine.prototype.invokeRuleCatch = function (e, resyncEnabledConfig, recoveryValueFunc) {\n        var isFirstInvokedRule = this.RULE_STACK.length === 1;\n        // note the reSync is always enabled for the first rule invocation, because we must always be able to\n        // reSync with EOF and just output some INVALID ParseTree\n        // during backtracking reSync recovery is disabled, otherwise we can't be certain the backtracking\n        // path is really the most valid one\n        var reSyncEnabled = resyncEnabledConfig && !this.isBackTracking() && this.recoveryEnabled;\n        if ((0, exceptions_public_1.isRecognitionException)(e)) {\n            var recogError = e;\n            if (reSyncEnabled) {\n                var reSyncTokType = this.findReSyncTokenType();\n                if (this.isInCurrentRuleReSyncSet(reSyncTokType)) {\n                    recogError.resyncedTokens = this.reSyncTo(reSyncTokType);\n                    if (this.outputCst) {\n                        var partialCstResult = this.CST_STACK[this.CST_STACK.length - 1];\n                        partialCstResult.recoveredNode = true;\n                        return partialCstResult;\n                    }\n                    else {\n                        return recoveryValueFunc();\n                    }\n                }\n                else {\n                    if (this.outputCst) {\n                        var partialCstResult = this.CST_STACK[this.CST_STACK.length - 1];\n                        partialCstResult.recoveredNode = true;\n                        recogError.partialCstResult = partialCstResult;\n                    }\n                    // to be handled Further up the call stack\n                    throw recogError;\n                }\n            }\n            else if (isFirstInvokedRule) {\n                // otherwise a Redundant input error will be created as well and we cannot guarantee that this is indeed the case\n                this.moveToTerminatedState();\n                // the parser should never throw one of its own errors outside its flow.\n                // even if error recovery is disabled\n                return recoveryValueFunc();\n            }\n            else {\n                // to be recovered Further up the call stack\n                throw recogError;\n            }\n        }\n        else {\n            // some other Error type which we don't know how to handle (for example a built in JavaScript Error)\n            throw e;\n        }\n    };\n    // Implementation of parsing DSL\n    RecognizerEngine.prototype.optionInternal = function (actionORMethodDef, occurrence) {\n        var key = this.getKeyForAutomaticLookahead(keys_1.OPTION_IDX, occurrence);\n        return this.optionInternalLogic(actionORMethodDef, occurrence, key);\n    };\n    RecognizerEngine.prototype.optionInternalLogic = function (actionORMethodDef, occurrence, key) {\n        var _this = this;\n        var lookAheadFunc = this.getLaFuncFromCache(key);\n        var action;\n        if (typeof actionORMethodDef !== \"function\") {\n            action = actionORMethodDef.DEF;\n            var predicate_1 = actionORMethodDef.GATE;\n            // predicate present\n            if (predicate_1 !== undefined) {\n                var orgLookaheadFunction_1 = lookAheadFunc;\n                lookAheadFunc = function () {\n                    return predicate_1.call(_this) && orgLookaheadFunction_1.call(_this);\n                };\n            }\n        }\n        else {\n            action = actionORMethodDef;\n        }\n        if (lookAheadFunc.call(this) === true) {\n            return action.call(this);\n        }\n        return undefined;\n    };\n    RecognizerEngine.prototype.atLeastOneInternal = function (prodOccurrence, actionORMethodDef) {\n        var laKey = this.getKeyForAutomaticLookahead(keys_1.AT_LEAST_ONE_IDX, prodOccurrence);\n        return this.atLeastOneInternalLogic(prodOccurrence, actionORMethodDef, laKey);\n    };\n    RecognizerEngine.prototype.atLeastOneInternalLogic = function (prodOccurrence, actionORMethodDef, key) {\n        var _this = this;\n        var lookAheadFunc = this.getLaFuncFromCache(key);\n        var action;\n        if (typeof actionORMethodDef !== \"function\") {\n            action = actionORMethodDef.DEF;\n            var predicate_2 = actionORMethodDef.GATE;\n            // predicate present\n            if (predicate_2 !== undefined) {\n                var orgLookaheadFunction_2 = lookAheadFunc;\n                lookAheadFunc = function () {\n                    return predicate_2.call(_this) && orgLookaheadFunction_2.call(_this);\n                };\n            }\n        }\n        else {\n            action = actionORMethodDef;\n        }\n        if (lookAheadFunc.call(this) === true) {\n            var notStuck = this.doSingleRepetition(action);\n            while (lookAheadFunc.call(this) === true &&\n                notStuck === true) {\n                notStuck = this.doSingleRepetition(action);\n            }\n        }\n        else {\n            throw this.raiseEarlyExitException(prodOccurrence, lookahead_1.PROD_TYPE.REPETITION_MANDATORY, actionORMethodDef.ERR_MSG);\n        }\n        // note that while it may seem that this can cause an error because by using a recursive call to\n        // AT_LEAST_ONE we change the grammar to AT_LEAST_TWO, AT_LEAST_THREE ... , the possible recursive call\n        // from the tryInRepetitionRecovery(...) will only happen IFF there really are TWO/THREE/.... items.\n        // Performance optimization: \"attemptInRepetitionRecovery\" will be defined as NOOP unless recovery is enabled\n        this.attemptInRepetitionRecovery(this.atLeastOneInternal, [prodOccurrence, actionORMethodDef], lookAheadFunc, keys_1.AT_LEAST_ONE_IDX, prodOccurrence, interpreter_1.NextTerminalAfterAtLeastOneWalker);\n    };\n    RecognizerEngine.prototype.atLeastOneSepFirstInternal = function (prodOccurrence, options) {\n        var laKey = this.getKeyForAutomaticLookahead(keys_1.AT_LEAST_ONE_SEP_IDX, prodOccurrence);\n        this.atLeastOneSepFirstInternalLogic(prodOccurrence, options, laKey);\n    };\n    RecognizerEngine.prototype.atLeastOneSepFirstInternalLogic = function (prodOccurrence, options, key) {\n        var _this = this;\n        var action = options.DEF;\n        var separator = options.SEP;\n        var firstIterationLookaheadFunc = this.getLaFuncFromCache(key);\n        // 1st iteration\n        if (firstIterationLookaheadFunc.call(this) === true) {\n            ;\n            action.call(this);\n            //  TODO: Optimization can move this function construction into \"attemptInRepetitionRecovery\"\n            //  because it is only needed in error recovery scenarios.\n            var separatorLookAheadFunc = function () {\n                return _this.tokenMatcher(_this.LA(1), separator);\n            };\n            // 2nd..nth iterations\n            while (this.tokenMatcher(this.LA(1), separator) === true) {\n                // note that this CONSUME will never enter recovery because\n                // the separatorLookAheadFunc checks that the separator really does exist.\n                this.CONSUME(separator);\n                action.call(this);\n            }\n            // Performance optimization: \"attemptInRepetitionRecovery\" will be defined as NOOP unless recovery is enabled\n            this.attemptInRepetitionRecovery(this.repetitionSepSecondInternal, [\n                prodOccurrence,\n                separator,\n                separatorLookAheadFunc,\n                action,\n                interpreter_1.NextTerminalAfterAtLeastOneSepWalker\n            ], separatorLookAheadFunc, keys_1.AT_LEAST_ONE_SEP_IDX, prodOccurrence, interpreter_1.NextTerminalAfterAtLeastOneSepWalker);\n        }\n        else {\n            throw this.raiseEarlyExitException(prodOccurrence, lookahead_1.PROD_TYPE.REPETITION_MANDATORY_WITH_SEPARATOR, options.ERR_MSG);\n        }\n    };\n    RecognizerEngine.prototype.manyInternal = function (prodOccurrence, actionORMethodDef) {\n        var laKey = this.getKeyForAutomaticLookahead(keys_1.MANY_IDX, prodOccurrence);\n        return this.manyInternalLogic(prodOccurrence, actionORMethodDef, laKey);\n    };\n    RecognizerEngine.prototype.manyInternalLogic = function (prodOccurrence, actionORMethodDef, key) {\n        var _this = this;\n        var lookaheadFunction = this.getLaFuncFromCache(key);\n        var action;\n        if (typeof actionORMethodDef !== \"function\") {\n            action = actionORMethodDef.DEF;\n            var predicate_3 = actionORMethodDef.GATE;\n            // predicate present\n            if (predicate_3 !== undefined) {\n                var orgLookaheadFunction_3 = lookaheadFunction;\n                lookaheadFunction = function () {\n                    return predicate_3.call(_this) && orgLookaheadFunction_3.call(_this);\n                };\n            }\n        }\n        else {\n            action = actionORMethodDef;\n        }\n        var notStuck = true;\n        while (lookaheadFunction.call(this) === true && notStuck === true) {\n            notStuck = this.doSingleRepetition(action);\n        }\n        // Performance optimization: \"attemptInRepetitionRecovery\" will be defined as NOOP unless recovery is enabled\n        this.attemptInRepetitionRecovery(this.manyInternal, [prodOccurrence, actionORMethodDef], lookaheadFunction, keys_1.MANY_IDX, prodOccurrence, interpreter_1.NextTerminalAfterManyWalker, \n        // The notStuck parameter is only relevant when \"attemptInRepetitionRecovery\"\n        // is invoked from manyInternal, in the MANY_SEP case and AT_LEAST_ONE[_SEP]\n        // An infinite loop cannot occur as:\n        // - Either the lookahead is guaranteed to consume something (Single Token Separator)\n        // - AT_LEAST_ONE by definition is guaranteed to consume something (or error out).\n        notStuck);\n    };\n    RecognizerEngine.prototype.manySepFirstInternal = function (prodOccurrence, options) {\n        var laKey = this.getKeyForAutomaticLookahead(keys_1.MANY_SEP_IDX, prodOccurrence);\n        this.manySepFirstInternalLogic(prodOccurrence, options, laKey);\n    };\n    RecognizerEngine.prototype.manySepFirstInternalLogic = function (prodOccurrence, options, key) {\n        var _this = this;\n        var action = options.DEF;\n        var separator = options.SEP;\n        var firstIterationLaFunc = this.getLaFuncFromCache(key);\n        // 1st iteration\n        if (firstIterationLaFunc.call(this) === true) {\n            action.call(this);\n            var separatorLookAheadFunc = function () {\n                return _this.tokenMatcher(_this.LA(1), separator);\n            };\n            // 2nd..nth iterations\n            while (this.tokenMatcher(this.LA(1), separator) === true) {\n                // note that this CONSUME will never enter recovery because\n                // the separatorLookAheadFunc checks that the separator really does exist.\n                this.CONSUME(separator);\n                // No need for checking infinite loop here due to consuming the separator.\n                action.call(this);\n            }\n            // Performance optimization: \"attemptInRepetitionRecovery\" will be defined as NOOP unless recovery is enabled\n            this.attemptInRepetitionRecovery(this.repetitionSepSecondInternal, [\n                prodOccurrence,\n                separator,\n                separatorLookAheadFunc,\n                action,\n                interpreter_1.NextTerminalAfterManySepWalker\n            ], separatorLookAheadFunc, keys_1.MANY_SEP_IDX, prodOccurrence, interpreter_1.NextTerminalAfterManySepWalker);\n        }\n    };\n    RecognizerEngine.prototype.repetitionSepSecondInternal = function (prodOccurrence, separator, separatorLookAheadFunc, action, nextTerminalAfterWalker) {\n        while (separatorLookAheadFunc()) {\n            // note that this CONSUME will never enter recovery because\n            // the separatorLookAheadFunc checks that the separator really does exist.\n            this.CONSUME(separator);\n            action.call(this);\n        }\n        // we can only arrive to this function after an error\n        // has occurred (hence the name 'second') so the following\n        // IF will always be entered, its possible to remove it...\n        // however it is kept to avoid confusion and be consistent.\n        // Performance optimization: \"attemptInRepetitionRecovery\" will be defined as NOOP unless recovery is enabled\n        /* istanbul ignore else */\n        this.attemptInRepetitionRecovery(this.repetitionSepSecondInternal, [\n            prodOccurrence,\n            separator,\n            separatorLookAheadFunc,\n            action,\n            nextTerminalAfterWalker\n        ], separatorLookAheadFunc, keys_1.AT_LEAST_ONE_SEP_IDX, prodOccurrence, nextTerminalAfterWalker);\n    };\n    RecognizerEngine.prototype.doSingleRepetition = function (action) {\n        var beforeIteration = this.getLexerPosition();\n        action.call(this);\n        var afterIteration = this.getLexerPosition();\n        // This boolean will indicate if this repetition progressed\n        // or if we are \"stuck\" (potential infinite loop in the repetition).\n        return afterIteration > beforeIteration;\n    };\n    RecognizerEngine.prototype.orInternal = function (altsOrOpts, occurrence) {\n        var laKey = this.getKeyForAutomaticLookahead(keys_1.OR_IDX, occurrence);\n        var alts = (0, isArray_1.default)(altsOrOpts) ? altsOrOpts : altsOrOpts.DEF;\n        var laFunc = this.getLaFuncFromCache(laKey);\n        var altIdxToTake = laFunc.call(this, alts);\n        if (altIdxToTake !== undefined) {\n            var chosenAlternative = alts[altIdxToTake];\n            return chosenAlternative.ALT.call(this);\n        }\n        this.raiseNoAltException(occurrence, altsOrOpts.ERR_MSG);\n    };\n    RecognizerEngine.prototype.ruleFinallyStateUpdate = function () {\n        this.RULE_STACK.pop();\n        this.RULE_OCCURRENCE_STACK.pop();\n        // NOOP when cst is disabled\n        this.cstFinallyStateUpdate();\n        if (this.RULE_STACK.length === 0 && this.isAtEndOfInput() === false) {\n            var firstRedundantTok = this.LA(1);\n            var errMsg = this.errorMessageProvider.buildNotAllInputParsedMessage({\n                firstRedundant: firstRedundantTok,\n                ruleName: this.getCurrRuleFullName()\n            });\n            this.SAVE_ERROR(new exceptions_public_1.NotAllInputParsedException(errMsg, firstRedundantTok));\n        }\n    };\n    RecognizerEngine.prototype.subruleInternal = function (ruleToCall, idx, options) {\n        var ruleResult;\n        try {\n            var args = options !== undefined ? options.ARGS : undefined;\n            this.subruleIdx = idx;\n            ruleResult = ruleToCall.apply(this, args);\n            this.cstPostNonTerminal(ruleResult, options !== undefined && options.LABEL !== undefined\n                ? options.LABEL\n                : ruleToCall.ruleName);\n            return ruleResult;\n        }\n        catch (e) {\n            throw this.subruleInternalError(e, options, ruleToCall.ruleName);\n        }\n    };\n    RecognizerEngine.prototype.subruleInternalError = function (e, options, ruleName) {\n        if ((0, exceptions_public_1.isRecognitionException)(e) && e.partialCstResult !== undefined) {\n            this.cstPostNonTerminal(e.partialCstResult, options !== undefined && options.LABEL !== undefined\n                ? options.LABEL\n                : ruleName);\n            delete e.partialCstResult;\n        }\n        throw e;\n    };\n    RecognizerEngine.prototype.consumeInternal = function (tokType, idx, options) {\n        var consumedToken;\n        try {\n            var nextToken = this.LA(1);\n            if (this.tokenMatcher(nextToken, tokType) === true) {\n                this.consumeToken();\n                consumedToken = nextToken;\n            }\n            else {\n                this.consumeInternalError(tokType, nextToken, options);\n            }\n        }\n        catch (eFromConsumption) {\n            consumedToken = this.consumeInternalRecovery(tokType, idx, eFromConsumption);\n        }\n        this.cstPostTerminal(options !== undefined && options.LABEL !== undefined\n            ? options.LABEL\n            : tokType.name, consumedToken);\n        return consumedToken;\n    };\n    RecognizerEngine.prototype.consumeInternalError = function (tokType, nextToken, options) {\n        var msg;\n        var previousToken = this.LA(0);\n        if (options !== undefined && options.ERR_MSG) {\n            msg = options.ERR_MSG;\n        }\n        else {\n            msg = this.errorMessageProvider.buildMismatchTokenMessage({\n                expected: tokType,\n                actual: nextToken,\n                previous: previousToken,\n                ruleName: this.getCurrRuleFullName()\n            });\n        }\n        throw this.SAVE_ERROR(new exceptions_public_1.MismatchedTokenException(msg, nextToken, previousToken));\n    };\n    RecognizerEngine.prototype.consumeInternalRecovery = function (tokType, idx, eFromConsumption) {\n        // no recovery allowed during backtracking, otherwise backtracking may recover invalid syntax and accept it\n        // but the original syntax could have been parsed successfully without any backtracking + recovery\n        if (this.recoveryEnabled &&\n            // TODO: more robust checking of the exception type. Perhaps Typescript extending expressions?\n            eFromConsumption.name === \"MismatchedTokenException\" &&\n            !this.isBackTracking()) {\n            var follows = this.getFollowsForInRuleRecovery(tokType, idx);\n            try {\n                return this.tryInRuleRecovery(tokType, follows);\n            }\n            catch (eFromInRuleRecovery) {\n                if (eFromInRuleRecovery.name === recoverable_1.IN_RULE_RECOVERY_EXCEPTION) {\n                    // failed in RuleRecovery.\n                    // throw the original error in order to trigger reSync error recovery\n                    throw eFromConsumption;\n                }\n                else {\n                    throw eFromInRuleRecovery;\n                }\n            }\n        }\n        else {\n            throw eFromConsumption;\n        }\n    };\n    RecognizerEngine.prototype.saveRecogState = function () {\n        // errors is a getter which will clone the errors array\n        var savedErrors = this.errors;\n        var savedRuleStack = (0, clone_1.default)(this.RULE_STACK);\n        return {\n            errors: savedErrors,\n            lexerState: this.exportLexerState(),\n            RULE_STACK: savedRuleStack,\n            CST_STACK: this.CST_STACK\n        };\n    };\n    RecognizerEngine.prototype.reloadRecogState = function (newState) {\n        this.errors = newState.errors;\n        this.importLexerState(newState.lexerState);\n        this.RULE_STACK = newState.RULE_STACK;\n    };\n    RecognizerEngine.prototype.ruleInvocationStateUpdate = function (shortName, fullName, idxInCallingRule) {\n        this.RULE_OCCURRENCE_STACK.push(idxInCallingRule);\n        this.RULE_STACK.push(shortName);\n        // NOOP when cst is disabled\n        this.cstInvocationStateUpdate(fullName);\n    };\n    RecognizerEngine.prototype.isBackTracking = function () {\n        return this.isBackTrackingStack.length !== 0;\n    };\n    RecognizerEngine.prototype.getCurrRuleFullName = function () {\n        var shortName = this.getLastExplicitRuleShortName();\n        return this.shortRuleNameToFull[shortName];\n    };\n    RecognizerEngine.prototype.shortRuleNameToFullName = function (shortName) {\n        return this.shortRuleNameToFull[shortName];\n    };\n    RecognizerEngine.prototype.isAtEndOfInput = function () {\n        return this.tokenMatcher(this.LA(1), tokens_public_1.EOF);\n    };\n    RecognizerEngine.prototype.reset = function () {\n        this.resetLexerState();\n        this.subruleIdx = 0;\n        this.isBackTrackingStack = [];\n        this.errors = [];\n        this.RULE_STACK = [];\n        // TODO: extract a specific reset for TreeBuilder trait\n        this.CST_STACK = [];\n        this.RULE_OCCURRENCE_STACK = [];\n    };\n    return RecognizerEngine;\n}());\nexports.RecognizerEngine = RecognizerEngine;\n//# sourceMappingURL=recognizer_engine.js.map"]},"metadata":{},"sourceType":"script"}