{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.attemptInRepetitionRecovery = exports.Recoverable = exports.InRuleRecoveryException = exports.IN_RULE_RECOVERY_EXCEPTION = exports.EOF_FOLLOW_KEY = void 0;\n\nvar tokens_public_1 = require(\"../../../scan/tokens_public\");\n\nvar isEmpty_1 = __importDefault(require(\"lodash/isEmpty\"));\n\nvar dropRight_1 = __importDefault(require(\"lodash/dropRight\"));\n\nvar flatten_1 = __importDefault(require(\"lodash/flatten\"));\n\nvar map_1 = __importDefault(require(\"lodash/map\"));\n\nvar find_1 = __importDefault(require(\"lodash/find\"));\n\nvar has_1 = __importDefault(require(\"lodash/has\"));\n\nvar includes_1 = __importDefault(require(\"lodash/includes\"));\n\nvar clone_1 = __importDefault(require(\"lodash/clone\"));\n\nvar exceptions_public_1 = require(\"../../exceptions_public\");\n\nvar constants_1 = require(\"../../constants\");\n\nvar parser_1 = require(\"../parser\");\n\nexports.EOF_FOLLOW_KEY = {};\nexports.IN_RULE_RECOVERY_EXCEPTION = \"InRuleRecoveryException\";\n\nvar InRuleRecoveryException =\n/** @class */\nfunction (_super) {\n  __extends(InRuleRecoveryException, _super);\n\n  function InRuleRecoveryException(message) {\n    var _this = _super.call(this, message) || this;\n\n    _this.name = exports.IN_RULE_RECOVERY_EXCEPTION;\n    return _this;\n  }\n\n  return InRuleRecoveryException;\n}(Error);\n\nexports.InRuleRecoveryException = InRuleRecoveryException;\n/**\n * This trait is responsible for the error recovery and fault tolerant logic\n */\n\nvar Recoverable =\n/** @class */\nfunction () {\n  function Recoverable() {}\n\n  Recoverable.prototype.initRecoverable = function (config) {\n    this.firstAfterRepMap = {};\n    this.resyncFollows = {};\n    this.recoveryEnabled = (0, has_1.default)(config, \"recoveryEnabled\") ? config.recoveryEnabled // assumes end user provides the correct config value/type\n    : parser_1.DEFAULT_PARSER_CONFIG.recoveryEnabled; // performance optimization, NOOP will be inlined which\n    // effectively means that this optional feature does not exist\n    // when not used.\n\n    if (this.recoveryEnabled) {\n      this.attemptInRepetitionRecovery = attemptInRepetitionRecovery;\n    }\n  };\n\n  Recoverable.prototype.getTokenToInsert = function (tokType) {\n    var tokToInsert = (0, tokens_public_1.createTokenInstance)(tokType, \"\", NaN, NaN, NaN, NaN, NaN, NaN);\n    tokToInsert.isInsertedInRecovery = true;\n    return tokToInsert;\n  };\n\n  Recoverable.prototype.canTokenTypeBeInsertedInRecovery = function (tokType) {\n    return true;\n  };\n\n  Recoverable.prototype.canTokenTypeBeDeletedInRecovery = function (tokType) {\n    return true;\n  };\n\n  Recoverable.prototype.tryInRepetitionRecovery = function (grammarRule, grammarRuleArgs, lookAheadFunc, expectedTokType) {\n    var _this = this; // TODO: can the resyncTokenType be cached?\n\n\n    var reSyncTokType = this.findReSyncTokenType();\n    var savedLexerState = this.exportLexerState();\n    var resyncedTokens = [];\n    var passedResyncPoint = false;\n    var nextTokenWithoutResync = this.LA(1);\n    var currToken = this.LA(1);\n\n    var generateErrorMessage = function generateErrorMessage() {\n      var previousToken = _this.LA(0); // we are preemptively re-syncing before an error has been detected, therefor we must reproduce\n      // the error that would have been thrown\n\n\n      var msg = _this.errorMessageProvider.buildMismatchTokenMessage({\n        expected: expectedTokType,\n        actual: nextTokenWithoutResync,\n        previous: previousToken,\n        ruleName: _this.getCurrRuleFullName()\n      });\n\n      var error = new exceptions_public_1.MismatchedTokenException(msg, nextTokenWithoutResync, _this.LA(0)); // the first token here will be the original cause of the error, this is not part of the resyncedTokens property.\n\n      error.resyncedTokens = (0, dropRight_1.default)(resyncedTokens);\n\n      _this.SAVE_ERROR(error);\n    };\n\n    while (!passedResyncPoint) {\n      // re-synced to a point where we can safely exit the repetition/\n      if (this.tokenMatcher(currToken, expectedTokType)) {\n        generateErrorMessage();\n        return; // must return here to avoid reverting the inputIdx\n      } else if (lookAheadFunc.call(this)) {\n        // we skipped enough tokens so we can resync right back into another iteration of the repetition grammar rule\n        generateErrorMessage(); // recursive invocation in other to support multiple re-syncs in the same top level repetition grammar rule\n\n        grammarRule.apply(this, grammarRuleArgs);\n        return; // must return here to avoid reverting the inputIdx\n      } else if (this.tokenMatcher(currToken, reSyncTokType)) {\n        passedResyncPoint = true;\n      } else {\n        currToken = this.SKIP_TOKEN();\n        this.addToResyncTokens(currToken, resyncedTokens);\n      }\n    } // we were unable to find a CLOSER point to resync inside the Repetition, reset the state.\n    // The parsing exception we were trying to prevent will happen in the NEXT parsing step. it may be handled by\n    // \"between rules\" resync recovery later in the flow.\n\n\n    this.importLexerState(savedLexerState);\n  };\n\n  Recoverable.prototype.shouldInRepetitionRecoveryBeTried = function (expectTokAfterLastMatch, nextTokIdx, notStuck) {\n    // Edge case of arriving from a MANY repetition which is stuck\n    // Attempting recovery in this case could cause an infinite loop\n    if (notStuck === false) {\n      return false;\n    } // no need to recover, next token is what we expect...\n\n\n    if (this.tokenMatcher(this.LA(1), expectTokAfterLastMatch)) {\n      return false;\n    } // error recovery is disabled during backtracking as it can make the parser ignore a valid grammar path\n    // and prefer some backtracking path that includes recovered errors.\n\n\n    if (this.isBackTracking()) {\n      return false;\n    } // if we can perform inRule recovery (single token insertion or deletion) we always prefer that recovery algorithm\n    // because if it works, it makes the least amount of changes to the input stream (greedy algorithm)\n    //noinspection RedundantIfStatementJS\n\n\n    if (this.canPerformInRuleRecovery(expectTokAfterLastMatch, this.getFollowsForInRuleRecovery(expectTokAfterLastMatch, nextTokIdx))) {\n      return false;\n    }\n\n    return true;\n  }; // Error Recovery functionality\n\n\n  Recoverable.prototype.getFollowsForInRuleRecovery = function (tokType, tokIdxInRule) {\n    var grammarPath = this.getCurrentGrammarPath(tokType, tokIdxInRule);\n    var follows = this.getNextPossibleTokenTypes(grammarPath);\n    return follows;\n  };\n\n  Recoverable.prototype.tryInRuleRecovery = function (expectedTokType, follows) {\n    if (this.canRecoverWithSingleTokenInsertion(expectedTokType, follows)) {\n      var tokToInsert = this.getTokenToInsert(expectedTokType);\n      return tokToInsert;\n    }\n\n    if (this.canRecoverWithSingleTokenDeletion(expectedTokType)) {\n      var nextTok = this.SKIP_TOKEN();\n      this.consumeToken();\n      return nextTok;\n    }\n\n    throw new InRuleRecoveryException(\"sad sad panda\");\n  };\n\n  Recoverable.prototype.canPerformInRuleRecovery = function (expectedToken, follows) {\n    return this.canRecoverWithSingleTokenInsertion(expectedToken, follows) || this.canRecoverWithSingleTokenDeletion(expectedToken);\n  };\n\n  Recoverable.prototype.canRecoverWithSingleTokenInsertion = function (expectedTokType, follows) {\n    var _this = this;\n\n    if (!this.canTokenTypeBeInsertedInRecovery(expectedTokType)) {\n      return false;\n    } // must know the possible following tokens to perform single token insertion\n\n\n    if ((0, isEmpty_1.default)(follows)) {\n      return false;\n    }\n\n    var mismatchedTok = this.LA(1);\n    var isMisMatchedTokInFollows = (0, find_1.default)(follows, function (possibleFollowsTokType) {\n      return _this.tokenMatcher(mismatchedTok, possibleFollowsTokType);\n    }) !== undefined;\n    return isMisMatchedTokInFollows;\n  };\n\n  Recoverable.prototype.canRecoverWithSingleTokenDeletion = function (expectedTokType) {\n    if (!this.canTokenTypeBeDeletedInRecovery(expectedTokType)) {\n      return false;\n    }\n\n    var isNextTokenWhatIsExpected = this.tokenMatcher(this.LA(2), expectedTokType);\n    return isNextTokenWhatIsExpected;\n  };\n\n  Recoverable.prototype.isInCurrentRuleReSyncSet = function (tokenTypeIdx) {\n    var followKey = this.getCurrFollowKey();\n    var currentRuleReSyncSet = this.getFollowSetFromFollowKey(followKey);\n    return (0, includes_1.default)(currentRuleReSyncSet, tokenTypeIdx);\n  };\n\n  Recoverable.prototype.findReSyncTokenType = function () {\n    var allPossibleReSyncTokTypes = this.flattenFollowSet(); // this loop will always terminate as EOF is always in the follow stack and also always (virtually) in the input\n\n    var nextToken = this.LA(1);\n    var k = 2;\n\n    while (true) {\n      var foundMatch = (0, find_1.default)(allPossibleReSyncTokTypes, function (resyncTokType) {\n        var canMatch = (0, tokens_public_1.tokenMatcher)(nextToken, resyncTokType);\n        return canMatch;\n      });\n\n      if (foundMatch !== undefined) {\n        return foundMatch;\n      }\n\n      nextToken = this.LA(k);\n      k++;\n    }\n  };\n\n  Recoverable.prototype.getCurrFollowKey = function () {\n    // the length is at least one as we always add the ruleName to the stack before invoking the rule.\n    if (this.RULE_STACK.length === 1) {\n      return exports.EOF_FOLLOW_KEY;\n    }\n\n    var currRuleShortName = this.getLastExplicitRuleShortName();\n    var currRuleIdx = this.getLastExplicitRuleOccurrenceIndex();\n    var prevRuleShortName = this.getPreviousExplicitRuleShortName();\n    return {\n      ruleName: this.shortRuleNameToFullName(currRuleShortName),\n      idxInCallingRule: currRuleIdx,\n      inRule: this.shortRuleNameToFullName(prevRuleShortName)\n    };\n  };\n\n  Recoverable.prototype.buildFullFollowKeyStack = function () {\n    var _this = this;\n\n    var explicitRuleStack = this.RULE_STACK;\n    var explicitOccurrenceStack = this.RULE_OCCURRENCE_STACK;\n    return (0, map_1.default)(explicitRuleStack, function (ruleName, idx) {\n      if (idx === 0) {\n        return exports.EOF_FOLLOW_KEY;\n      }\n\n      return {\n        ruleName: _this.shortRuleNameToFullName(ruleName),\n        idxInCallingRule: explicitOccurrenceStack[idx],\n        inRule: _this.shortRuleNameToFullName(explicitRuleStack[idx - 1])\n      };\n    });\n  };\n\n  Recoverable.prototype.flattenFollowSet = function () {\n    var _this = this;\n\n    var followStack = (0, map_1.default)(this.buildFullFollowKeyStack(), function (currKey) {\n      return _this.getFollowSetFromFollowKey(currKey);\n    });\n    return (0, flatten_1.default)(followStack);\n  };\n\n  Recoverable.prototype.getFollowSetFromFollowKey = function (followKey) {\n    if (followKey === exports.EOF_FOLLOW_KEY) {\n      return [tokens_public_1.EOF];\n    }\n\n    var followName = followKey.ruleName + followKey.idxInCallingRule + constants_1.IN + followKey.inRule;\n    return this.resyncFollows[followName];\n  }; // It does not make any sense to include a virtual EOF token in the list of resynced tokens\n  // as EOF does not really exist and thus does not contain any useful information (line/column numbers)\n\n\n  Recoverable.prototype.addToResyncTokens = function (token, resyncTokens) {\n    if (!this.tokenMatcher(token, tokens_public_1.EOF)) {\n      resyncTokens.push(token);\n    }\n\n    return resyncTokens;\n  };\n\n  Recoverable.prototype.reSyncTo = function (tokType) {\n    var resyncedTokens = [];\n    var nextTok = this.LA(1);\n\n    while (this.tokenMatcher(nextTok, tokType) === false) {\n      nextTok = this.SKIP_TOKEN();\n      this.addToResyncTokens(nextTok, resyncedTokens);\n    } // the last token is not part of the error.\n\n\n    return (0, dropRight_1.default)(resyncedTokens);\n  };\n\n  Recoverable.prototype.attemptInRepetitionRecovery = function (prodFunc, args, lookaheadFunc, dslMethodIdx, prodOccurrence, nextToksWalker, notStuck) {// by default this is a NO-OP\n    // The actual implementation is with the function(not method) below\n  };\n\n  Recoverable.prototype.getCurrentGrammarPath = function (tokType, tokIdxInRule) {\n    var pathRuleStack = this.getHumanReadableRuleStack();\n    var pathOccurrenceStack = (0, clone_1.default)(this.RULE_OCCURRENCE_STACK);\n    var grammarPath = {\n      ruleStack: pathRuleStack,\n      occurrenceStack: pathOccurrenceStack,\n      lastTok: tokType,\n      lastTokOccurrence: tokIdxInRule\n    };\n    return grammarPath;\n  };\n\n  Recoverable.prototype.getHumanReadableRuleStack = function () {\n    var _this = this;\n\n    return (0, map_1.default)(this.RULE_STACK, function (currShortName) {\n      return _this.shortRuleNameToFullName(currShortName);\n    });\n  };\n\n  return Recoverable;\n}();\n\nexports.Recoverable = Recoverable;\n\nfunction attemptInRepetitionRecovery(prodFunc, args, lookaheadFunc, dslMethodIdx, prodOccurrence, nextToksWalker, notStuck) {\n  var key = this.getKeyForAutomaticLookahead(dslMethodIdx, prodOccurrence);\n  var firstAfterRepInfo = this.firstAfterRepMap[key];\n\n  if (firstAfterRepInfo === undefined) {\n    var currRuleName = this.getCurrRuleFullName();\n    var ruleGrammar = this.getGAstProductions()[currRuleName];\n    var walker = new nextToksWalker(ruleGrammar, prodOccurrence);\n    firstAfterRepInfo = walker.startWalking();\n    this.firstAfterRepMap[key] = firstAfterRepInfo;\n  }\n\n  var expectTokAfterLastMatch = firstAfterRepInfo.token;\n  var nextTokIdx = firstAfterRepInfo.occurrence;\n  var isEndOfRule = firstAfterRepInfo.isEndOfRule; // special edge case of a TOP most repetition after which the input should END.\n  // this will force an attempt for inRule recovery in that scenario.\n\n  if (this.RULE_STACK.length === 1 && isEndOfRule && expectTokAfterLastMatch === undefined) {\n    expectTokAfterLastMatch = tokens_public_1.EOF;\n    nextTokIdx = 1;\n  } // We don't have anything to re-sync to...\n  // this condition was extracted from `shouldInRepetitionRecoveryBeTried` to act as a type-guard\n\n\n  if (expectTokAfterLastMatch === undefined || nextTokIdx === undefined) {\n    return;\n  }\n\n  if (this.shouldInRepetitionRecoveryBeTried(expectTokAfterLastMatch, nextTokIdx, notStuck)) {\n    // TODO: performance optimization: instead of passing the original args here, we modify\n    // the args param (or create a new one) and make sure the lookahead func is explicitly provided\n    // to avoid searching the cache for it once more.\n    this.tryInRepetitionRecovery(prodFunc, args, lookaheadFunc, expectTokAfterLastMatch);\n  }\n}\n\nexports.attemptInRepetitionRecovery = attemptInRepetitionRecovery;","map":{"version":3,"sources":["../../../../../src/parse/parser/traits/recoverable.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.attemptInRepetitionRecovery = exports.Recoverable = exports.InRuleRecoveryException = exports.IN_RULE_RECOVERY_EXCEPTION = exports.EOF_FOLLOW_KEY = void 0;\nvar tokens_public_1 = require(\"../../../scan/tokens_public\");\nvar isEmpty_1 = __importDefault(require(\"lodash/isEmpty\"));\nvar dropRight_1 = __importDefault(require(\"lodash/dropRight\"));\nvar flatten_1 = __importDefault(require(\"lodash/flatten\"));\nvar map_1 = __importDefault(require(\"lodash/map\"));\nvar find_1 = __importDefault(require(\"lodash/find\"));\nvar has_1 = __importDefault(require(\"lodash/has\"));\nvar includes_1 = __importDefault(require(\"lodash/includes\"));\nvar clone_1 = __importDefault(require(\"lodash/clone\"));\nvar exceptions_public_1 = require(\"../../exceptions_public\");\nvar constants_1 = require(\"../../constants\");\nvar parser_1 = require(\"../parser\");\nexports.EOF_FOLLOW_KEY = {};\nexports.IN_RULE_RECOVERY_EXCEPTION = \"InRuleRecoveryException\";\nvar InRuleRecoveryException = /** @class */ (function (_super) {\n    __extends(InRuleRecoveryException, _super);\n    function InRuleRecoveryException(message) {\n        var _this = _super.call(this, message) || this;\n        _this.name = exports.IN_RULE_RECOVERY_EXCEPTION;\n        return _this;\n    }\n    return InRuleRecoveryException;\n}(Error));\nexports.InRuleRecoveryException = InRuleRecoveryException;\n/**\n * This trait is responsible for the error recovery and fault tolerant logic\n */\nvar Recoverable = /** @class */ (function () {\n    function Recoverable() {\n    }\n    Recoverable.prototype.initRecoverable = function (config) {\n        this.firstAfterRepMap = {};\n        this.resyncFollows = {};\n        this.recoveryEnabled = (0, has_1.default)(config, \"recoveryEnabled\")\n            ? config.recoveryEnabled // assumes end user provides the correct config value/type\n            : parser_1.DEFAULT_PARSER_CONFIG.recoveryEnabled;\n        // performance optimization, NOOP will be inlined which\n        // effectively means that this optional feature does not exist\n        // when not used.\n        if (this.recoveryEnabled) {\n            this.attemptInRepetitionRecovery = attemptInRepetitionRecovery;\n        }\n    };\n    Recoverable.prototype.getTokenToInsert = function (tokType) {\n        var tokToInsert = (0, tokens_public_1.createTokenInstance)(tokType, \"\", NaN, NaN, NaN, NaN, NaN, NaN);\n        tokToInsert.isInsertedInRecovery = true;\n        return tokToInsert;\n    };\n    Recoverable.prototype.canTokenTypeBeInsertedInRecovery = function (tokType) {\n        return true;\n    };\n    Recoverable.prototype.canTokenTypeBeDeletedInRecovery = function (tokType) {\n        return true;\n    };\n    Recoverable.prototype.tryInRepetitionRecovery = function (grammarRule, grammarRuleArgs, lookAheadFunc, expectedTokType) {\n        var _this = this;\n        // TODO: can the resyncTokenType be cached?\n        var reSyncTokType = this.findReSyncTokenType();\n        var savedLexerState = this.exportLexerState();\n        var resyncedTokens = [];\n        var passedResyncPoint = false;\n        var nextTokenWithoutResync = this.LA(1);\n        var currToken = this.LA(1);\n        var generateErrorMessage = function () {\n            var previousToken = _this.LA(0);\n            // we are preemptively re-syncing before an error has been detected, therefor we must reproduce\n            // the error that would have been thrown\n            var msg = _this.errorMessageProvider.buildMismatchTokenMessage({\n                expected: expectedTokType,\n                actual: nextTokenWithoutResync,\n                previous: previousToken,\n                ruleName: _this.getCurrRuleFullName()\n            });\n            var error = new exceptions_public_1.MismatchedTokenException(msg, nextTokenWithoutResync, _this.LA(0));\n            // the first token here will be the original cause of the error, this is not part of the resyncedTokens property.\n            error.resyncedTokens = (0, dropRight_1.default)(resyncedTokens);\n            _this.SAVE_ERROR(error);\n        };\n        while (!passedResyncPoint) {\n            // re-synced to a point where we can safely exit the repetition/\n            if (this.tokenMatcher(currToken, expectedTokType)) {\n                generateErrorMessage();\n                return; // must return here to avoid reverting the inputIdx\n            }\n            else if (lookAheadFunc.call(this)) {\n                // we skipped enough tokens so we can resync right back into another iteration of the repetition grammar rule\n                generateErrorMessage();\n                // recursive invocation in other to support multiple re-syncs in the same top level repetition grammar rule\n                grammarRule.apply(this, grammarRuleArgs);\n                return; // must return here to avoid reverting the inputIdx\n            }\n            else if (this.tokenMatcher(currToken, reSyncTokType)) {\n                passedResyncPoint = true;\n            }\n            else {\n                currToken = this.SKIP_TOKEN();\n                this.addToResyncTokens(currToken, resyncedTokens);\n            }\n        }\n        // we were unable to find a CLOSER point to resync inside the Repetition, reset the state.\n        // The parsing exception we were trying to prevent will happen in the NEXT parsing step. it may be handled by\n        // \"between rules\" resync recovery later in the flow.\n        this.importLexerState(savedLexerState);\n    };\n    Recoverable.prototype.shouldInRepetitionRecoveryBeTried = function (expectTokAfterLastMatch, nextTokIdx, notStuck) {\n        // Edge case of arriving from a MANY repetition which is stuck\n        // Attempting recovery in this case could cause an infinite loop\n        if (notStuck === false) {\n            return false;\n        }\n        // no need to recover, next token is what we expect...\n        if (this.tokenMatcher(this.LA(1), expectTokAfterLastMatch)) {\n            return false;\n        }\n        // error recovery is disabled during backtracking as it can make the parser ignore a valid grammar path\n        // and prefer some backtracking path that includes recovered errors.\n        if (this.isBackTracking()) {\n            return false;\n        }\n        // if we can perform inRule recovery (single token insertion or deletion) we always prefer that recovery algorithm\n        // because if it works, it makes the least amount of changes to the input stream (greedy algorithm)\n        //noinspection RedundantIfStatementJS\n        if (this.canPerformInRuleRecovery(expectTokAfterLastMatch, this.getFollowsForInRuleRecovery(expectTokAfterLastMatch, nextTokIdx))) {\n            return false;\n        }\n        return true;\n    };\n    // Error Recovery functionality\n    Recoverable.prototype.getFollowsForInRuleRecovery = function (tokType, tokIdxInRule) {\n        var grammarPath = this.getCurrentGrammarPath(tokType, tokIdxInRule);\n        var follows = this.getNextPossibleTokenTypes(grammarPath);\n        return follows;\n    };\n    Recoverable.prototype.tryInRuleRecovery = function (expectedTokType, follows) {\n        if (this.canRecoverWithSingleTokenInsertion(expectedTokType, follows)) {\n            var tokToInsert = this.getTokenToInsert(expectedTokType);\n            return tokToInsert;\n        }\n        if (this.canRecoverWithSingleTokenDeletion(expectedTokType)) {\n            var nextTok = this.SKIP_TOKEN();\n            this.consumeToken();\n            return nextTok;\n        }\n        throw new InRuleRecoveryException(\"sad sad panda\");\n    };\n    Recoverable.prototype.canPerformInRuleRecovery = function (expectedToken, follows) {\n        return (this.canRecoverWithSingleTokenInsertion(expectedToken, follows) ||\n            this.canRecoverWithSingleTokenDeletion(expectedToken));\n    };\n    Recoverable.prototype.canRecoverWithSingleTokenInsertion = function (expectedTokType, follows) {\n        var _this = this;\n        if (!this.canTokenTypeBeInsertedInRecovery(expectedTokType)) {\n            return false;\n        }\n        // must know the possible following tokens to perform single token insertion\n        if ((0, isEmpty_1.default)(follows)) {\n            return false;\n        }\n        var mismatchedTok = this.LA(1);\n        var isMisMatchedTokInFollows = (0, find_1.default)(follows, function (possibleFollowsTokType) {\n            return _this.tokenMatcher(mismatchedTok, possibleFollowsTokType);\n        }) !== undefined;\n        return isMisMatchedTokInFollows;\n    };\n    Recoverable.prototype.canRecoverWithSingleTokenDeletion = function (expectedTokType) {\n        if (!this.canTokenTypeBeDeletedInRecovery(expectedTokType)) {\n            return false;\n        }\n        var isNextTokenWhatIsExpected = this.tokenMatcher(this.LA(2), expectedTokType);\n        return isNextTokenWhatIsExpected;\n    };\n    Recoverable.prototype.isInCurrentRuleReSyncSet = function (tokenTypeIdx) {\n        var followKey = this.getCurrFollowKey();\n        var currentRuleReSyncSet = this.getFollowSetFromFollowKey(followKey);\n        return (0, includes_1.default)(currentRuleReSyncSet, tokenTypeIdx);\n    };\n    Recoverable.prototype.findReSyncTokenType = function () {\n        var allPossibleReSyncTokTypes = this.flattenFollowSet();\n        // this loop will always terminate as EOF is always in the follow stack and also always (virtually) in the input\n        var nextToken = this.LA(1);\n        var k = 2;\n        while (true) {\n            var foundMatch = (0, find_1.default)(allPossibleReSyncTokTypes, function (resyncTokType) {\n                var canMatch = (0, tokens_public_1.tokenMatcher)(nextToken, resyncTokType);\n                return canMatch;\n            });\n            if (foundMatch !== undefined) {\n                return foundMatch;\n            }\n            nextToken = this.LA(k);\n            k++;\n        }\n    };\n    Recoverable.prototype.getCurrFollowKey = function () {\n        // the length is at least one as we always add the ruleName to the stack before invoking the rule.\n        if (this.RULE_STACK.length === 1) {\n            return exports.EOF_FOLLOW_KEY;\n        }\n        var currRuleShortName = this.getLastExplicitRuleShortName();\n        var currRuleIdx = this.getLastExplicitRuleOccurrenceIndex();\n        var prevRuleShortName = this.getPreviousExplicitRuleShortName();\n        return {\n            ruleName: this.shortRuleNameToFullName(currRuleShortName),\n            idxInCallingRule: currRuleIdx,\n            inRule: this.shortRuleNameToFullName(prevRuleShortName)\n        };\n    };\n    Recoverable.prototype.buildFullFollowKeyStack = function () {\n        var _this = this;\n        var explicitRuleStack = this.RULE_STACK;\n        var explicitOccurrenceStack = this.RULE_OCCURRENCE_STACK;\n        return (0, map_1.default)(explicitRuleStack, function (ruleName, idx) {\n            if (idx === 0) {\n                return exports.EOF_FOLLOW_KEY;\n            }\n            return {\n                ruleName: _this.shortRuleNameToFullName(ruleName),\n                idxInCallingRule: explicitOccurrenceStack[idx],\n                inRule: _this.shortRuleNameToFullName(explicitRuleStack[idx - 1])\n            };\n        });\n    };\n    Recoverable.prototype.flattenFollowSet = function () {\n        var _this = this;\n        var followStack = (0, map_1.default)(this.buildFullFollowKeyStack(), function (currKey) {\n            return _this.getFollowSetFromFollowKey(currKey);\n        });\n        return (0, flatten_1.default)(followStack);\n    };\n    Recoverable.prototype.getFollowSetFromFollowKey = function (followKey) {\n        if (followKey === exports.EOF_FOLLOW_KEY) {\n            return [tokens_public_1.EOF];\n        }\n        var followName = followKey.ruleName + followKey.idxInCallingRule + constants_1.IN + followKey.inRule;\n        return this.resyncFollows[followName];\n    };\n    // It does not make any sense to include a virtual EOF token in the list of resynced tokens\n    // as EOF does not really exist and thus does not contain any useful information (line/column numbers)\n    Recoverable.prototype.addToResyncTokens = function (token, resyncTokens) {\n        if (!this.tokenMatcher(token, tokens_public_1.EOF)) {\n            resyncTokens.push(token);\n        }\n        return resyncTokens;\n    };\n    Recoverable.prototype.reSyncTo = function (tokType) {\n        var resyncedTokens = [];\n        var nextTok = this.LA(1);\n        while (this.tokenMatcher(nextTok, tokType) === false) {\n            nextTok = this.SKIP_TOKEN();\n            this.addToResyncTokens(nextTok, resyncedTokens);\n        }\n        // the last token is not part of the error.\n        return (0, dropRight_1.default)(resyncedTokens);\n    };\n    Recoverable.prototype.attemptInRepetitionRecovery = function (prodFunc, args, lookaheadFunc, dslMethodIdx, prodOccurrence, nextToksWalker, notStuck) {\n        // by default this is a NO-OP\n        // The actual implementation is with the function(not method) below\n    };\n    Recoverable.prototype.getCurrentGrammarPath = function (tokType, tokIdxInRule) {\n        var pathRuleStack = this.getHumanReadableRuleStack();\n        var pathOccurrenceStack = (0, clone_1.default)(this.RULE_OCCURRENCE_STACK);\n        var grammarPath = {\n            ruleStack: pathRuleStack,\n            occurrenceStack: pathOccurrenceStack,\n            lastTok: tokType,\n            lastTokOccurrence: tokIdxInRule\n        };\n        return grammarPath;\n    };\n    Recoverable.prototype.getHumanReadableRuleStack = function () {\n        var _this = this;\n        return (0, map_1.default)(this.RULE_STACK, function (currShortName) {\n            return _this.shortRuleNameToFullName(currShortName);\n        });\n    };\n    return Recoverable;\n}());\nexports.Recoverable = Recoverable;\nfunction attemptInRepetitionRecovery(prodFunc, args, lookaheadFunc, dslMethodIdx, prodOccurrence, nextToksWalker, notStuck) {\n    var key = this.getKeyForAutomaticLookahead(dslMethodIdx, prodOccurrence);\n    var firstAfterRepInfo = this.firstAfterRepMap[key];\n    if (firstAfterRepInfo === undefined) {\n        var currRuleName = this.getCurrRuleFullName();\n        var ruleGrammar = this.getGAstProductions()[currRuleName];\n        var walker = new nextToksWalker(ruleGrammar, prodOccurrence);\n        firstAfterRepInfo = walker.startWalking();\n        this.firstAfterRepMap[key] = firstAfterRepInfo;\n    }\n    var expectTokAfterLastMatch = firstAfterRepInfo.token;\n    var nextTokIdx = firstAfterRepInfo.occurrence;\n    var isEndOfRule = firstAfterRepInfo.isEndOfRule;\n    // special edge case of a TOP most repetition after which the input should END.\n    // this will force an attempt for inRule recovery in that scenario.\n    if (this.RULE_STACK.length === 1 &&\n        isEndOfRule &&\n        expectTokAfterLastMatch === undefined) {\n        expectTokAfterLastMatch = tokens_public_1.EOF;\n        nextTokIdx = 1;\n    }\n    // We don't have anything to re-sync to...\n    // this condition was extracted from `shouldInRepetitionRecoveryBeTried` to act as a type-guard\n    if (expectTokAfterLastMatch === undefined || nextTokIdx === undefined) {\n        return;\n    }\n    if (this.shouldInRepetitionRecoveryBeTried(expectTokAfterLastMatch, nextTokIdx, notStuck)) {\n        // TODO: performance optimization: instead of passing the original args here, we modify\n        // the args param (or create a new one) and make sure the lookahead func is explicitly provided\n        // to avoid searching the cache for it once more.\n        this.tryInRepetitionRecovery(prodFunc, args, lookaheadFunc, expectTokAfterLastMatch);\n    }\n}\nexports.attemptInRepetitionRecovery = attemptInRepetitionRecovery;\n//# sourceMappingURL=recoverable.js.map"]},"metadata":{},"sourceType":"script"}