{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.areTokenCategoriesNotUsed = exports.isStrictPrefixOfPath = exports.containsPath = exports.getLookaheadPathsForOptionalProd = exports.getLookaheadPathsForOr = exports.lookAheadSequenceFromAlternatives = exports.buildSingleAlternativeLookaheadFunction = exports.buildAlternativesLookAheadFunc = exports.buildLookaheadFuncForOptionalProd = exports.buildLookaheadFuncForOr = exports.getProdType = exports.PROD_TYPE = void 0;\n\nvar isEmpty_1 = __importDefault(require(\"lodash/isEmpty\"));\n\nvar flatten_1 = __importDefault(require(\"lodash/flatten\"));\n\nvar every_1 = __importDefault(require(\"lodash/every\"));\n\nvar map_1 = __importDefault(require(\"lodash/map\"));\n\nvar forEach_1 = __importDefault(require(\"lodash/forEach\"));\n\nvar has_1 = __importDefault(require(\"lodash/has\"));\n\nvar reduce_1 = __importDefault(require(\"lodash/reduce\"));\n\nvar interpreter_1 = require(\"./interpreter\");\n\nvar rest_1 = require(\"./rest\");\n\nvar tokens_1 = require(\"../../scan/tokens\");\n\nvar gast_1 = require(\"@chevrotain/gast\");\n\nvar gast_2 = require(\"@chevrotain/gast\");\n\nvar PROD_TYPE;\n\n(function (PROD_TYPE) {\n  PROD_TYPE[PROD_TYPE[\"OPTION\"] = 0] = \"OPTION\";\n  PROD_TYPE[PROD_TYPE[\"REPETITION\"] = 1] = \"REPETITION\";\n  PROD_TYPE[PROD_TYPE[\"REPETITION_MANDATORY\"] = 2] = \"REPETITION_MANDATORY\";\n  PROD_TYPE[PROD_TYPE[\"REPETITION_MANDATORY_WITH_SEPARATOR\"] = 3] = \"REPETITION_MANDATORY_WITH_SEPARATOR\";\n  PROD_TYPE[PROD_TYPE[\"REPETITION_WITH_SEPARATOR\"] = 4] = \"REPETITION_WITH_SEPARATOR\";\n  PROD_TYPE[PROD_TYPE[\"ALTERNATION\"] = 5] = \"ALTERNATION\";\n})(PROD_TYPE = exports.PROD_TYPE || (exports.PROD_TYPE = {}));\n\nfunction getProdType(prod) {\n  /* istanbul ignore else */\n  if (prod instanceof gast_1.Option) {\n    return PROD_TYPE.OPTION;\n  } else if (prod instanceof gast_1.Repetition) {\n    return PROD_TYPE.REPETITION;\n  } else if (prod instanceof gast_1.RepetitionMandatory) {\n    return PROD_TYPE.REPETITION_MANDATORY;\n  } else if (prod instanceof gast_1.RepetitionMandatoryWithSeparator) {\n    return PROD_TYPE.REPETITION_MANDATORY_WITH_SEPARATOR;\n  } else if (prod instanceof gast_1.RepetitionWithSeparator) {\n    return PROD_TYPE.REPETITION_WITH_SEPARATOR;\n  } else if (prod instanceof gast_1.Alternation) {\n    return PROD_TYPE.ALTERNATION;\n  } else {\n    throw Error(\"non exhaustive match\");\n  }\n}\n\nexports.getProdType = getProdType;\n\nfunction buildLookaheadFuncForOr(occurrence, ruleGrammar, maxLookahead, hasPredicates, dynamicTokensEnabled, laFuncBuilder) {\n  var lookAheadPaths = getLookaheadPathsForOr(occurrence, ruleGrammar, maxLookahead);\n  var tokenMatcher = areTokenCategoriesNotUsed(lookAheadPaths) ? tokens_1.tokenStructuredMatcherNoCategories : tokens_1.tokenStructuredMatcher;\n  return laFuncBuilder(lookAheadPaths, hasPredicates, tokenMatcher, dynamicTokensEnabled);\n}\n\nexports.buildLookaheadFuncForOr = buildLookaheadFuncForOr;\n/**\n *  When dealing with an Optional production (OPTION/MANY/2nd iteration of AT_LEAST_ONE/...) we need to compare\n *  the lookahead \"inside\" the production and the lookahead immediately \"after\" it in the same top level rule (context free).\n *\n *  Example: given a production:\n *  ABC(DE)?DF\n *\n *  The optional '(DE)?' should only be entered if we see 'DE'. a single Token 'D' is not sufficient to distinguish between the two\n *  alternatives.\n *\n *  @returns A Lookahead function which will return true IFF the parser should parse the Optional production.\n */\n\nfunction buildLookaheadFuncForOptionalProd(occurrence, ruleGrammar, k, dynamicTokensEnabled, prodType, lookaheadBuilder) {\n  var lookAheadPaths = getLookaheadPathsForOptionalProd(occurrence, ruleGrammar, prodType, k);\n  var tokenMatcher = areTokenCategoriesNotUsed(lookAheadPaths) ? tokens_1.tokenStructuredMatcherNoCategories : tokens_1.tokenStructuredMatcher;\n  return lookaheadBuilder(lookAheadPaths[0], tokenMatcher, dynamicTokensEnabled);\n}\n\nexports.buildLookaheadFuncForOptionalProd = buildLookaheadFuncForOptionalProd;\n\nfunction buildAlternativesLookAheadFunc(alts, hasPredicates, tokenMatcher, dynamicTokensEnabled) {\n  var numOfAlts = alts.length;\n  var areAllOneTokenLookahead = (0, every_1.default)(alts, function (currAlt) {\n    return (0, every_1.default)(currAlt, function (currPath) {\n      return currPath.length === 1;\n    });\n  }); // This version takes into account the predicates as well.\n\n  if (hasPredicates) {\n    /**\n     * @returns {number} - The chosen alternative index\n     */\n    return function (orAlts) {\n      // unfortunately the predicates must be extracted every single time\n      // as they cannot be cached due to references to parameters(vars) which are no longer valid.\n      // note that in the common case of no predicates, no cpu time will be wasted on this (see else block)\n      var predicates = (0, map_1.default)(orAlts, function (currAlt) {\n        return currAlt.GATE;\n      });\n\n      for (var t = 0; t < numOfAlts; t++) {\n        var currAlt = alts[t];\n        var currNumOfPaths = currAlt.length;\n        var currPredicate = predicates[t];\n\n        if (currPredicate !== undefined && currPredicate.call(this) === false) {\n          // if the predicate does not match there is no point in checking the paths\n          continue;\n        }\n\n        nextPath: for (var j = 0; j < currNumOfPaths; j++) {\n          var currPath = currAlt[j];\n          var currPathLength = currPath.length;\n\n          for (var i = 0; i < currPathLength; i++) {\n            var nextToken = this.LA(i + 1);\n\n            if (tokenMatcher(nextToken, currPath[i]) === false) {\n              // mismatch in current path\n              // try the next pth\n              continue nextPath;\n            }\n          } // found a full path that matches.\n          // this will also work for an empty ALT as the loop will be skipped\n\n\n          return t;\n        } // none of the paths for the current alternative matched\n        // try the next alternative\n\n      } // none of the alternatives could be matched\n\n\n      return undefined;\n    };\n  } else if (areAllOneTokenLookahead && !dynamicTokensEnabled) {\n    // optimized (common) case of all the lookaheads paths requiring only\n    // a single token lookahead. These Optimizations cannot work if dynamically defined Tokens are used.\n    var singleTokenAlts = (0, map_1.default)(alts, function (currAlt) {\n      return (0, flatten_1.default)(currAlt);\n    });\n    var choiceToAlt_1 = (0, reduce_1.default)(singleTokenAlts, function (result, currAlt, idx) {\n      (0, forEach_1.default)(currAlt, function (currTokType) {\n        if (!(0, has_1.default)(result, currTokType.tokenTypeIdx)) {\n          result[currTokType.tokenTypeIdx] = idx;\n        }\n\n        (0, forEach_1.default)(currTokType.categoryMatches, function (currExtendingType) {\n          if (!(0, has_1.default)(result, currExtendingType)) {\n            result[currExtendingType] = idx;\n          }\n        });\n      });\n      return result;\n    }, {});\n    /**\n     * @returns {number} - The chosen alternative index\n     */\n\n    return function () {\n      var nextToken = this.LA(1);\n      return choiceToAlt_1[nextToken.tokenTypeIdx];\n    };\n  } else {\n    // optimized lookahead without needing to check the predicates at all.\n    // this causes code duplication which is intentional to improve performance.\n\n    /**\n     * @returns {number} - The chosen alternative index\n     */\n    return function () {\n      for (var t = 0; t < numOfAlts; t++) {\n        var currAlt = alts[t];\n        var currNumOfPaths = currAlt.length;\n\n        nextPath: for (var j = 0; j < currNumOfPaths; j++) {\n          var currPath = currAlt[j];\n          var currPathLength = currPath.length;\n\n          for (var i = 0; i < currPathLength; i++) {\n            var nextToken = this.LA(i + 1);\n\n            if (tokenMatcher(nextToken, currPath[i]) === false) {\n              // mismatch in current path\n              // try the next pth\n              continue nextPath;\n            }\n          } // found a full path that matches.\n          // this will also work for an empty ALT as the loop will be skipped\n\n\n          return t;\n        } // none of the paths for the current alternative matched\n        // try the next alternative\n\n      } // none of the alternatives could be matched\n\n\n      return undefined;\n    };\n  }\n}\n\nexports.buildAlternativesLookAheadFunc = buildAlternativesLookAheadFunc;\n\nfunction buildSingleAlternativeLookaheadFunction(alt, tokenMatcher, dynamicTokensEnabled) {\n  var areAllOneTokenLookahead = (0, every_1.default)(alt, function (currPath) {\n    return currPath.length === 1;\n  });\n  var numOfPaths = alt.length; // optimized (common) case of all the lookaheads paths requiring only\n  // a single token lookahead.\n\n  if (areAllOneTokenLookahead && !dynamicTokensEnabled) {\n    var singleTokensTypes = (0, flatten_1.default)(alt);\n\n    if (singleTokensTypes.length === 1 && (0, isEmpty_1.default)(singleTokensTypes[0].categoryMatches)) {\n      var expectedTokenType = singleTokensTypes[0];\n      var expectedTokenUniqueKey_1 = expectedTokenType.tokenTypeIdx;\n      return function () {\n        return this.LA(1).tokenTypeIdx === expectedTokenUniqueKey_1;\n      };\n    } else {\n      var choiceToAlt_2 = (0, reduce_1.default)(singleTokensTypes, function (result, currTokType, idx) {\n        result[currTokType.tokenTypeIdx] = true;\n        (0, forEach_1.default)(currTokType.categoryMatches, function (currExtendingType) {\n          result[currExtendingType] = true;\n        });\n        return result;\n      }, []);\n      return function () {\n        var nextToken = this.LA(1);\n        return choiceToAlt_2[nextToken.tokenTypeIdx] === true;\n      };\n    }\n  } else {\n    return function () {\n      nextPath: for (var j = 0; j < numOfPaths; j++) {\n        var currPath = alt[j];\n        var currPathLength = currPath.length;\n\n        for (var i = 0; i < currPathLength; i++) {\n          var nextToken = this.LA(i + 1);\n\n          if (tokenMatcher(nextToken, currPath[i]) === false) {\n            // mismatch in current path\n            // try the next pth\n            continue nextPath;\n          }\n        } // found a full path that matches.\n\n\n        return true;\n      } // none of the paths matched\n\n\n      return false;\n    };\n  }\n}\n\nexports.buildSingleAlternativeLookaheadFunction = buildSingleAlternativeLookaheadFunction;\n\nvar RestDefinitionFinderWalker =\n/** @class */\nfunction (_super) {\n  __extends(RestDefinitionFinderWalker, _super);\n\n  function RestDefinitionFinderWalker(topProd, targetOccurrence, targetProdType) {\n    var _this = _super.call(this) || this;\n\n    _this.topProd = topProd;\n    _this.targetOccurrence = targetOccurrence;\n    _this.targetProdType = targetProdType;\n    return _this;\n  }\n\n  RestDefinitionFinderWalker.prototype.startWalking = function () {\n    this.walk(this.topProd);\n    return this.restDef;\n  };\n\n  RestDefinitionFinderWalker.prototype.checkIsTarget = function (node, expectedProdType, currRest, prevRest) {\n    if (node.idx === this.targetOccurrence && this.targetProdType === expectedProdType) {\n      this.restDef = currRest.concat(prevRest);\n      return true;\n    } // performance optimization, do not iterate over the entire Grammar ast after we have found the target\n\n\n    return false;\n  };\n\n  RestDefinitionFinderWalker.prototype.walkOption = function (optionProd, currRest, prevRest) {\n    if (!this.checkIsTarget(optionProd, PROD_TYPE.OPTION, currRest, prevRest)) {\n      _super.prototype.walkOption.call(this, optionProd, currRest, prevRest);\n    }\n  };\n\n  RestDefinitionFinderWalker.prototype.walkAtLeastOne = function (atLeastOneProd, currRest, prevRest) {\n    if (!this.checkIsTarget(atLeastOneProd, PROD_TYPE.REPETITION_MANDATORY, currRest, prevRest)) {\n      _super.prototype.walkOption.call(this, atLeastOneProd, currRest, prevRest);\n    }\n  };\n\n  RestDefinitionFinderWalker.prototype.walkAtLeastOneSep = function (atLeastOneSepProd, currRest, prevRest) {\n    if (!this.checkIsTarget(atLeastOneSepProd, PROD_TYPE.REPETITION_MANDATORY_WITH_SEPARATOR, currRest, prevRest)) {\n      _super.prototype.walkOption.call(this, atLeastOneSepProd, currRest, prevRest);\n    }\n  };\n\n  RestDefinitionFinderWalker.prototype.walkMany = function (manyProd, currRest, prevRest) {\n    if (!this.checkIsTarget(manyProd, PROD_TYPE.REPETITION, currRest, prevRest)) {\n      _super.prototype.walkOption.call(this, manyProd, currRest, prevRest);\n    }\n  };\n\n  RestDefinitionFinderWalker.prototype.walkManySep = function (manySepProd, currRest, prevRest) {\n    if (!this.checkIsTarget(manySepProd, PROD_TYPE.REPETITION_WITH_SEPARATOR, currRest, prevRest)) {\n      _super.prototype.walkOption.call(this, manySepProd, currRest, prevRest);\n    }\n  };\n\n  return RestDefinitionFinderWalker;\n}(rest_1.RestWalker);\n/**\n * Returns the definition of a target production in a top level level rule.\n */\n\n\nvar InsideDefinitionFinderVisitor =\n/** @class */\nfunction (_super) {\n  __extends(InsideDefinitionFinderVisitor, _super);\n\n  function InsideDefinitionFinderVisitor(targetOccurrence, targetProdType, targetRef) {\n    var _this = _super.call(this) || this;\n\n    _this.targetOccurrence = targetOccurrence;\n    _this.targetProdType = targetProdType;\n    _this.targetRef = targetRef;\n    _this.result = [];\n    return _this;\n  }\n\n  InsideDefinitionFinderVisitor.prototype.checkIsTarget = function (node, expectedProdName) {\n    if (node.idx === this.targetOccurrence && this.targetProdType === expectedProdName && (this.targetRef === undefined || node === this.targetRef)) {\n      this.result = node.definition;\n    }\n  };\n\n  InsideDefinitionFinderVisitor.prototype.visitOption = function (node) {\n    this.checkIsTarget(node, PROD_TYPE.OPTION);\n  };\n\n  InsideDefinitionFinderVisitor.prototype.visitRepetition = function (node) {\n    this.checkIsTarget(node, PROD_TYPE.REPETITION);\n  };\n\n  InsideDefinitionFinderVisitor.prototype.visitRepetitionMandatory = function (node) {\n    this.checkIsTarget(node, PROD_TYPE.REPETITION_MANDATORY);\n  };\n\n  InsideDefinitionFinderVisitor.prototype.visitRepetitionMandatoryWithSeparator = function (node) {\n    this.checkIsTarget(node, PROD_TYPE.REPETITION_MANDATORY_WITH_SEPARATOR);\n  };\n\n  InsideDefinitionFinderVisitor.prototype.visitRepetitionWithSeparator = function (node) {\n    this.checkIsTarget(node, PROD_TYPE.REPETITION_WITH_SEPARATOR);\n  };\n\n  InsideDefinitionFinderVisitor.prototype.visitAlternation = function (node) {\n    this.checkIsTarget(node, PROD_TYPE.ALTERNATION);\n  };\n\n  return InsideDefinitionFinderVisitor;\n}(gast_2.GAstVisitor);\n\nfunction initializeArrayOfArrays(size) {\n  var result = new Array(size);\n\n  for (var i = 0; i < size; i++) {\n    result[i] = [];\n  }\n\n  return result;\n}\n/**\n * A sort of hash function between a Path in the grammar and a string.\n * Note that this returns multiple \"hashes\" to support the scenario of token categories.\n * -  A single path with categories may match multiple **actual** paths.\n */\n\n\nfunction pathToHashKeys(path) {\n  var keys = [\"\"];\n\n  for (var i = 0; i < path.length; i++) {\n    var tokType = path[i];\n    var longerKeys = [];\n\n    for (var j = 0; j < keys.length; j++) {\n      var currShorterKey = keys[j];\n      longerKeys.push(currShorterKey + \"_\" + tokType.tokenTypeIdx);\n\n      for (var t = 0; t < tokType.categoryMatches.length; t++) {\n        var categoriesKeySuffix = \"_\" + tokType.categoryMatches[t];\n        longerKeys.push(currShorterKey + categoriesKeySuffix);\n      }\n    }\n\n    keys = longerKeys;\n  }\n\n  return keys;\n}\n/**\n * Imperative style due to being called from a hot spot\n */\n\n\nfunction isUniquePrefixHash(altKnownPathsKeys, searchPathKeys, idx) {\n  for (var currAltIdx = 0; currAltIdx < altKnownPathsKeys.length; currAltIdx++) {\n    // We only want to test vs the other alternatives\n    if (currAltIdx === idx) {\n      continue;\n    }\n\n    var otherAltKnownPathsKeys = altKnownPathsKeys[currAltIdx];\n\n    for (var searchIdx = 0; searchIdx < searchPathKeys.length; searchIdx++) {\n      var searchKey = searchPathKeys[searchIdx];\n\n      if (otherAltKnownPathsKeys[searchKey] === true) {\n        return false;\n      }\n    }\n  } // None of the SearchPathKeys were found in any of the other alternatives\n\n\n  return true;\n}\n\nfunction lookAheadSequenceFromAlternatives(altsDefs, k) {\n  var partialAlts = (0, map_1.default)(altsDefs, function (currAlt) {\n    return (0, interpreter_1.possiblePathsFrom)([currAlt], 1);\n  });\n  var finalResult = initializeArrayOfArrays(partialAlts.length);\n  var altsHashes = (0, map_1.default)(partialAlts, function (currAltPaths) {\n    var dict = {};\n    (0, forEach_1.default)(currAltPaths, function (item) {\n      var keys = pathToHashKeys(item.partialPath);\n      (0, forEach_1.default)(keys, function (currKey) {\n        dict[currKey] = true;\n      });\n    });\n    return dict;\n  });\n  var newData = partialAlts; // maxLookahead loop\n\n  for (var pathLength = 1; pathLength <= k; pathLength++) {\n    var currDataset = newData;\n    newData = initializeArrayOfArrays(currDataset.length);\n\n    var _loop_1 = function _loop_1(altIdx) {\n      var currAltPathsAndSuffixes = currDataset[altIdx]; // paths in current alternative loop\n\n      for (var currPathIdx = 0; currPathIdx < currAltPathsAndSuffixes.length; currPathIdx++) {\n        var currPathPrefix = currAltPathsAndSuffixes[currPathIdx].partialPath;\n        var suffixDef = currAltPathsAndSuffixes[currPathIdx].suffixDef;\n        var prefixKeys = pathToHashKeys(currPathPrefix);\n        var isUnique = isUniquePrefixHash(altsHashes, prefixKeys, altIdx); // End of the line for this path.\n\n        if (isUnique || (0, isEmpty_1.default)(suffixDef) || currPathPrefix.length === k) {\n          var currAltResult = finalResult[altIdx]; // TODO: Can we implement a containsPath using Maps/Dictionaries?\n\n          if (containsPath(currAltResult, currPathPrefix) === false) {\n            currAltResult.push(currPathPrefix); // Update all new  keys for the current path.\n\n            for (var j = 0; j < prefixKeys.length; j++) {\n              var currKey = prefixKeys[j];\n              altsHashes[altIdx][currKey] = true;\n            }\n          }\n        } // Expand longer paths\n        else {\n          var newPartialPathsAndSuffixes = (0, interpreter_1.possiblePathsFrom)(suffixDef, pathLength + 1, currPathPrefix);\n          newData[altIdx] = newData[altIdx].concat(newPartialPathsAndSuffixes); // Update keys for new known paths\n\n          (0, forEach_1.default)(newPartialPathsAndSuffixes, function (item) {\n            var prefixKeys = pathToHashKeys(item.partialPath);\n            (0, forEach_1.default)(prefixKeys, function (key) {\n              altsHashes[altIdx][key] = true;\n            });\n          });\n        }\n      }\n    }; // alternatives loop\n\n\n    for (var altIdx = 0; altIdx < currDataset.length; altIdx++) {\n      _loop_1(altIdx);\n    }\n  }\n\n  return finalResult;\n}\n\nexports.lookAheadSequenceFromAlternatives = lookAheadSequenceFromAlternatives;\n\nfunction getLookaheadPathsForOr(occurrence, ruleGrammar, k, orProd) {\n  var visitor = new InsideDefinitionFinderVisitor(occurrence, PROD_TYPE.ALTERNATION, orProd);\n  ruleGrammar.accept(visitor);\n  return lookAheadSequenceFromAlternatives(visitor.result, k);\n}\n\nexports.getLookaheadPathsForOr = getLookaheadPathsForOr;\n\nfunction getLookaheadPathsForOptionalProd(occurrence, ruleGrammar, prodType, k) {\n  var insideDefVisitor = new InsideDefinitionFinderVisitor(occurrence, prodType);\n  ruleGrammar.accept(insideDefVisitor);\n  var insideDef = insideDefVisitor.result;\n  var afterDefWalker = new RestDefinitionFinderWalker(ruleGrammar, occurrence, prodType);\n  var afterDef = afterDefWalker.startWalking();\n  var insideFlat = new gast_1.Alternative({\n    definition: insideDef\n  });\n  var afterFlat = new gast_1.Alternative({\n    definition: afterDef\n  });\n  return lookAheadSequenceFromAlternatives([insideFlat, afterFlat], k);\n}\n\nexports.getLookaheadPathsForOptionalProd = getLookaheadPathsForOptionalProd;\n\nfunction containsPath(alternative, searchPath) {\n  compareOtherPath: for (var i = 0; i < alternative.length; i++) {\n    var otherPath = alternative[i];\n\n    if (otherPath.length !== searchPath.length) {\n      continue;\n    }\n\n    for (var j = 0; j < otherPath.length; j++) {\n      var searchTok = searchPath[j];\n      var otherTok = otherPath[j];\n      var matchingTokens = searchTok === otherTok || otherTok.categoryMatchesMap[searchTok.tokenTypeIdx] !== undefined;\n\n      if (matchingTokens === false) {\n        continue compareOtherPath;\n      }\n    }\n\n    return true;\n  }\n\n  return false;\n}\n\nexports.containsPath = containsPath;\n\nfunction isStrictPrefixOfPath(prefix, other) {\n  return prefix.length < other.length && (0, every_1.default)(prefix, function (tokType, idx) {\n    var otherTokType = other[idx];\n    return tokType === otherTokType || otherTokType.categoryMatchesMap[tokType.tokenTypeIdx];\n  });\n}\n\nexports.isStrictPrefixOfPath = isStrictPrefixOfPath;\n\nfunction areTokenCategoriesNotUsed(lookAheadPaths) {\n  return (0, every_1.default)(lookAheadPaths, function (singleAltPaths) {\n    return (0, every_1.default)(singleAltPaths, function (singlePath) {\n      return (0, every_1.default)(singlePath, function (token) {\n        return (0, isEmpty_1.default)(token.categoryMatches);\n      });\n    });\n  });\n}\n\nexports.areTokenCategoriesNotUsed = areTokenCategoriesNotUsed;","map":{"version":3,"sources":["../../../../src/parse/grammar/lookahead.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.areTokenCategoriesNotUsed = exports.isStrictPrefixOfPath = exports.containsPath = exports.getLookaheadPathsForOptionalProd = exports.getLookaheadPathsForOr = exports.lookAheadSequenceFromAlternatives = exports.buildSingleAlternativeLookaheadFunction = exports.buildAlternativesLookAheadFunc = exports.buildLookaheadFuncForOptionalProd = exports.buildLookaheadFuncForOr = exports.getProdType = exports.PROD_TYPE = void 0;\nvar isEmpty_1 = __importDefault(require(\"lodash/isEmpty\"));\nvar flatten_1 = __importDefault(require(\"lodash/flatten\"));\nvar every_1 = __importDefault(require(\"lodash/every\"));\nvar map_1 = __importDefault(require(\"lodash/map\"));\nvar forEach_1 = __importDefault(require(\"lodash/forEach\"));\nvar has_1 = __importDefault(require(\"lodash/has\"));\nvar reduce_1 = __importDefault(require(\"lodash/reduce\"));\nvar interpreter_1 = require(\"./interpreter\");\nvar rest_1 = require(\"./rest\");\nvar tokens_1 = require(\"../../scan/tokens\");\nvar gast_1 = require(\"@chevrotain/gast\");\nvar gast_2 = require(\"@chevrotain/gast\");\nvar PROD_TYPE;\n(function (PROD_TYPE) {\n    PROD_TYPE[PROD_TYPE[\"OPTION\"] = 0] = \"OPTION\";\n    PROD_TYPE[PROD_TYPE[\"REPETITION\"] = 1] = \"REPETITION\";\n    PROD_TYPE[PROD_TYPE[\"REPETITION_MANDATORY\"] = 2] = \"REPETITION_MANDATORY\";\n    PROD_TYPE[PROD_TYPE[\"REPETITION_MANDATORY_WITH_SEPARATOR\"] = 3] = \"REPETITION_MANDATORY_WITH_SEPARATOR\";\n    PROD_TYPE[PROD_TYPE[\"REPETITION_WITH_SEPARATOR\"] = 4] = \"REPETITION_WITH_SEPARATOR\";\n    PROD_TYPE[PROD_TYPE[\"ALTERNATION\"] = 5] = \"ALTERNATION\";\n})(PROD_TYPE = exports.PROD_TYPE || (exports.PROD_TYPE = {}));\nfunction getProdType(prod) {\n    /* istanbul ignore else */\n    if (prod instanceof gast_1.Option) {\n        return PROD_TYPE.OPTION;\n    }\n    else if (prod instanceof gast_1.Repetition) {\n        return PROD_TYPE.REPETITION;\n    }\n    else if (prod instanceof gast_1.RepetitionMandatory) {\n        return PROD_TYPE.REPETITION_MANDATORY;\n    }\n    else if (prod instanceof gast_1.RepetitionMandatoryWithSeparator) {\n        return PROD_TYPE.REPETITION_MANDATORY_WITH_SEPARATOR;\n    }\n    else if (prod instanceof gast_1.RepetitionWithSeparator) {\n        return PROD_TYPE.REPETITION_WITH_SEPARATOR;\n    }\n    else if (prod instanceof gast_1.Alternation) {\n        return PROD_TYPE.ALTERNATION;\n    }\n    else {\n        throw Error(\"non exhaustive match\");\n    }\n}\nexports.getProdType = getProdType;\nfunction buildLookaheadFuncForOr(occurrence, ruleGrammar, maxLookahead, hasPredicates, dynamicTokensEnabled, laFuncBuilder) {\n    var lookAheadPaths = getLookaheadPathsForOr(occurrence, ruleGrammar, maxLookahead);\n    var tokenMatcher = areTokenCategoriesNotUsed(lookAheadPaths)\n        ? tokens_1.tokenStructuredMatcherNoCategories\n        : tokens_1.tokenStructuredMatcher;\n    return laFuncBuilder(lookAheadPaths, hasPredicates, tokenMatcher, dynamicTokensEnabled);\n}\nexports.buildLookaheadFuncForOr = buildLookaheadFuncForOr;\n/**\n *  When dealing with an Optional production (OPTION/MANY/2nd iteration of AT_LEAST_ONE/...) we need to compare\n *  the lookahead \"inside\" the production and the lookahead immediately \"after\" it in the same top level rule (context free).\n *\n *  Example: given a production:\n *  ABC(DE)?DF\n *\n *  The optional '(DE)?' should only be entered if we see 'DE'. a single Token 'D' is not sufficient to distinguish between the two\n *  alternatives.\n *\n *  @returns A Lookahead function which will return true IFF the parser should parse the Optional production.\n */\nfunction buildLookaheadFuncForOptionalProd(occurrence, ruleGrammar, k, dynamicTokensEnabled, prodType, lookaheadBuilder) {\n    var lookAheadPaths = getLookaheadPathsForOptionalProd(occurrence, ruleGrammar, prodType, k);\n    var tokenMatcher = areTokenCategoriesNotUsed(lookAheadPaths)\n        ? tokens_1.tokenStructuredMatcherNoCategories\n        : tokens_1.tokenStructuredMatcher;\n    return lookaheadBuilder(lookAheadPaths[0], tokenMatcher, dynamicTokensEnabled);\n}\nexports.buildLookaheadFuncForOptionalProd = buildLookaheadFuncForOptionalProd;\nfunction buildAlternativesLookAheadFunc(alts, hasPredicates, tokenMatcher, dynamicTokensEnabled) {\n    var numOfAlts = alts.length;\n    var areAllOneTokenLookahead = (0, every_1.default)(alts, function (currAlt) {\n        return (0, every_1.default)(currAlt, function (currPath) {\n            return currPath.length === 1;\n        });\n    });\n    // This version takes into account the predicates as well.\n    if (hasPredicates) {\n        /**\n         * @returns {number} - The chosen alternative index\n         */\n        return function (orAlts) {\n            // unfortunately the predicates must be extracted every single time\n            // as they cannot be cached due to references to parameters(vars) which are no longer valid.\n            // note that in the common case of no predicates, no cpu time will be wasted on this (see else block)\n            var predicates = (0, map_1.default)(orAlts, function (currAlt) { return currAlt.GATE; });\n            for (var t = 0; t < numOfAlts; t++) {\n                var currAlt = alts[t];\n                var currNumOfPaths = currAlt.length;\n                var currPredicate = predicates[t];\n                if (currPredicate !== undefined && currPredicate.call(this) === false) {\n                    // if the predicate does not match there is no point in checking the paths\n                    continue;\n                }\n                nextPath: for (var j = 0; j < currNumOfPaths; j++) {\n                    var currPath = currAlt[j];\n                    var currPathLength = currPath.length;\n                    for (var i = 0; i < currPathLength; i++) {\n                        var nextToken = this.LA(i + 1);\n                        if (tokenMatcher(nextToken, currPath[i]) === false) {\n                            // mismatch in current path\n                            // try the next pth\n                            continue nextPath;\n                        }\n                    }\n                    // found a full path that matches.\n                    // this will also work for an empty ALT as the loop will be skipped\n                    return t;\n                }\n                // none of the paths for the current alternative matched\n                // try the next alternative\n            }\n            // none of the alternatives could be matched\n            return undefined;\n        };\n    }\n    else if (areAllOneTokenLookahead && !dynamicTokensEnabled) {\n        // optimized (common) case of all the lookaheads paths requiring only\n        // a single token lookahead. These Optimizations cannot work if dynamically defined Tokens are used.\n        var singleTokenAlts = (0, map_1.default)(alts, function (currAlt) {\n            return (0, flatten_1.default)(currAlt);\n        });\n        var choiceToAlt_1 = (0, reduce_1.default)(singleTokenAlts, function (result, currAlt, idx) {\n            (0, forEach_1.default)(currAlt, function (currTokType) {\n                if (!(0, has_1.default)(result, currTokType.tokenTypeIdx)) {\n                    result[currTokType.tokenTypeIdx] = idx;\n                }\n                (0, forEach_1.default)(currTokType.categoryMatches, function (currExtendingType) {\n                    if (!(0, has_1.default)(result, currExtendingType)) {\n                        result[currExtendingType] = idx;\n                    }\n                });\n            });\n            return result;\n        }, {});\n        /**\n         * @returns {number} - The chosen alternative index\n         */\n        return function () {\n            var nextToken = this.LA(1);\n            return choiceToAlt_1[nextToken.tokenTypeIdx];\n        };\n    }\n    else {\n        // optimized lookahead without needing to check the predicates at all.\n        // this causes code duplication which is intentional to improve performance.\n        /**\n         * @returns {number} - The chosen alternative index\n         */\n        return function () {\n            for (var t = 0; t < numOfAlts; t++) {\n                var currAlt = alts[t];\n                var currNumOfPaths = currAlt.length;\n                nextPath: for (var j = 0; j < currNumOfPaths; j++) {\n                    var currPath = currAlt[j];\n                    var currPathLength = currPath.length;\n                    for (var i = 0; i < currPathLength; i++) {\n                        var nextToken = this.LA(i + 1);\n                        if (tokenMatcher(nextToken, currPath[i]) === false) {\n                            // mismatch in current path\n                            // try the next pth\n                            continue nextPath;\n                        }\n                    }\n                    // found a full path that matches.\n                    // this will also work for an empty ALT as the loop will be skipped\n                    return t;\n                }\n                // none of the paths for the current alternative matched\n                // try the next alternative\n            }\n            // none of the alternatives could be matched\n            return undefined;\n        };\n    }\n}\nexports.buildAlternativesLookAheadFunc = buildAlternativesLookAheadFunc;\nfunction buildSingleAlternativeLookaheadFunction(alt, tokenMatcher, dynamicTokensEnabled) {\n    var areAllOneTokenLookahead = (0, every_1.default)(alt, function (currPath) {\n        return currPath.length === 1;\n    });\n    var numOfPaths = alt.length;\n    // optimized (common) case of all the lookaheads paths requiring only\n    // a single token lookahead.\n    if (areAllOneTokenLookahead && !dynamicTokensEnabled) {\n        var singleTokensTypes = (0, flatten_1.default)(alt);\n        if (singleTokensTypes.length === 1 &&\n            (0, isEmpty_1.default)(singleTokensTypes[0].categoryMatches)) {\n            var expectedTokenType = singleTokensTypes[0];\n            var expectedTokenUniqueKey_1 = expectedTokenType.tokenTypeIdx;\n            return function () {\n                return this.LA(1).tokenTypeIdx === expectedTokenUniqueKey_1;\n            };\n        }\n        else {\n            var choiceToAlt_2 = (0, reduce_1.default)(singleTokensTypes, function (result, currTokType, idx) {\n                result[currTokType.tokenTypeIdx] = true;\n                (0, forEach_1.default)(currTokType.categoryMatches, function (currExtendingType) {\n                    result[currExtendingType] = true;\n                });\n                return result;\n            }, []);\n            return function () {\n                var nextToken = this.LA(1);\n                return choiceToAlt_2[nextToken.tokenTypeIdx] === true;\n            };\n        }\n    }\n    else {\n        return function () {\n            nextPath: for (var j = 0; j < numOfPaths; j++) {\n                var currPath = alt[j];\n                var currPathLength = currPath.length;\n                for (var i = 0; i < currPathLength; i++) {\n                    var nextToken = this.LA(i + 1);\n                    if (tokenMatcher(nextToken, currPath[i]) === false) {\n                        // mismatch in current path\n                        // try the next pth\n                        continue nextPath;\n                    }\n                }\n                // found a full path that matches.\n                return true;\n            }\n            // none of the paths matched\n            return false;\n        };\n    }\n}\nexports.buildSingleAlternativeLookaheadFunction = buildSingleAlternativeLookaheadFunction;\nvar RestDefinitionFinderWalker = /** @class */ (function (_super) {\n    __extends(RestDefinitionFinderWalker, _super);\n    function RestDefinitionFinderWalker(topProd, targetOccurrence, targetProdType) {\n        var _this = _super.call(this) || this;\n        _this.topProd = topProd;\n        _this.targetOccurrence = targetOccurrence;\n        _this.targetProdType = targetProdType;\n        return _this;\n    }\n    RestDefinitionFinderWalker.prototype.startWalking = function () {\n        this.walk(this.topProd);\n        return this.restDef;\n    };\n    RestDefinitionFinderWalker.prototype.checkIsTarget = function (node, expectedProdType, currRest, prevRest) {\n        if (node.idx === this.targetOccurrence &&\n            this.targetProdType === expectedProdType) {\n            this.restDef = currRest.concat(prevRest);\n            return true;\n        }\n        // performance optimization, do not iterate over the entire Grammar ast after we have found the target\n        return false;\n    };\n    RestDefinitionFinderWalker.prototype.walkOption = function (optionProd, currRest, prevRest) {\n        if (!this.checkIsTarget(optionProd, PROD_TYPE.OPTION, currRest, prevRest)) {\n            _super.prototype.walkOption.call(this, optionProd, currRest, prevRest);\n        }\n    };\n    RestDefinitionFinderWalker.prototype.walkAtLeastOne = function (atLeastOneProd, currRest, prevRest) {\n        if (!this.checkIsTarget(atLeastOneProd, PROD_TYPE.REPETITION_MANDATORY, currRest, prevRest)) {\n            _super.prototype.walkOption.call(this, atLeastOneProd, currRest, prevRest);\n        }\n    };\n    RestDefinitionFinderWalker.prototype.walkAtLeastOneSep = function (atLeastOneSepProd, currRest, prevRest) {\n        if (!this.checkIsTarget(atLeastOneSepProd, PROD_TYPE.REPETITION_MANDATORY_WITH_SEPARATOR, currRest, prevRest)) {\n            _super.prototype.walkOption.call(this, atLeastOneSepProd, currRest, prevRest);\n        }\n    };\n    RestDefinitionFinderWalker.prototype.walkMany = function (manyProd, currRest, prevRest) {\n        if (!this.checkIsTarget(manyProd, PROD_TYPE.REPETITION, currRest, prevRest)) {\n            _super.prototype.walkOption.call(this, manyProd, currRest, prevRest);\n        }\n    };\n    RestDefinitionFinderWalker.prototype.walkManySep = function (manySepProd, currRest, prevRest) {\n        if (!this.checkIsTarget(manySepProd, PROD_TYPE.REPETITION_WITH_SEPARATOR, currRest, prevRest)) {\n            _super.prototype.walkOption.call(this, manySepProd, currRest, prevRest);\n        }\n    };\n    return RestDefinitionFinderWalker;\n}(rest_1.RestWalker));\n/**\n * Returns the definition of a target production in a top level level rule.\n */\nvar InsideDefinitionFinderVisitor = /** @class */ (function (_super) {\n    __extends(InsideDefinitionFinderVisitor, _super);\n    function InsideDefinitionFinderVisitor(targetOccurrence, targetProdType, targetRef) {\n        var _this = _super.call(this) || this;\n        _this.targetOccurrence = targetOccurrence;\n        _this.targetProdType = targetProdType;\n        _this.targetRef = targetRef;\n        _this.result = [];\n        return _this;\n    }\n    InsideDefinitionFinderVisitor.prototype.checkIsTarget = function (node, expectedProdName) {\n        if (node.idx === this.targetOccurrence &&\n            this.targetProdType === expectedProdName &&\n            (this.targetRef === undefined || node === this.targetRef)) {\n            this.result = node.definition;\n        }\n    };\n    InsideDefinitionFinderVisitor.prototype.visitOption = function (node) {\n        this.checkIsTarget(node, PROD_TYPE.OPTION);\n    };\n    InsideDefinitionFinderVisitor.prototype.visitRepetition = function (node) {\n        this.checkIsTarget(node, PROD_TYPE.REPETITION);\n    };\n    InsideDefinitionFinderVisitor.prototype.visitRepetitionMandatory = function (node) {\n        this.checkIsTarget(node, PROD_TYPE.REPETITION_MANDATORY);\n    };\n    InsideDefinitionFinderVisitor.prototype.visitRepetitionMandatoryWithSeparator = function (node) {\n        this.checkIsTarget(node, PROD_TYPE.REPETITION_MANDATORY_WITH_SEPARATOR);\n    };\n    InsideDefinitionFinderVisitor.prototype.visitRepetitionWithSeparator = function (node) {\n        this.checkIsTarget(node, PROD_TYPE.REPETITION_WITH_SEPARATOR);\n    };\n    InsideDefinitionFinderVisitor.prototype.visitAlternation = function (node) {\n        this.checkIsTarget(node, PROD_TYPE.ALTERNATION);\n    };\n    return InsideDefinitionFinderVisitor;\n}(gast_2.GAstVisitor));\nfunction initializeArrayOfArrays(size) {\n    var result = new Array(size);\n    for (var i = 0; i < size; i++) {\n        result[i] = [];\n    }\n    return result;\n}\n/**\n * A sort of hash function between a Path in the grammar and a string.\n * Note that this returns multiple \"hashes\" to support the scenario of token categories.\n * -  A single path with categories may match multiple **actual** paths.\n */\nfunction pathToHashKeys(path) {\n    var keys = [\"\"];\n    for (var i = 0; i < path.length; i++) {\n        var tokType = path[i];\n        var longerKeys = [];\n        for (var j = 0; j < keys.length; j++) {\n            var currShorterKey = keys[j];\n            longerKeys.push(currShorterKey + \"_\" + tokType.tokenTypeIdx);\n            for (var t = 0; t < tokType.categoryMatches.length; t++) {\n                var categoriesKeySuffix = \"_\" + tokType.categoryMatches[t];\n                longerKeys.push(currShorterKey + categoriesKeySuffix);\n            }\n        }\n        keys = longerKeys;\n    }\n    return keys;\n}\n/**\n * Imperative style due to being called from a hot spot\n */\nfunction isUniquePrefixHash(altKnownPathsKeys, searchPathKeys, idx) {\n    for (var currAltIdx = 0; currAltIdx < altKnownPathsKeys.length; currAltIdx++) {\n        // We only want to test vs the other alternatives\n        if (currAltIdx === idx) {\n            continue;\n        }\n        var otherAltKnownPathsKeys = altKnownPathsKeys[currAltIdx];\n        for (var searchIdx = 0; searchIdx < searchPathKeys.length; searchIdx++) {\n            var searchKey = searchPathKeys[searchIdx];\n            if (otherAltKnownPathsKeys[searchKey] === true) {\n                return false;\n            }\n        }\n    }\n    // None of the SearchPathKeys were found in any of the other alternatives\n    return true;\n}\nfunction lookAheadSequenceFromAlternatives(altsDefs, k) {\n    var partialAlts = (0, map_1.default)(altsDefs, function (currAlt) {\n        return (0, interpreter_1.possiblePathsFrom)([currAlt], 1);\n    });\n    var finalResult = initializeArrayOfArrays(partialAlts.length);\n    var altsHashes = (0, map_1.default)(partialAlts, function (currAltPaths) {\n        var dict = {};\n        (0, forEach_1.default)(currAltPaths, function (item) {\n            var keys = pathToHashKeys(item.partialPath);\n            (0, forEach_1.default)(keys, function (currKey) {\n                dict[currKey] = true;\n            });\n        });\n        return dict;\n    });\n    var newData = partialAlts;\n    // maxLookahead loop\n    for (var pathLength = 1; pathLength <= k; pathLength++) {\n        var currDataset = newData;\n        newData = initializeArrayOfArrays(currDataset.length);\n        var _loop_1 = function (altIdx) {\n            var currAltPathsAndSuffixes = currDataset[altIdx];\n            // paths in current alternative loop\n            for (var currPathIdx = 0; currPathIdx < currAltPathsAndSuffixes.length; currPathIdx++) {\n                var currPathPrefix = currAltPathsAndSuffixes[currPathIdx].partialPath;\n                var suffixDef = currAltPathsAndSuffixes[currPathIdx].suffixDef;\n                var prefixKeys = pathToHashKeys(currPathPrefix);\n                var isUnique = isUniquePrefixHash(altsHashes, prefixKeys, altIdx);\n                // End of the line for this path.\n                if (isUnique || (0, isEmpty_1.default)(suffixDef) || currPathPrefix.length === k) {\n                    var currAltResult = finalResult[altIdx];\n                    // TODO: Can we implement a containsPath using Maps/Dictionaries?\n                    if (containsPath(currAltResult, currPathPrefix) === false) {\n                        currAltResult.push(currPathPrefix);\n                        // Update all new  keys for the current path.\n                        for (var j = 0; j < prefixKeys.length; j++) {\n                            var currKey = prefixKeys[j];\n                            altsHashes[altIdx][currKey] = true;\n                        }\n                    }\n                }\n                // Expand longer paths\n                else {\n                    var newPartialPathsAndSuffixes = (0, interpreter_1.possiblePathsFrom)(suffixDef, pathLength + 1, currPathPrefix);\n                    newData[altIdx] = newData[altIdx].concat(newPartialPathsAndSuffixes);\n                    // Update keys for new known paths\n                    (0, forEach_1.default)(newPartialPathsAndSuffixes, function (item) {\n                        var prefixKeys = pathToHashKeys(item.partialPath);\n                        (0, forEach_1.default)(prefixKeys, function (key) {\n                            altsHashes[altIdx][key] = true;\n                        });\n                    });\n                }\n            }\n        };\n        // alternatives loop\n        for (var altIdx = 0; altIdx < currDataset.length; altIdx++) {\n            _loop_1(altIdx);\n        }\n    }\n    return finalResult;\n}\nexports.lookAheadSequenceFromAlternatives = lookAheadSequenceFromAlternatives;\nfunction getLookaheadPathsForOr(occurrence, ruleGrammar, k, orProd) {\n    var visitor = new InsideDefinitionFinderVisitor(occurrence, PROD_TYPE.ALTERNATION, orProd);\n    ruleGrammar.accept(visitor);\n    return lookAheadSequenceFromAlternatives(visitor.result, k);\n}\nexports.getLookaheadPathsForOr = getLookaheadPathsForOr;\nfunction getLookaheadPathsForOptionalProd(occurrence, ruleGrammar, prodType, k) {\n    var insideDefVisitor = new InsideDefinitionFinderVisitor(occurrence, prodType);\n    ruleGrammar.accept(insideDefVisitor);\n    var insideDef = insideDefVisitor.result;\n    var afterDefWalker = new RestDefinitionFinderWalker(ruleGrammar, occurrence, prodType);\n    var afterDef = afterDefWalker.startWalking();\n    var insideFlat = new gast_1.Alternative({ definition: insideDef });\n    var afterFlat = new gast_1.Alternative({ definition: afterDef });\n    return lookAheadSequenceFromAlternatives([insideFlat, afterFlat], k);\n}\nexports.getLookaheadPathsForOptionalProd = getLookaheadPathsForOptionalProd;\nfunction containsPath(alternative, searchPath) {\n    compareOtherPath: for (var i = 0; i < alternative.length; i++) {\n        var otherPath = alternative[i];\n        if (otherPath.length !== searchPath.length) {\n            continue;\n        }\n        for (var j = 0; j < otherPath.length; j++) {\n            var searchTok = searchPath[j];\n            var otherTok = otherPath[j];\n            var matchingTokens = searchTok === otherTok ||\n                otherTok.categoryMatchesMap[searchTok.tokenTypeIdx] !== undefined;\n            if (matchingTokens === false) {\n                continue compareOtherPath;\n            }\n        }\n        return true;\n    }\n    return false;\n}\nexports.containsPath = containsPath;\nfunction isStrictPrefixOfPath(prefix, other) {\n    return (prefix.length < other.length &&\n        (0, every_1.default)(prefix, function (tokType, idx) {\n            var otherTokType = other[idx];\n            return (tokType === otherTokType ||\n                otherTokType.categoryMatchesMap[tokType.tokenTypeIdx]);\n        }));\n}\nexports.isStrictPrefixOfPath = isStrictPrefixOfPath;\nfunction areTokenCategoriesNotUsed(lookAheadPaths) {\n    return (0, every_1.default)(lookAheadPaths, function (singleAltPaths) {\n        return (0, every_1.default)(singleAltPaths, function (singlePath) {\n            return (0, every_1.default)(singlePath, function (token) { return (0, isEmpty_1.default)(token.categoryMatches); });\n        });\n    });\n}\nexports.areTokenCategoriesNotUsed = areTokenCategoriesNotUsed;\n//# sourceMappingURL=lookahead.js.map"]},"metadata":{},"sourceType":"script"}