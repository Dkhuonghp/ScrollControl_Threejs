{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TreeBuilder = void 0;\n\nvar cst_1 = require(\"../../cst/cst\");\n\nvar noop_1 = __importDefault(require(\"lodash/noop\"));\n\nvar has_1 = __importDefault(require(\"lodash/has\"));\n\nvar keys_1 = __importDefault(require(\"lodash/keys\"));\n\nvar isUndefined_1 = __importDefault(require(\"lodash/isUndefined\"));\n\nvar cst_visitor_1 = require(\"../../cst/cst_visitor\");\n\nvar parser_1 = require(\"../parser\");\n/**\n * This trait is responsible for the CST building logic.\n */\n\n\nvar TreeBuilder =\n/** @class */\nfunction () {\n  function TreeBuilder() {}\n\n  TreeBuilder.prototype.initTreeBuilder = function (config) {\n    this.CST_STACK = []; // outputCst is no longer exposed/defined in the pubic API\n\n    this.outputCst = config.outputCst;\n    this.nodeLocationTracking = (0, has_1.default)(config, \"nodeLocationTracking\") ? config.nodeLocationTracking // assumes end user provides the correct config value/type\n    : parser_1.DEFAULT_PARSER_CONFIG.nodeLocationTracking;\n\n    if (!this.outputCst) {\n      this.cstInvocationStateUpdate = noop_1.default;\n      this.cstFinallyStateUpdate = noop_1.default;\n      this.cstPostTerminal = noop_1.default;\n      this.cstPostNonTerminal = noop_1.default;\n      this.cstPostRule = noop_1.default;\n    } else {\n      if (/full/i.test(this.nodeLocationTracking)) {\n        if (this.recoveryEnabled) {\n          this.setNodeLocationFromToken = cst_1.setNodeLocationFull;\n          this.setNodeLocationFromNode = cst_1.setNodeLocationFull;\n          this.cstPostRule = noop_1.default;\n          this.setInitialNodeLocation = this.setInitialNodeLocationFullRecovery;\n        } else {\n          this.setNodeLocationFromToken = noop_1.default;\n          this.setNodeLocationFromNode = noop_1.default;\n          this.cstPostRule = this.cstPostRuleFull;\n          this.setInitialNodeLocation = this.setInitialNodeLocationFullRegular;\n        }\n      } else if (/onlyOffset/i.test(this.nodeLocationTracking)) {\n        if (this.recoveryEnabled) {\n          this.setNodeLocationFromToken = cst_1.setNodeLocationOnlyOffset;\n          this.setNodeLocationFromNode = cst_1.setNodeLocationOnlyOffset;\n          this.cstPostRule = noop_1.default;\n          this.setInitialNodeLocation = this.setInitialNodeLocationOnlyOffsetRecovery;\n        } else {\n          this.setNodeLocationFromToken = noop_1.default;\n          this.setNodeLocationFromNode = noop_1.default;\n          this.cstPostRule = this.cstPostRuleOnlyOffset;\n          this.setInitialNodeLocation = this.setInitialNodeLocationOnlyOffsetRegular;\n        }\n      } else if (/none/i.test(this.nodeLocationTracking)) {\n        this.setNodeLocationFromToken = noop_1.default;\n        this.setNodeLocationFromNode = noop_1.default;\n        this.cstPostRule = noop_1.default;\n        this.setInitialNodeLocation = noop_1.default;\n      } else {\n        throw Error(\"Invalid <nodeLocationTracking> config option: \\\"\".concat(config.nodeLocationTracking, \"\\\"\"));\n      }\n    }\n  };\n\n  TreeBuilder.prototype.setInitialNodeLocationOnlyOffsetRecovery = function (cstNode) {\n    cstNode.location = {\n      startOffset: NaN,\n      endOffset: NaN\n    };\n  };\n\n  TreeBuilder.prototype.setInitialNodeLocationOnlyOffsetRegular = function (cstNode) {\n    cstNode.location = {\n      // without error recovery the starting Location of a new CstNode is guaranteed\n      // To be the next Token's startOffset (for valid inputs).\n      // For invalid inputs there won't be any CSTOutput so this potential\n      // inaccuracy does not matter\n      startOffset: this.LA(1).startOffset,\n      endOffset: NaN\n    };\n  };\n\n  TreeBuilder.prototype.setInitialNodeLocationFullRecovery = function (cstNode) {\n    cstNode.location = {\n      startOffset: NaN,\n      startLine: NaN,\n      startColumn: NaN,\n      endOffset: NaN,\n      endLine: NaN,\n      endColumn: NaN\n    };\n  };\n  /**\n     *  @see setInitialNodeLocationOnlyOffsetRegular for explanation why this work\n        * @param cstNode\n     */\n\n\n  TreeBuilder.prototype.setInitialNodeLocationFullRegular = function (cstNode) {\n    var nextToken = this.LA(1);\n    cstNode.location = {\n      startOffset: nextToken.startOffset,\n      startLine: nextToken.startLine,\n      startColumn: nextToken.startColumn,\n      endOffset: NaN,\n      endLine: NaN,\n      endColumn: NaN\n    };\n  };\n\n  TreeBuilder.prototype.cstInvocationStateUpdate = function (fullRuleName) {\n    var cstNode = {\n      name: fullRuleName,\n      children: Object.create(null)\n    };\n    this.setInitialNodeLocation(cstNode);\n    this.CST_STACK.push(cstNode);\n  };\n\n  TreeBuilder.prototype.cstFinallyStateUpdate = function () {\n    this.CST_STACK.pop();\n  };\n\n  TreeBuilder.prototype.cstPostRuleFull = function (ruleCstNode) {\n    // casts to `required<CstNodeLocation>` are safe because `cstPostRuleFull` should only be invoked when full location is enabled\n    var prevToken = this.LA(0);\n    var loc = ruleCstNode.location; // If this condition is true it means we consumed at least one Token\n    // In this CstNode.\n\n    if (loc.startOffset <= prevToken.startOffset === true) {\n      loc.endOffset = prevToken.endOffset;\n      loc.endLine = prevToken.endLine;\n      loc.endColumn = prevToken.endColumn;\n    } // \"empty\" CstNode edge case\n    else {\n      loc.startOffset = NaN;\n      loc.startLine = NaN;\n      loc.startColumn = NaN;\n    }\n  };\n\n  TreeBuilder.prototype.cstPostRuleOnlyOffset = function (ruleCstNode) {\n    var prevToken = this.LA(0); // `location' is not null because `cstPostRuleOnlyOffset` will only be invoked when location tracking is enabled.\n\n    var loc = ruleCstNode.location; // If this condition is true it means we consumed at least one Token\n    // In this CstNode.\n\n    if (loc.startOffset <= prevToken.startOffset === true) {\n      loc.endOffset = prevToken.endOffset;\n    } // \"empty\" CstNode edge case\n    else {\n      loc.startOffset = NaN;\n    }\n  };\n\n  TreeBuilder.prototype.cstPostTerminal = function (key, consumedToken) {\n    var rootCst = this.CST_STACK[this.CST_STACK.length - 1];\n    (0, cst_1.addTerminalToCst)(rootCst, consumedToken, key); // This is only used when **both** error recovery and CST Output are enabled.\n\n    this.setNodeLocationFromToken(rootCst.location, consumedToken);\n  };\n\n  TreeBuilder.prototype.cstPostNonTerminal = function (ruleCstResult, ruleName) {\n    var preCstNode = this.CST_STACK[this.CST_STACK.length - 1];\n    (0, cst_1.addNoneTerminalToCst)(preCstNode, ruleName, ruleCstResult); // This is only used when **both** error recovery and CST Output are enabled.\n\n    this.setNodeLocationFromNode(preCstNode.location, ruleCstResult.location);\n  };\n\n  TreeBuilder.prototype.getBaseCstVisitorConstructor = function () {\n    if ((0, isUndefined_1.default)(this.baseCstVisitorConstructor)) {\n      var newBaseCstVisitorConstructor = (0, cst_visitor_1.createBaseSemanticVisitorConstructor)(this.className, (0, keys_1.default)(this.gastProductionsCache));\n      this.baseCstVisitorConstructor = newBaseCstVisitorConstructor;\n      return newBaseCstVisitorConstructor;\n    }\n\n    return this.baseCstVisitorConstructor;\n  };\n\n  TreeBuilder.prototype.getBaseCstVisitorConstructorWithDefaults = function () {\n    if ((0, isUndefined_1.default)(this.baseCstVisitorWithDefaultsConstructor)) {\n      var newConstructor = (0, cst_visitor_1.createBaseVisitorConstructorWithDefaults)(this.className, (0, keys_1.default)(this.gastProductionsCache), this.getBaseCstVisitorConstructor());\n      this.baseCstVisitorWithDefaultsConstructor = newConstructor;\n      return newConstructor;\n    }\n\n    return this.baseCstVisitorWithDefaultsConstructor;\n  };\n\n  TreeBuilder.prototype.getLastExplicitRuleShortName = function () {\n    var ruleStack = this.RULE_STACK;\n    return ruleStack[ruleStack.length - 1];\n  };\n\n  TreeBuilder.prototype.getPreviousExplicitRuleShortName = function () {\n    var ruleStack = this.RULE_STACK;\n    return ruleStack[ruleStack.length - 2];\n  };\n\n  TreeBuilder.prototype.getLastExplicitRuleOccurrenceIndex = function () {\n    var occurrenceStack = this.RULE_OCCURRENCE_STACK;\n    return occurrenceStack[occurrenceStack.length - 1];\n  };\n\n  return TreeBuilder;\n}();\n\nexports.TreeBuilder = TreeBuilder;","map":{"version":3,"sources":["../../../../../src/parse/parser/traits/tree_builder.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TreeBuilder = void 0;\nvar cst_1 = require(\"../../cst/cst\");\nvar noop_1 = __importDefault(require(\"lodash/noop\"));\nvar has_1 = __importDefault(require(\"lodash/has\"));\nvar keys_1 = __importDefault(require(\"lodash/keys\"));\nvar isUndefined_1 = __importDefault(require(\"lodash/isUndefined\"));\nvar cst_visitor_1 = require(\"../../cst/cst_visitor\");\nvar parser_1 = require(\"../parser\");\n/**\n * This trait is responsible for the CST building logic.\n */\nvar TreeBuilder = /** @class */ (function () {\n    function TreeBuilder() {\n    }\n    TreeBuilder.prototype.initTreeBuilder = function (config) {\n        this.CST_STACK = [];\n        // outputCst is no longer exposed/defined in the pubic API\n        this.outputCst = config.outputCst;\n        this.nodeLocationTracking = (0, has_1.default)(config, \"nodeLocationTracking\")\n            ? config.nodeLocationTracking // assumes end user provides the correct config value/type\n            : parser_1.DEFAULT_PARSER_CONFIG.nodeLocationTracking;\n        if (!this.outputCst) {\n            this.cstInvocationStateUpdate = noop_1.default;\n            this.cstFinallyStateUpdate = noop_1.default;\n            this.cstPostTerminal = noop_1.default;\n            this.cstPostNonTerminal = noop_1.default;\n            this.cstPostRule = noop_1.default;\n        }\n        else {\n            if (/full/i.test(this.nodeLocationTracking)) {\n                if (this.recoveryEnabled) {\n                    this.setNodeLocationFromToken = cst_1.setNodeLocationFull;\n                    this.setNodeLocationFromNode = cst_1.setNodeLocationFull;\n                    this.cstPostRule = noop_1.default;\n                    this.setInitialNodeLocation = this.setInitialNodeLocationFullRecovery;\n                }\n                else {\n                    this.setNodeLocationFromToken = noop_1.default;\n                    this.setNodeLocationFromNode = noop_1.default;\n                    this.cstPostRule = this.cstPostRuleFull;\n                    this.setInitialNodeLocation = this.setInitialNodeLocationFullRegular;\n                }\n            }\n            else if (/onlyOffset/i.test(this.nodeLocationTracking)) {\n                if (this.recoveryEnabled) {\n                    this.setNodeLocationFromToken = cst_1.setNodeLocationOnlyOffset;\n                    this.setNodeLocationFromNode = cst_1.setNodeLocationOnlyOffset;\n                    this.cstPostRule = noop_1.default;\n                    this.setInitialNodeLocation =\n                        this.setInitialNodeLocationOnlyOffsetRecovery;\n                }\n                else {\n                    this.setNodeLocationFromToken = noop_1.default;\n                    this.setNodeLocationFromNode = noop_1.default;\n                    this.cstPostRule = this.cstPostRuleOnlyOffset;\n                    this.setInitialNodeLocation =\n                        this.setInitialNodeLocationOnlyOffsetRegular;\n                }\n            }\n            else if (/none/i.test(this.nodeLocationTracking)) {\n                this.setNodeLocationFromToken = noop_1.default;\n                this.setNodeLocationFromNode = noop_1.default;\n                this.cstPostRule = noop_1.default;\n                this.setInitialNodeLocation = noop_1.default;\n            }\n            else {\n                throw Error(\"Invalid <nodeLocationTracking> config option: \\\"\".concat(config.nodeLocationTracking, \"\\\"\"));\n            }\n        }\n    };\n    TreeBuilder.prototype.setInitialNodeLocationOnlyOffsetRecovery = function (cstNode) {\n        cstNode.location = {\n            startOffset: NaN,\n            endOffset: NaN\n        };\n    };\n    TreeBuilder.prototype.setInitialNodeLocationOnlyOffsetRegular = function (cstNode) {\n        cstNode.location = {\n            // without error recovery the starting Location of a new CstNode is guaranteed\n            // To be the next Token's startOffset (for valid inputs).\n            // For invalid inputs there won't be any CSTOutput so this potential\n            // inaccuracy does not matter\n            startOffset: this.LA(1).startOffset,\n            endOffset: NaN\n        };\n    };\n    TreeBuilder.prototype.setInitialNodeLocationFullRecovery = function (cstNode) {\n        cstNode.location = {\n            startOffset: NaN,\n            startLine: NaN,\n            startColumn: NaN,\n            endOffset: NaN,\n            endLine: NaN,\n            endColumn: NaN\n        };\n    };\n    /**\n       *  @see setInitialNodeLocationOnlyOffsetRegular for explanation why this work\n  \n       * @param cstNode\n       */\n    TreeBuilder.prototype.setInitialNodeLocationFullRegular = function (cstNode) {\n        var nextToken = this.LA(1);\n        cstNode.location = {\n            startOffset: nextToken.startOffset,\n            startLine: nextToken.startLine,\n            startColumn: nextToken.startColumn,\n            endOffset: NaN,\n            endLine: NaN,\n            endColumn: NaN\n        };\n    };\n    TreeBuilder.prototype.cstInvocationStateUpdate = function (fullRuleName) {\n        var cstNode = {\n            name: fullRuleName,\n            children: Object.create(null)\n        };\n        this.setInitialNodeLocation(cstNode);\n        this.CST_STACK.push(cstNode);\n    };\n    TreeBuilder.prototype.cstFinallyStateUpdate = function () {\n        this.CST_STACK.pop();\n    };\n    TreeBuilder.prototype.cstPostRuleFull = function (ruleCstNode) {\n        // casts to `required<CstNodeLocation>` are safe because `cstPostRuleFull` should only be invoked when full location is enabled\n        var prevToken = this.LA(0);\n        var loc = ruleCstNode.location;\n        // If this condition is true it means we consumed at least one Token\n        // In this CstNode.\n        if (loc.startOffset <= prevToken.startOffset === true) {\n            loc.endOffset = prevToken.endOffset;\n            loc.endLine = prevToken.endLine;\n            loc.endColumn = prevToken.endColumn;\n        }\n        // \"empty\" CstNode edge case\n        else {\n            loc.startOffset = NaN;\n            loc.startLine = NaN;\n            loc.startColumn = NaN;\n        }\n    };\n    TreeBuilder.prototype.cstPostRuleOnlyOffset = function (ruleCstNode) {\n        var prevToken = this.LA(0);\n        // `location' is not null because `cstPostRuleOnlyOffset` will only be invoked when location tracking is enabled.\n        var loc = ruleCstNode.location;\n        // If this condition is true it means we consumed at least one Token\n        // In this CstNode.\n        if (loc.startOffset <= prevToken.startOffset === true) {\n            loc.endOffset = prevToken.endOffset;\n        }\n        // \"empty\" CstNode edge case\n        else {\n            loc.startOffset = NaN;\n        }\n    };\n    TreeBuilder.prototype.cstPostTerminal = function (key, consumedToken) {\n        var rootCst = this.CST_STACK[this.CST_STACK.length - 1];\n        (0, cst_1.addTerminalToCst)(rootCst, consumedToken, key);\n        // This is only used when **both** error recovery and CST Output are enabled.\n        this.setNodeLocationFromToken(rootCst.location, consumedToken);\n    };\n    TreeBuilder.prototype.cstPostNonTerminal = function (ruleCstResult, ruleName) {\n        var preCstNode = this.CST_STACK[this.CST_STACK.length - 1];\n        (0, cst_1.addNoneTerminalToCst)(preCstNode, ruleName, ruleCstResult);\n        // This is only used when **both** error recovery and CST Output are enabled.\n        this.setNodeLocationFromNode(preCstNode.location, ruleCstResult.location);\n    };\n    TreeBuilder.prototype.getBaseCstVisitorConstructor = function () {\n        if ((0, isUndefined_1.default)(this.baseCstVisitorConstructor)) {\n            var newBaseCstVisitorConstructor = (0, cst_visitor_1.createBaseSemanticVisitorConstructor)(this.className, (0, keys_1.default)(this.gastProductionsCache));\n            this.baseCstVisitorConstructor = newBaseCstVisitorConstructor;\n            return newBaseCstVisitorConstructor;\n        }\n        return this.baseCstVisitorConstructor;\n    };\n    TreeBuilder.prototype.getBaseCstVisitorConstructorWithDefaults = function () {\n        if ((0, isUndefined_1.default)(this.baseCstVisitorWithDefaultsConstructor)) {\n            var newConstructor = (0, cst_visitor_1.createBaseVisitorConstructorWithDefaults)(this.className, (0, keys_1.default)(this.gastProductionsCache), this.getBaseCstVisitorConstructor());\n            this.baseCstVisitorWithDefaultsConstructor = newConstructor;\n            return newConstructor;\n        }\n        return this.baseCstVisitorWithDefaultsConstructor;\n    };\n    TreeBuilder.prototype.getLastExplicitRuleShortName = function () {\n        var ruleStack = this.RULE_STACK;\n        return ruleStack[ruleStack.length - 1];\n    };\n    TreeBuilder.prototype.getPreviousExplicitRuleShortName = function () {\n        var ruleStack = this.RULE_STACK;\n        return ruleStack[ruleStack.length - 2];\n    };\n    TreeBuilder.prototype.getLastExplicitRuleOccurrenceIndex = function () {\n        var occurrenceStack = this.RULE_OCCURRENCE_STACK;\n        return occurrenceStack[occurrenceStack.length - 1];\n    };\n    return TreeBuilder;\n}());\nexports.TreeBuilder = TreeBuilder;\n//# sourceMappingURL=tree_builder.js.map"]},"metadata":{},"sourceType":"script"}