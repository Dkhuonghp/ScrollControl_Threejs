{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.LexerAdapter = void 0;\n\nvar parser_1 = require(\"../parser\");\n/**\n * Trait responsible abstracting over the interaction with Lexer output (Token vector).\n *\n * This could be generalized to support other kinds of lexers, e.g.\n * - Just in Time Lexing / Lexer-Less parsing.\n * - Streaming Lexer.\n */\n\n\nvar LexerAdapter =\n/** @class */\nfunction () {\n  function LexerAdapter() {}\n\n  LexerAdapter.prototype.initLexerAdapter = function () {\n    this.tokVector = [];\n    this.tokVectorLength = 0;\n    this.currIdx = -1;\n  };\n\n  Object.defineProperty(LexerAdapter.prototype, \"input\", {\n    get: function get() {\n      return this.tokVector;\n    },\n    set: function set(newInput) {\n      // @ts-ignore - `this parameter` not supported in setters/getters\n      //   - https://www.typescriptlang.org/docs/handbook/functions.html#this-parameters\n      if (this.selfAnalysisDone !== true) {\n        throw Error(\"Missing <performSelfAnalysis> invocation at the end of the Parser's constructor.\");\n      } // @ts-ignore - `this parameter` not supported in setters/getters\n      //   - https://www.typescriptlang.org/docs/handbook/functions.html#this-parameters\n\n\n      this.reset();\n      this.tokVector = newInput;\n      this.tokVectorLength = newInput.length;\n    },\n    enumerable: false,\n    configurable: true\n  }); // skips a token and returns the next token\n\n  LexerAdapter.prototype.SKIP_TOKEN = function () {\n    if (this.currIdx <= this.tokVector.length - 2) {\n      this.consumeToken();\n      return this.LA(1);\n    } else {\n      return parser_1.END_OF_FILE;\n    }\n  }; // Lexer (accessing Token vector) related methods which can be overridden to implement lazy lexers\n  // or lexers dependent on parser context.\n\n\n  LexerAdapter.prototype.LA = function (howMuch) {\n    var soughtIdx = this.currIdx + howMuch;\n\n    if (soughtIdx < 0 || this.tokVectorLength <= soughtIdx) {\n      return parser_1.END_OF_FILE;\n    } else {\n      return this.tokVector[soughtIdx];\n    }\n  };\n\n  LexerAdapter.prototype.consumeToken = function () {\n    this.currIdx++;\n  };\n\n  LexerAdapter.prototype.exportLexerState = function () {\n    return this.currIdx;\n  };\n\n  LexerAdapter.prototype.importLexerState = function (newState) {\n    this.currIdx = newState;\n  };\n\n  LexerAdapter.prototype.resetLexerState = function () {\n    this.currIdx = -1;\n  };\n\n  LexerAdapter.prototype.moveToTerminatedState = function () {\n    this.currIdx = this.tokVector.length - 1;\n  };\n\n  LexerAdapter.prototype.getLexerPosition = function () {\n    return this.exportLexerState();\n  };\n\n  return LexerAdapter;\n}();\n\nexports.LexerAdapter = LexerAdapter;","map":{"version":3,"sources":["../../../../../src/parse/parser/traits/lexer_adapter.ts"],"names":[],"mappings":";;;;;;;AAAA,IAAA,QAAA,GAAA,OAAA,CAAA,WAAA,CAAA;AAIA;;;;;;AAMG;;;AACH,IAAA,YAAA;AAAA;AAAA,YAAA;EAAA,SAAA,YAAA,GAAA,CA0EC;;EArEC,YAAA,CAAA,SAAA,CAAA,gBAAA,GAAA,YAAA;IACE,KAAK,SAAL,GAAiB,EAAjB;IACA,KAAK,eAAL,GAAuB,CAAvB;IACA,KAAK,OAAL,GAAe,CAAC,CAAhB;EACD,CAJD;;EAMA,MAAA,CAAA,cAAA,CAAI,YAAA,CAAA,SAAJ,EAAI,OAAJ,EAAS;SAeT,eAAA;MACE,OAAO,KAAK,SAAZ;IACD,CAjBQ;SAAT,aAAU,QAAV,EAA4B;MAC1B;MACA;MACA,IAAI,KAAK,gBAAL,KAA0B,IAA9B,EAAoC;QAClC,MAAM,KAAK,CACT,kFADS,CAAX;MAGD,CAPyB,CAQ1B;MACA;;;MACA,KAAK,KAAL;MACA,KAAK,SAAL,GAAiB,QAAjB;MACA,KAAK,eAAL,GAAuB,QAAQ,CAAC,MAAhC;IACD,CAbQ;qBAAA;;EAAA,CAAT,EAXF,CA8BE;;EACA,YAAA,CAAA,SAAA,CAAA,UAAA,GAAA,YAAA;IACE,IAAI,KAAK,OAAL,IAAgB,KAAK,SAAL,CAAe,MAAf,GAAwB,CAA5C,EAA+C;MAC7C,KAAK,YAAL;MACA,OAAO,KAAK,EAAL,CAAQ,CAAR,CAAP;IACD,CAHD,MAGO;MACL,OAAO,QAAA,CAAA,WAAP;IACD;EACF,CAPD,CA/BF,CAwCE;EACA;;;EACA,YAAA,CAAA,SAAA,CAAA,EAAA,GAAA,UAAwB,OAAxB,EAAuC;IACrC,IAAM,SAAS,GAAG,KAAK,OAAL,GAAe,OAAjC;;IACA,IAAI,SAAS,GAAG,CAAZ,IAAiB,KAAK,eAAL,IAAwB,SAA7C,EAAwD;MACtD,OAAO,QAAA,CAAA,WAAP;IACD,CAFD,MAEO;MACL,OAAO,KAAK,SAAL,CAAe,SAAf,CAAP;IACD;EACF,CAPD;;EASA,YAAA,CAAA,SAAA,CAAA,YAAA,GAAA,YAAA;IACE,KAAK,OAAL;EACD,CAFD;;EAIA,YAAA,CAAA,SAAA,CAAA,gBAAA,GAAA,YAAA;IACE,OAAO,KAAK,OAAZ;EACD,CAFD;;EAIA,YAAA,CAAA,SAAA,CAAA,gBAAA,GAAA,UAAsC,QAAtC,EAAsD;IACpD,KAAK,OAAL,GAAe,QAAf;EACD,CAFD;;EAIA,YAAA,CAAA,SAAA,CAAA,eAAA,GAAA,YAAA;IACE,KAAK,OAAL,GAAe,CAAC,CAAhB;EACD,CAFD;;EAIA,YAAA,CAAA,SAAA,CAAA,qBAAA,GAAA,YAAA;IACE,KAAK,OAAL,GAAe,KAAK,SAAL,CAAe,MAAf,GAAwB,CAAvC;EACD,CAFD;;EAIA,YAAA,CAAA,SAAA,CAAA,gBAAA,GAAA,YAAA;IACE,OAAO,KAAK,gBAAL,EAAP;EACD,CAFD;;EAGF,OAAA,YAAA;AAAC,CA1ED,EAAA;;AAAa,OAAA,CAAA,YAAA,GAAA,YAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.LexerAdapter = void 0;\nvar parser_1 = require(\"../parser\");\n/**\n * Trait responsible abstracting over the interaction with Lexer output (Token vector).\n *\n * This could be generalized to support other kinds of lexers, e.g.\n * - Just in Time Lexing / Lexer-Less parsing.\n * - Streaming Lexer.\n */\nvar LexerAdapter = /** @class */ (function () {\n    function LexerAdapter() {\n    }\n    LexerAdapter.prototype.initLexerAdapter = function () {\n        this.tokVector = [];\n        this.tokVectorLength = 0;\n        this.currIdx = -1;\n    };\n    Object.defineProperty(LexerAdapter.prototype, \"input\", {\n        get: function () {\n            return this.tokVector;\n        },\n        set: function (newInput) {\n            // @ts-ignore - `this parameter` not supported in setters/getters\n            //   - https://www.typescriptlang.org/docs/handbook/functions.html#this-parameters\n            if (this.selfAnalysisDone !== true) {\n                throw Error(\"Missing <performSelfAnalysis> invocation at the end of the Parser's constructor.\");\n            }\n            // @ts-ignore - `this parameter` not supported in setters/getters\n            //   - https://www.typescriptlang.org/docs/handbook/functions.html#this-parameters\n            this.reset();\n            this.tokVector = newInput;\n            this.tokVectorLength = newInput.length;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    // skips a token and returns the next token\n    LexerAdapter.prototype.SKIP_TOKEN = function () {\n        if (this.currIdx <= this.tokVector.length - 2) {\n            this.consumeToken();\n            return this.LA(1);\n        }\n        else {\n            return parser_1.END_OF_FILE;\n        }\n    };\n    // Lexer (accessing Token vector) related methods which can be overridden to implement lazy lexers\n    // or lexers dependent on parser context.\n    LexerAdapter.prototype.LA = function (howMuch) {\n        var soughtIdx = this.currIdx + howMuch;\n        if (soughtIdx < 0 || this.tokVectorLength <= soughtIdx) {\n            return parser_1.END_OF_FILE;\n        }\n        else {\n            return this.tokVector[soughtIdx];\n        }\n    };\n    LexerAdapter.prototype.consumeToken = function () {\n        this.currIdx++;\n    };\n    LexerAdapter.prototype.exportLexerState = function () {\n        return this.currIdx;\n    };\n    LexerAdapter.prototype.importLexerState = function (newState) {\n        this.currIdx = newState;\n    };\n    LexerAdapter.prototype.resetLexerState = function () {\n        this.currIdx = -1;\n    };\n    LexerAdapter.prototype.moveToTerminatedState = function () {\n        this.currIdx = this.tokVector.length - 1;\n    };\n    LexerAdapter.prototype.getLexerPosition = function () {\n        return this.exportLexerState();\n    };\n    return LexerAdapter;\n}());\nexports.LexerAdapter = LexerAdapter;\n//# sourceMappingURL=lexer_adapter.js.map"]},"metadata":{},"sourceType":"script"}